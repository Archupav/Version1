{
	"info": {
		"_postman_id": "5df2589b-0d33-4dc0-98fb-9893a3911402",
		"name": "New_JAVA_API_Database_Validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "FamilyMediExpR3_Premiums_OOPs",
			"item": [
				{
					"name": "FamilyMedicareR3_Magi1_Premium & OOP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var BD = response.primaryBirthDate;\r",
									"var bit = BD.split('-');\r",
									"var primary_birthmonth = Number(bit[0]);\r",
									"var primary_birthyear = Number(bit[1]);\r",
									"// console.log(primary_birthyear);\r",
									"var current_date = new Date();\r",
									"var primary_age = current_date.getFullYear() - primary_birthyear;\r",
									"if (current_date.getMonth() < primary_birthmonth) { primary_age -= 1; }\r",
									"\r",
									"console.log(primary_age);\r",
									"postman.setEnvironmentVariable(\"primary_age\", primary_age);\r",
									"\r",
									"var spouseBD = response.spouseBirthDate;\r",
									"var bit1 = BD.split('-');\r",
									"var spouse_birthmonth = Number(bit[0]);\r",
									"var spouse_birthyear = Number(bit[1]);\r",
									"// console.log(primary_birthyear);\r",
									"//var current_date = new Date();\r",
									"var spouse_age = current_date.getFullYear() - spouse_birthyear;\r",
									"if (current_date.getMonth() < spouse_birthmonth) { spouse_age -= 1; }\r",
									"console.log(spouse_age);\r",
									"postman.setEnvironmentVariable(\"spouse_age\", spouse_age);\r",
									"\r",
									"postman.setEnvironmentVariable(\"year\", (response.familyMedicares[0].year));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartAPremium\", Math.round(response.familyMedicares[0].primaryPartAPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartAPremium\", (response.familyMedicares[0].spousePartAPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartBPremium\", (response.familyMedicares[0].primaryPartBPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPartBOOP\", Math.round(response.familyMedicares[0].primaryPartBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartBPremium\", (response.familyMedicares[0].spousePartBPremium));\r",
									"postman.setEnvironmentVariable(\"spousePartBOOP\", Math.round(response.familyMedicares[0].spousePartBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartDPremium\",Math.round(response.familyMedicares[0].primaryPartDPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPartDOOP\", Math.round(response.familyMedicares[0].primaryPartDOOP ));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartDPremium\",Math.round(response.familyMedicares[0].spousePartDPremium));\r",
									"postman.setEnvironmentVariable(\"spousePartDOOP\",Math.round(response.familyMedicares[0].spousePartDOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartFPremium\", (response.familyMedicares[0].primaryPartFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartFPremium\", (response.familyMedicares[0].spousePartFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPlanGPremium\", (response.familyMedicares[0].primaryPlanGPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPlanGOOP\", (response.familyMedicares[0].primaryPlanGOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePlanGPremium\", (response.familyMedicares[0].spousePlanGPremium));\r",
									"postman.setEnvironmentVariable(\"spousePlanGOOP\", (response.familyMedicares[0].spousePlanGOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPlanNPremium\", (response.familyMedicares[0].primaryPlanNPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPlanNOOP\", (response.familyMedicares[0].primaryPlanNOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePlanNPremium\", (response.familyMedicares[0].spousePlanNPremium));\r",
									"postman.setEnvironmentVariable(\"spousePlanNOOP\", (response.familyMedicares[0].spousePlanNOOP));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"{\r",
									"    pm.globals.set(\"server\",\"https://publicplan.aivante.net/aivante/NewFinancialPlanner/api/v1/\");\r",
									"postman.setEnvironmentVariable(\"birthDate\", \"01-1955\"),\r",
									"postman.setEnvironmentVariable(\"versionId\", \"1\"),\r",
									"postman.setEnvironmentVariable(\"planId\", \"2021Colorado8035BronzeEPOHealthSherpa\"),\r",
									"postman.setEnvironmentVariable(\"retirementYear\", \"01-2021\"),\r",
									"postman.setEnvironmentVariable(\"lifeExpectancy\", \"70\"),\r",
									"postman.setEnvironmentVariable(\"planType\", \"silver\")\r",
									"postman.setEnvironmentVariable(\"healthGrade\", \"1\"),\r",
									"postman.setEnvironmentVariable(\"singleVsMultipleMagi\", false),\r",
									"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\", false),\r",
									"postman.setEnvironmentVariable(\"magiTier\", \"1\"),\r",
									"postman.setEnvironmentVariable(\"taxFilingStatus\", \"MARRIED_FILING_JOINTLY\"),\r",
									"postman.setEnvironmentVariable(\"magiDollarAmount\", \"180000\"),\r",
									"postman.setEnvironmentVariable(\"stateName\", \"Colorado\"),\r",
									"postman.setEnvironmentVariable(\"zipcode\", \"80134\"),\r",
									"postman.setEnvironmentVariable(\"countyCode\", \"8035\"),\r",
									"postman.setEnvironmentVariable(\"retirementState\", \"Colorado\")\r",
									"postman.setEnvironmentVariable(\"retirementZipcode\", \"80134\")\r",
									"postman.setEnvironmentVariable(\"retirementCountyCode\", \"8035\"),\r",
									"postman.setEnvironmentVariable(\"boughtPlanA\", \"true\"),\r",
									"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\", \"false\"),\r",
									"postman.setEnvironmentVariable(\"reserveDaysUsed\", \"0\"),\r",
									"postman.setEnvironmentVariable(\"dental\", \"true\")\r",
									"postman.setEnvironmentVariable(\"dentalHealthGrade\", \"1\"),\r",
									"postman.setEnvironmentVariable(\"tobacco\", \"false\"),\r",
									"postman.setEnvironmentVariable(\"primaryYearWiseMagiDetailList\", '[{\"year\":2021 , \"magiTier\": 1, \"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"65000\"}, {\"year\":2022 , \"magiTier\": 2,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"95000\"}, {\"year\":2023 , \"magiTier\": 3,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"110000\"},  {\"year\":2024 , \"magiTier\": 4,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"140000\"},{\"year\":2025,  \"magiTier\": 5,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"200000\"}, {\"year\":2026 , \"magiTier\": 6,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"501000\"}]');\r",
									"postman.setEnvironmentVariable(\"spouseIncluded\", \"true\"),\r",
									"postman.setEnvironmentVariable(\"spousePlanId\", \"2021Connecticut9001SilverHMOVericred\"),\r",
									"\r",
									"postman.setEnvironmentVariable(\"spouseBirthDate\", \"01-1955\"),\r",
									"postman.setEnvironmentVariable(\"spouseRetirementYear\", \"01-2021\"),\r",
									"postman.setEnvironmentVariable(\"spouseLifeExpectancy\", 70),\r",
									"postman.setEnvironmentVariable(\"spouseSingleVsMultipleMagi\", false),\r",
									"postman.setEnvironmentVariable(\"spouseMagiTierVsDollarAmount\", false),\r",
									"postman.setEnvironmentVariable(\"spouseMagiTier\", 1),\r",
									"postman.setEnvironmentVariable(\"spouseTaxFilingStatus\", \"MARRIED_FILING_SEPARATELY\"),\r",
									"postman.setEnvironmentVariable(\"spouseMagiDollarAmount\", 4334621),\r",
									"postman.setEnvironmentVariable(\"spouseHealthGrade\", 1),\r",
									"postman.setEnvironmentVariable(\"spouseStateName\", \"Colorado\"),\r",
									"postman.setEnvironmentVariable(\"spouseZipcode\", \"80134\"),\r",
									"postman.setEnvironmentVariable(\"spouseCountyCode\", \"8035\"),\r",
									"postman.setEnvironmentVariable(\"spouseRetirementState\", \"Colorado\"),\r",
									"postman.setEnvironmentVariable(\"spouseRetirementZipcode\", \"80134\"),\r",
									"postman.setEnvironmentVariable(\"spouseRetirementCountyCode\", \"8035\"),\r",
									"postman.setEnvironmentVariable(\"spouseBoughtPlanA\", \"true\"),\r",
									"postman.setEnvironmentVariable(\"spouseReserveDaysUsed\", 0),\r",
									"postman.setEnvironmentVariable(\"spouseDental\", \"true\"),\r",
									"postman.setEnvironmentVariable(\"spouseDentalHealthGrade\", 1),\r",
									"postman.setEnvironmentVariable(\"spouseTobacco\", \"false\"),\r",
									"postman.setEnvironmentVariable(\"spouseYearWiseMagiDetailList\", '[{\"year\":2021 , \"magiTier\": 1, \"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"65000\"}, {\"year\":2022 , \"magiTier\": 2,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"95000\"}, {\"year\":2023 , \"magiTier\": 3,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"110000\"},  {\"year\":2024 , \"magiTier\": 4,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"140000\"},{\"year\":2025,  \"magiTier\": 5,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"200000\"}, {\"year\":2026 , \"magiTier\": 6,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"501000\"}]');\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"primaryPlanId\": \"{{planId}}\",\r\n    \"primaryBirthDate\": \"{{birthDate}}\",\r\n    \"primaryRetirementYear\": \"{{retirementYear}}\",\r\n    \"primaryLifeExpectancy\": {{lifeExpectancy}},\r\n    \"primaryPlanType\": \"{{planType}}\",\r\n    \"primaryHealthGrade\": \"{{healthGrade}}\",\r\n    \"primarySingleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"primaryMagiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"primaryMagiTier\": {{magiTier}},\r\n    \"primaryTaxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"primaryMagiDollarAmount\": {{magiDollarAmount}},\r\n    \"primaryStateName\": \"{{stateName}}\",\r\n    \"primaryZipcode\": \"{{zipcode}}\",\r\n    \"primaryRetirementState\": \"{{retirementState}}\",\r\n    \"primaryRetirementZipcode\": \"{{retirementZipcode}}\",\r\n    \"primaryBoughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"primaryReserveDaysUsed\": \"{{reserveDaysUsed}}\",\r\n    \"primaryDental\": \"{{dental}}\",\r\n    \"primaryDentalHealthGrade\": \"{{dentalHealthGrade}}\",\r\n    \"primaryTobacco\": {{tobacco}},\r\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\r\n\r\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\r\n    \"spousePlanId\": \"{{spousePlanId}}\",\r\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\r\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\r\n    \"spouseLifeExpectancy\": {{spouseLifeExpectancy}},\r\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\r\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\r\n    \"spouseMagiTier\": {{spouseMagiTier}},\r\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\r\n    \"spouseMagiDollarAmount\": {{spouseMagiDollarAmount}},\r\n    \"spouseHealthGrade\": {{spouseHealthGrade}},\r\n    \"spouseStateName\": \"{{spouseStateName}}\",\r\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\r\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\r\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\r\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\r\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\r\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\r\n    \"spouseReserveDaysUsed\": {{spouseReserveDaysUsed}},\r\n    \"spouseDental\": \"{{spouseDental}}\",\r\n    \"spouseDentalHealthGrade\": {{spouseDentalHealthGrade}},\r\n    \r\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\r\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\r\n}"
						},
						"url": {
							"raw": "{{server}}/familyMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"familyMedicareR3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_STATE_MULT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"premD_mult\", (response[0].premD_mult));\r",
									"postman.setEnvironmentVariable(\"OOP_mult\", (response[0].OOP_mult));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(State,eq,{{stateName}})&_fields=State,premC_mult,premD_mult,OOP_mult,premF_mult,Dental_mult\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/STATE_MULT?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"STATE_MULT"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG1_PARTA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartAPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API Primary_PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartAPremium'))).to.equal (String(DBPartAPremium, \"primaryPartAPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartAPremium'))).to.equal(String(DBPartAPremium, \"spousePartAPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Current_Age,eq,{{primary_age}})~and(Health_Grade,eq,{{healthGrade}})&_fields=Premium,Year,Current_Age,Health_Grade,OOP\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTA?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTA"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi1_PartB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartBPremium = data[0].Premium;\r",
									"var DBPartBOOP = data[0].OOP;\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartBOOP*OOP_mult));\r",
									"//console.log(\"oop: \"+ oop);\r",
									"\r",
									"pm.test(\"API primaryPartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartBPremium'))).to.equal (String(DBPartBPremium, \"primaryPartBPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartBPremium'))).to.equal(String(DBPartBPremium, \"spousePartBPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPartBOOP matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartBOOP'))).to.equal (String(oop, \"primaryPartBOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartBOOP'))).to.equal(String(oop, \"spousePartBOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{primary_age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTB?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTB"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi1_PARTD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var  DBPartDPremium = data[0].Premium;\r",
									"pm.environment.set(\"DBPartDPremium\", DBPartDPremium);\r",
									"var DBPartDOOP = data[0].OOP;\r",
									"var premD_mult = pm.environment.get('premD_mult');\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartDOOP*OOP_mult));\r",
									"console.log(\"oop: \"+ oop);\r",
									"\r",
									"\r",
									"pm.test(\"API primaryPartDPremium matches with PartD DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartDPremium'))).to.equal (String(Math.round(DBPartDPremium*premD_mult), \"primaryPartDPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartDPremium matches with PartD DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartDPremium'))).to.equal(String(Math.round(DBPartDPremium*premD_mult), \"primaryPartDPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPartDOOP matches with PartD DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartDOOP'))).to.equal (String(oop, \"primaryPartDOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartDOOP matches with PartD DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartDOOP'))).to.equal(String(oop, \"spousePartDOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{primary_age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTD?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTD"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG1_Part_f_r3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartFPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API primaryPartFPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartFPremium'))).to.equal (String(DBPartFPremium, \"primaryPartFPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartFPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartFPremium'))).to.equal(String(DBPartFPremium, \"spousePartFPremium did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=Premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/part_f_r3?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"part_f_r3"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG1_plan_g_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanGPremium = data[0].premium;\r",
									"//console.log(DBPartGPremium);\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API primaryPlanGPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanGPremium'))).to.equal (String(DBPlanGPremium, \"primaryPlanGPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanGPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanGPremium'))).to.equal(String(DBPlanGPremium, \"spousePlanGPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPlanGOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanGOOP'))).to.equal (String(DBPlanGOOP, \"primaryPlanGOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanGOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanGOOP'))).to.equal(String(DBPlanGOOP, \"spousePlanGOOP did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_g_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_g_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG1_plan_n_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanNPremium = data[0].premium;\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API primaryPlanNPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanNPremium'))).to.equal (String(DBPlanNPremium, \"primaryPlanNPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanNPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanNPremium'))).to.equal(String(DBPlanNPremium, \"spousePlanNPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPlanNOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanNOOP'))).to.equal (String(DBPlanGOOP, \"primaryPlanNOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanNOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanNOOP'))).to.equal(String(DBPlanGOOP, \"spousePlanNOOP did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_n_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_n_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FamilyMedicareR3_Magi2_HealthGrade2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var BD = response.primaryBirthDate;\r",
									"var bit = BD.split('-');\r",
									"var primary_birthmonth = Number(bit[0]);\r",
									"var primary_birthyear = Number(bit[1]);\r",
									"// console.log(primary_birthyear);\r",
									"var current_date = new Date();\r",
									"var primary_age = current_date.getFullYear() - primary_birthyear;\r",
									"if (current_date.getMonth() < primary_birthmonth) { primary_age -= 1; }\r",
									"\r",
									"console.log(primary_age);\r",
									"postman.setEnvironmentVariable(\"primary_age\", primary_age);\r",
									"\r",
									"var spouseBD = response.spouseBirthDate;\r",
									"var bit1 = BD.split('-');\r",
									"var spouse_birthmonth = Number(bit[0]);\r",
									"var spouse_birthyear = Number(bit[1]);\r",
									"// console.log(primary_birthyear);\r",
									"//var current_date = new Date();\r",
									"var spouse_age = current_date.getFullYear() - spouse_birthyear;\r",
									"if (current_date.getMonth() < spouse_birthmonth) { spouse_age -= 1; }\r",
									"console.log(spouse_age);\r",
									"postman.setEnvironmentVariable(\"spouse_age\", spouse_age);\r",
									"\r",
									"postman.setEnvironmentVariable(\"year\", (response.familyMedicares[0].year));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartAPremium\", Math.round(response.familyMedicares[0].primaryPartAPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartAPremium\", (response.familyMedicares[0].spousePartAPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartBPremium\", (response.familyMedicares[0].primaryPartBPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPartBOOP\", Math.round(response.familyMedicares[0].primaryPartBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartBPremium\", (response.familyMedicares[0].spousePartBPremium));\r",
									"postman.setEnvironmentVariable(\"spousePartBOOP\", Math.round(response.familyMedicares[0].spousePartBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartDPremium\",Math.round(response.familyMedicares[0].primaryPartDPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPartDOOP\", Math.round(response.familyMedicares[0].primaryPartDOOP ));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartDPremium\",Math.round(response.familyMedicares[0].spousePartDPremium));\r",
									"postman.setEnvironmentVariable(\"spousePartDOOP\",Math.round(response.familyMedicares[0].spousePartDOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartFPremium\", (response.familyMedicares[0].primaryPartFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartFPremium\", (response.familyMedicares[0].spousePartFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPlanGPremium\", (response.familyMedicares[0].primaryPlanGPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPlanGOOP\", (response.familyMedicares[0].primaryPlanGOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePlanGPremium\", (response.familyMedicares[0].spousePlanGPremium));\r",
									"postman.setEnvironmentVariable(\"spousePlanGOOP\", (response.familyMedicares[0].spousePlanGOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPlanNPremium\", (response.familyMedicares[0].primaryPlanNPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPlanNOOP\", (response.familyMedicares[0].primaryPlanNOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePlanNPremium\", (response.familyMedicares[0].spousePlanNPremium));\r",
									"postman.setEnvironmentVariable(\"spousePlanNOOP\", (response.familyMedicares[0].spousePlanNOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartDPremiumSurcharge\", (response.familyMedicares[0].primaryPartDPremiumSurcharge));\r",
									"postman.setEnvironmentVariable(\"spousePartDPremiumSurcharge\", (response.familyMedicares[0].spousePartDPremiumSurcharge));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"{\r",
									"    \r",
									"postman.setEnvironmentVariable(\"healthGrade\", 2),\r",
									"postman.setEnvironmentVariable(\"spouseHealthGrade\", 2),\r",
									"postman.setEnvironmentVariable(\"magiTier\", 2),\r",
									"postman.setEnvironmentVariable(\"spouseMagiTier\", 2)\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"primaryPlanId\": \"{{planId}}\",\r\n    \"primaryBirthDate\": \"{{birthDate}}\",\r\n    \"primaryRetirementYear\": \"{{retirementYear}}\",\r\n    \"primaryLifeExpectancy\": {{lifeExpectancy}},\r\n    \"primaryPlanType\": \"{{planType}}\",\r\n    \"primaryHealthGrade\": \"{{healthGrade}}\",\r\n    \"primarySingleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"primaryMagiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"primaryMagiTier\": {{magiTier}},\r\n    \"primaryTaxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"primaryMagiDollarAmount\": {{magiDollarAmount}},\r\n    \"primaryStateName\": \"{{stateName}}\",\r\n    \"primaryZipcode\": \"{{zipcode}}\",\r\n    \"primaryRetirementState\": \"{{retirementState}}\",\r\n    \"primaryRetirementZipcode\": \"{{retirementZipcode}}\",\r\n    \"primaryBoughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"primaryReserveDaysUsed\": \"{{reserveDaysUsed}}\",\r\n    \"primaryDental\": \"{{dental}}\",\r\n    \"primaryDentalHealthGrade\": \"{{dentalHealthGrade}}\",\r\n    \"primaryTobacco\": {{tobacco}},\r\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\r\n\r\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\r\n    \"spousePlanId\": \"{{spousePlanId}}\",\r\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\r\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\r\n    \"spouseLifeExpectancy\": {{spouseLifeExpectancy}},\r\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\r\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\r\n    \"spouseMagiTier\": {{spouseMagiTier}},\r\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\r\n    \"spouseMagiDollarAmount\": {{spouseMagiDollarAmount}},\r\n    \"spouseHealthGrade\": {{spouseHealthGrade}},\r\n    \"spouseStateName\": \"{{spouseStateName}}\",\r\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\r\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\r\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\r\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\r\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\r\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\r\n    \"spouseReserveDaysUsed\": {{spouseReserveDaysUsed}},\r\n    \"spouseDental\": \"{{spouseDental}}\",\r\n    \"spouseDentalHealthGrade\": {{spouseDentalHealthGrade}},\r\n    \r\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\r\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\r\n}"
						},
						"url": {
							"raw": "{{server}}/familyMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"familyMedicareR3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG2_PARTA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartAPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API Primary_PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartAPremium'))).to.equal (String(DBPartAPremium, \"primaryPartAPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartAPremium'))).to.equal(String(DBPartAPremium, \"spousePartAPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Current_Age,eq,{{primary_age}})~and(Health_Grade,eq,{{healthGrade}})&_fields=Premium,Year,Current_Age,Health_Grade,OOP\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTA?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTA"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi2_PartB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartBPremium = data[0].Premium;\r",
									"var DBPartBOOP = data[0].OOP;\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartBOOP*OOP_mult));\r",
									"//console.log(\"oop: \"+ oop);\r",
									"\r",
									"pm.test(\"API primaryPartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartBPremium'))).to.equal (String(DBPartBPremium, \"primaryPartBPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartBPremium'))).to.equal(String(DBPartBPremium, \"spousePartBPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPartBOOP matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartBOOP'))).to.equal (String(oop, \"primaryPartBOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartBOOP'))).to.equal(String(oop, \"spousePartBOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{primary_age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTB?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTB"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi2_PARTD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var Sur = pm.environment.get('primaryPartDPremiumSurcharge');\r",
									"var DBPartDPremium1 = pm.environment.get('DBPartDPremium');\r",
									"var premD_mult = pm.environment.get('premD_mult');\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"\r",
									"const Dpremium1 = (DBPartDPremium1*premD_mult);\r",
									"\r",
									"var Dpremium =parseFloat(Dpremium1)+parseFloat(Sur);\r",
									"console.log(\"Sur: \" + Sur);\r",
									"console.log(\"Dpremium: \" + Dpremium);\r",
									"//var DBPartDPremium = data[0].Premium;\r",
									"\r",
									"var DBPartDOOP = data[0].OOP;\r",
									"\r",
									"var oop = (Math.round(DBPartDOOP * OOP_mult));\r",
									"console.log(\"oop: \" + oop);\r",
									"\r",
									"\r",
									"pm.test(\"API primaryPartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('primaryPartDPremium'))).to.equal(String(Math.round((Dpremium)), \"primaryPartDPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('spousePartDPremium'))).to.equal(String(Math.round(Dpremium), \"primaryPartDPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('primaryPartDOOP'))).to.equal(String(oop, \"primaryPartDOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('spousePartDOOP'))).to.equal(String(oop, \"spousePartDOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{primary_age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP\"\r",
									"//console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTD?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTD"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG2_Part_f_r3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartFPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API primaryPartFPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartFPremium'))).to.equal (String(DBPartFPremium, \"primaryPartFPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartFPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartFPremium'))).to.equal(String(DBPartFPremium, \"spousePartFPremium did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=Premium,zipcode,age_then_year,age_now,current_health_grade,state,OOP\"\r",
									"//console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/part_f_r3?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"part_f_r3"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG2_plan_g_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanGPremium = data[0].premium;\r",
									"//console.log(DBPartGPremium);\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API primaryPlanGPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanGPremium'))).to.equal (String(DBPlanGPremium, \"primaryPlanGPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanGPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanGPremium'))).to.equal(String(DBPlanGPremium, \"spousePlanGPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPlanGOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanGOOP'))).to.equal (String(DBPlanGOOP, \"primaryPlanGOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanGOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanGOOP'))).to.equal(String(DBPlanGOOP, \"spousePlanGOOP did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"//console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_g_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_g_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG2_plan_n_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanNPremium = data[0].premium;\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API primaryPlanNPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanNPremium'))).to.equal (String(DBPlanNPremium, \"primaryPlanNPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanNPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanNPremium'))).to.equal(String(DBPlanNPremium, \"spousePlanNPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPlanNOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanNOOP'))).to.equal (String(DBPlanGOOP, \"primaryPlanNOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanNOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanNOOP'))).to.equal(String(DBPlanGOOP, \"spousePlanNOOP did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"//console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_n_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_n_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FamilyMedicareR3_Magi3_HealthGrade3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var BD = response.primaryBirthDate;\r",
									"var bit = BD.split('-');\r",
									"var primary_birthmonth = Number(bit[0]);\r",
									"var primary_birthyear = Number(bit[1]);\r",
									"// console.log(primary_birthyear);\r",
									"var current_date = new Date();\r",
									"var primary_age = current_date.getFullYear() - primary_birthyear;\r",
									"if (current_date.getMonth() < primary_birthmonth) { primary_age -= 1; }\r",
									"\r",
									"console.log(primary_age);\r",
									"postman.setEnvironmentVariable(\"primary_age\", primary_age);\r",
									"\r",
									"var spouseBD = response.spouseBirthDate;\r",
									"var bit1 = BD.split('-');\r",
									"var spouse_birthmonth = Number(bit[0]);\r",
									"var spouse_birthyear = Number(bit[1]);\r",
									"// console.log(primary_birthyear);\r",
									"//var current_date = new Date();\r",
									"var spouse_age = current_date.getFullYear() - spouse_birthyear;\r",
									"if (current_date.getMonth() < spouse_birthmonth) { spouse_age -= 1; }\r",
									"console.log(spouse_age);\r",
									"postman.setEnvironmentVariable(\"spouse_age\", spouse_age);\r",
									"\r",
									"postman.setEnvironmentVariable(\"year\", (response.familyMedicares[0].year));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartAPremium\", Math.round(response.familyMedicares[0].primaryPartAPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartAPremium\", (response.familyMedicares[0].spousePartAPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartBPremium\", (response.familyMedicares[0].primaryPartBPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPartBOOP\", Math.round(response.familyMedicares[0].primaryPartBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartBPremium\", (response.familyMedicares[0].spousePartBPremium));\r",
									"postman.setEnvironmentVariable(\"spousePartBOOP\", Math.round(response.familyMedicares[0].spousePartBOOP));\r",
									"\r",
									"// postman.setEnvironmentVariable(\"primaryPartCPremium\", (response.familyMedicares[0].primaryPartCPremium));\r",
									"// postman.setEnvironmentVariable(\"primaryPartCOOP\", (response.familyMedicares[0].primaryPartCOOP));\r",
									"\r",
									"// postman.setEnvironmentVariable(\"spousePartCPremium\", (response.familyMedicares[0].spousePartCPremium));\r",
									"// postman.setEnvironmentVariable(\"spousePartCOOP\", (response.familyMedicares[0].spousePartCOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartDPremium\",Math.round(response.familyMedicares[0].primaryPartDPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPartDOOP\", Math.round(response.familyMedicares[0].primaryPartDOOP ));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartDPremium\",Math.round(response.familyMedicares[0].spousePartDPremium));\r",
									"postman.setEnvironmentVariable(\"spousePartDOOP\",Math.round(response.familyMedicares[0].spousePartDOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartFPremium\", (response.familyMedicares[0].primaryPartFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartFPremium\", (response.familyMedicares[0].spousePartFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPlanGPremium\", (response.familyMedicares[0].primaryPlanGPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPlanGOOP\", (response.familyMedicares[0].primaryPlanGOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePlanGPremium\", (response.familyMedicares[0].spousePlanGPremium));\r",
									"postman.setEnvironmentVariable(\"spousePlanGOOP\", (response.familyMedicares[0].spousePlanGOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPlanNPremium\", (response.familyMedicares[0].primaryPlanNPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPlanNOOP\", (response.familyMedicares[0].primaryPlanNOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePlanNPremium\", (response.familyMedicares[0].spousePlanNPremium));\r",
									"postman.setEnvironmentVariable(\"spousePlanNOOP\", (response.familyMedicares[0].spousePlanNOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartDPremiumSurcharge\", (response.familyMedicares[0].primaryPartDPremiumSurcharge));\r",
									"postman.setEnvironmentVariable(\"spousePartDPremiumSurcharge\", (response.familyMedicares[0].spousePartDPremiumSurcharge));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"{\r",
									"postman.setEnvironmentVariable(\"healthGrade\", 3),\r",
									"postman.setEnvironmentVariable(\"spouseHealthGrade\", 3),\r",
									"postman.setEnvironmentVariable(\"magiTier\", 3),\r",
									"postman.setEnvironmentVariable(\"spouseMagiTier\", 3)\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"primaryPlanId\": \"{{planId}}\",\r\n    \"primaryBirthDate\": \"{{birthDate}}\",\r\n    \"primaryRetirementYear\": \"{{retirementYear}}\",\r\n    \"primaryLifeExpectancy\": {{lifeExpectancy}},\r\n    \"primaryPlanType\": \"{{planType}}\",\r\n    \"primaryHealthGrade\": \"{{healthGrade}}\",\r\n    \"primarySingleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"primaryMagiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"primaryMagiTier\": {{magiTier}},\r\n    \"primaryTaxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"primaryMagiDollarAmount\": {{magiDollarAmount}},\r\n    \"primaryStateName\": \"{{stateName}}\",\r\n    \"primaryZipcode\": \"{{zipcode}}\",\r\n    \"primaryRetirementState\": \"{{retirementState}}\",\r\n    \"primaryRetirementZipcode\": \"{{retirementZipcode}}\",\r\n    \"primaryBoughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"primaryReserveDaysUsed\": \"{{reserveDaysUsed}}\",\r\n    \"primaryDental\": \"{{dental}}\",\r\n    \"primaryDentalHealthGrade\": \"{{dentalHealthGrade}}\",\r\n    \"primaryTobacco\": {{tobacco}},\r\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\r\n\r\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\r\n    \"spousePlanId\": \"{{spousePlanId}}\",\r\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\r\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\r\n    \"spouseLifeExpectancy\": {{spouseLifeExpectancy}},\r\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\r\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\r\n    \"spouseMagiTier\": {{spouseMagiTier}},\r\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\r\n    \"spouseMagiDollarAmount\": {{spouseMagiDollarAmount}},\r\n    \"spouseHealthGrade\": {{spouseHealthGrade}},\r\n    \"spouseStateName\": \"{{spouseStateName}}\",\r\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\r\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\r\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\r\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\r\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\r\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\r\n    \"spouseReserveDaysUsed\": {{spouseReserveDaysUsed}},\r\n    \"spouseDental\": \"{{spouseDental}}\",\r\n    \"spouseDentalHealthGrade\": {{spouseDentalHealthGrade}},\r\n    \r\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\r\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\r\n}"
						},
						"url": {
							"raw": "{{server}}/familyMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"familyMedicareR3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG3_PARTA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartAPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API Primary_PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartAPremium'))).to.equal (String(DBPartAPremium, \"primaryPartAPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartAPremium'))).to.equal(String(DBPartAPremium, \"spousePartAPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Current_Age,eq,{{primary_age}})~and(Health_Grade,eq,{{healthGrade}})&_fields=Premium,Year,Current_Age,Health_Grade,OOP\"\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTA?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTA"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi3_PartB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartBPremium = data[0].Premium;\r",
									"var DBPartBOOP = data[0].OOP;\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartBOOP*OOP_mult));\r",
									"//console.log(\"oop: \"+ oop);\r",
									"\r",
									"pm.test(\"API primaryPartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartBPremium'))).to.equal (String(DBPartBPremium, \"primaryPartBPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartBPremium'))).to.equal(String(DBPartBPremium, \"spousePartBPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPartBOOP matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartBOOP'))).to.equal (String(oop, \"primaryPartBOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartBOOP'))).to.equal(String(oop, \"spousePartBOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{primary_age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTB?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTB"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi3_PARTD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var Sur = pm.environment.get('primaryPartDPremiumSurcharge');\r",
									"var DBPartDPremium1 = pm.environment.get('DBPartDPremium');\r",
									"var premD_mult = pm.environment.get('premD_mult');\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"\r",
									"const Dpremium1 = (DBPartDPremium1*premD_mult);\r",
									"\r",
									"var Dpremium =parseFloat(Dpremium1)+parseFloat(Sur);\r",
									"console.log(\"Sur: \" + Sur);\r",
									"console.log(\"Dpremium: \" + Dpremium);\r",
									"//var DBPartDPremium = data[0].Premium;\r",
									"\r",
									"var DBPartDOOP = data[0].OOP;\r",
									"\r",
									"var oop = (Math.round(DBPartDOOP * OOP_mult));\r",
									"console.log(\"oop: \" + oop);\r",
									"\r",
									"\r",
									"pm.test(\"API primaryPartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('primaryPartDPremium'))).to.equal(String(Math.round((Dpremium)), \"primaryPartDPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('spousePartDPremium'))).to.equal(String(Math.round(Dpremium), \"primaryPartDPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('primaryPartDOOP'))).to.equal(String(oop, \"primaryPartDOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('spousePartDOOP'))).to.equal(String(oop, \"spousePartDOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{primary_age}})~and(HealthGrade,eq,{{healthGrade}})&_fields=Premium,Year,Age,HealthGrade,OOP\"\r",
									"\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTD?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTD"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG3_Part_f_r3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartFPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API primaryPartFPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartFPremium'))).to.equal (String(DBPartFPremium, \"primaryPartFPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartFPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartFPremium'))).to.equal(String(DBPartFPremium, \"spousePartFPremium did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=Premium,zipcode,age_then_year,age_now,current_health_grade,state,OOP\"\r",
									"//console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/part_f_r3?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"part_f_r3"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG3_plan_g_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanGPremium = data[0].premium;\r",
									"//console.log(DBPartGPremium);\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API primaryPlanGPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanGPremium'))).to.equal (String(DBPlanGPremium, \"primaryPlanGPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanGPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanGPremium'))).to.equal(String(DBPlanGPremium, \"spousePlanGPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPlanGOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanGOOP'))).to.equal (String(DBPlanGOOP, \"primaryPlanGOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanGOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanGOOP'))).to.equal(String(DBPlanGOOP, \"spousePlanGOOP did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_g_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_g_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG3_plan_n_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanNPremium = data[0].premium;\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API primaryPlanNPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanNPremium'))).to.equal (String(DBPlanNPremium, \"primaryPlanNPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanNPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanNPremium'))).to.equal(String(DBPlanNPremium, \"spousePlanNPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPlanNOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanNOOP'))).to.equal (String(DBPlanGOOP, \"primaryPlanNOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanNOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanNOOP'))).to.equal(String(DBPlanGOOP, \"spousePlanNOOP did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"//console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_n_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_n_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FamilyMedicareR3_Magi4_HealthGrade4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var BD = response.primaryBirthDate;\r",
									"var bit = BD.split('-');\r",
									"var primary_birthmonth = Number(bit[0]);\r",
									"var primary_birthyear = Number(bit[1]);\r",
									"// console.log(primary_birthyear);\r",
									"var current_date = new Date();\r",
									"var primary_age = current_date.getFullYear() - primary_birthyear;\r",
									"if (current_date.getMonth() < primary_birthmonth) { primary_age -= 1; }\r",
									"\r",
									"console.log(primary_age);\r",
									"postman.setEnvironmentVariable(\"primary_age\", primary_age);\r",
									"\r",
									"var spouseBD = response.spouseBirthDate;\r",
									"var bit1 = BD.split('-');\r",
									"var spouse_birthmonth = Number(bit[0]);\r",
									"var spouse_birthyear = Number(bit[1]);\r",
									"// console.log(primary_birthyear);\r",
									"//var current_date = new Date();\r",
									"var spouse_age = current_date.getFullYear() - spouse_birthyear;\r",
									"if (current_date.getMonth() < spouse_birthmonth) { spouse_age -= 1; }\r",
									"console.log(spouse_age);\r",
									"postman.setEnvironmentVariable(\"spouse_age\", spouse_age);\r",
									"\r",
									"postman.setEnvironmentVariable(\"year\", (response.familyMedicares[0].year));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartAPremium\", Math.round(response.familyMedicares[0].primaryPartAPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartAPremium\", (response.familyMedicares[0].spousePartAPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartBPremium\", (response.familyMedicares[0].primaryPartBPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPartBOOP\", Math.round(response.familyMedicares[0].primaryPartBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartBPremium\", (response.familyMedicares[0].spousePartBPremium));\r",
									"postman.setEnvironmentVariable(\"spousePartBOOP\", Math.round(response.familyMedicares[0].spousePartBOOP));\r",
									"\r",
									"// postman.setEnvironmentVariable(\"primaryPartCPremium\", (response.familyMedicares[0].primaryPartCPremium));\r",
									"// postman.setEnvironmentVariable(\"primaryPartCOOP\", (response.familyMedicares[0].primaryPartCOOP));\r",
									"\r",
									"// postman.setEnvironmentVariable(\"spousePartCPremium\", (response.familyMedicares[0].spousePartCPremium));\r",
									"// postman.setEnvironmentVariable(\"spousePartCOOP\", (response.familyMedicares[0].spousePartCOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartDPremium\",Math.round(response.familyMedicares[0].primaryPartDPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPartDOOP\", Math.round(response.familyMedicares[0].primaryPartDOOP ));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartDPremium\",Math.round(response.familyMedicares[0].spousePartDPremium));\r",
									"postman.setEnvironmentVariable(\"spousePartDOOP\",Math.round(response.familyMedicares[0].spousePartDOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartFPremium\", (response.familyMedicares[0].primaryPartFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartFPremium\", (response.familyMedicares[0].spousePartFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPlanGPremium\", (response.familyMedicares[0].primaryPlanGPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPlanGOOP\", (response.familyMedicares[0].primaryPlanGOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePlanGPremium\", (response.familyMedicares[0].spousePlanGPremium));\r",
									"postman.setEnvironmentVariable(\"spousePlanGOOP\", (response.familyMedicares[0].spousePlanGOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPlanNPremium\", (response.familyMedicares[0].primaryPlanNPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPlanNOOP\", (response.familyMedicares[0].primaryPlanNOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePlanNPremium\", (response.familyMedicares[0].spousePlanNPremium));\r",
									"postman.setEnvironmentVariable(\"spousePlanNOOP\", (response.familyMedicares[0].spousePlanNOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartDPremiumSurcharge\", (response.familyMedicares[0].primaryPartDPremiumSurcharge));\r",
									"postman.setEnvironmentVariable(\"spousePartDPremiumSurcharge\", (response.familyMedicares[0].spousePartDPremiumSurcharge));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"{\r",
									"postman.setEnvironmentVariable(\"healthGrade\", 4),\r",
									"postman.setEnvironmentVariable(\"spouseHealthGrade\", 4),\r",
									"postman.setEnvironmentVariable(\"magiTier\", 4),\r",
									"postman.setEnvironmentVariable(\"spouseMagiTier\", 4)\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"primaryPlanId\": \"{{planId}}\",\r\n    \"primaryBirthDate\": \"{{birthDate}}\",\r\n    \"primaryRetirementYear\": \"{{retirementYear}}\",\r\n    \"primaryLifeExpectancy\": {{lifeExpectancy}},\r\n    \"primaryPlanType\": \"{{planType}}\",\r\n    \"primaryHealthGrade\": \"{{healthGrade}}\",\r\n    \"primarySingleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"primaryMagiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"primaryMagiTier\": {{magiTier}},\r\n    \"primaryTaxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"primaryMagiDollarAmount\": {{magiDollarAmount}},\r\n    \"primaryStateName\": \"{{stateName}}\",\r\n    \"primaryZipcode\": \"{{zipcode}}\",\r\n    \"primaryRetirementState\": \"{{retirementState}}\",\r\n    \"primaryRetirementZipcode\": \"{{retirementZipcode}}\",\r\n    \"primaryBoughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"primaryReserveDaysUsed\": \"{{reserveDaysUsed}}\",\r\n    \"primaryDental\": \"{{dental}}\",\r\n    \"primaryDentalHealthGrade\": \"{{dentalHealthGrade}}\",\r\n    \"primaryTobacco\": {{tobacco}},\r\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\r\n\r\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\r\n    \"spousePlanId\": \"{{spousePlanId}}\",\r\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\r\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\r\n    \"spouseLifeExpectancy\": {{spouseLifeExpectancy}},\r\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\r\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\r\n    \"spouseMagiTier\": {{spouseMagiTier}},\r\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\r\n    \"spouseMagiDollarAmount\": {{spouseMagiDollarAmount}},\r\n    \"spouseHealthGrade\": {{spouseHealthGrade}},\r\n    \"spouseStateName\": \"{{spouseStateName}}\",\r\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\r\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\r\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\r\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\r\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\r\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\r\n    \"spouseReserveDaysUsed\": {{spouseReserveDaysUsed}},\r\n    \"spouseDental\": \"{{spouseDental}}\",\r\n    \"spouseDentalHealthGrade\": {{spouseDentalHealthGrade}},\r\n    \r\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\r\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\r\n}"
						},
						"url": {
							"raw": "{{server}}/familyMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"familyMedicareR3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG4_PARTA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartAPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API Primary_PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartAPremium'))).to.equal (String(DBPartAPremium, \"primaryPartAPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartAPremium'))).to.equal(String(DBPartAPremium, \"spousePartAPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Current_Age,eq,{{primary_age}})~and(Health_Grade,eq,{{healthGrade}})&_fields=Premium,Year,Current_Age,Health_Grade,OOP\"\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTA?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTA"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi4_PartB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartBPremium = data[0].Premium;\r",
									"var DBPartBOOP = data[0].OOP;\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartBOOP*OOP_mult));\r",
									"//console.log(\"oop: \"+ oop);\r",
									"\r",
									"pm.test(\"API primaryPartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartBPremium'))).to.equal (String(DBPartBPremium, \"primaryPartBPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartBPremium'))).to.equal(String(DBPartBPremium, \"spousePartBPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPartBOOP matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartBOOP'))).to.equal (String(oop, \"primaryPartBOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartBOOP'))).to.equal(String(oop, \"spousePartBOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{primary_age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTB?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTB"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi4_PARTD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var Sur = pm.environment.get('primaryPartDPremiumSurcharge');\r",
									"console.log(\"Sur: \" + Sur);\r",
									"var DBPartDPremium1 = pm.environment.get('DBPartDPremium');\r",
									"console.log(\"DBPartDPremium1: \" + DBPartDPremium1);\r",
									"var premD_mult = pm.environment.get('premD_mult');\r",
									"console.log(\"premD_mult: \" + premD_mult);\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"\r",
									"\r",
									"const Dpremium1 = (DBPartDPremium1*premD_mult);\r",
									"\r",
									"var Dpremium =parseFloat(Dpremium1)+parseFloat(Sur);\r",
									"console.log(\"Dpremium: \" + Dpremium);\r",
									"//var DBPartDPremium = data[0].Premium;\r",
									"\r",
									"var DBPartDOOP = data[0].OOP;\r",
									"\r",
									"var oop = (Math.round(DBPartDOOP * OOP_mult));\r",
									"console.log(\"oop: \" + oop);\r",
									"\r",
									"\r",
									"pm.test(\"API primaryPartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('primaryPartDPremium'))).to.equal(String(Math.round((Dpremium)), \"primaryPartDPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('spousePartDPremium'))).to.equal(String(Math.round(Dpremium), \"primaryPartDPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('primaryPartDOOP'))).to.equal(String(oop, \"primaryPartDOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('spousePartDOOP'))).to.equal(String(oop, \"spousePartDOOP did not match\"));\r",
									"})\r",
									"\r",
									"    console.log(\"primaryPartDPremium\",pm.environment.get('primaryPartDPremium'));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{primary_age}})~and(HealthGrade,eq,{{healthGrade}})&_fields=Premium,Year,Age,HealthGrade,OOP\"\r",
									"\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTD?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTD"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG4_Part_f_r3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartFPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API primaryPartFPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartFPremium'))).to.equal (String(DBPartFPremium, \"primaryPartFPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartFPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartFPremium'))).to.equal(String(DBPartFPremium, \"spousePartFPremium did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=Premium,zipcode,age_then_year,age_now,current_health_grade,state,OOP\"\r",
									"//console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/part_f_r3?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"part_f_r3"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG4_plan_g_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanGPremium = data[0].premium;\r",
									"//console.log(DBPartGPremium);\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API primaryPlanGPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanGPremium'))).to.equal (String(DBPlanGPremium, \"primaryPlanGPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanGPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanGPremium'))).to.equal(String(DBPlanGPremium, \"spousePlanGPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPlanGOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanGOOP'))).to.equal (String(DBPlanGOOP, \"primaryPlanGOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanGOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanGOOP'))).to.equal(String(DBPlanGOOP, \"spousePlanGOOP did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_g_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_g_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG4_plan_n_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanNPremium = data[0].premium;\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API primaryPlanNPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanNPremium'))).to.equal (String(DBPlanNPremium, \"primaryPlanNPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanNPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanNPremium'))).to.equal(String(DBPlanNPremium, \"spousePlanNPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPlanNOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanNOOP'))).to.equal (String(DBPlanGOOP, \"primaryPlanNOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanNOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanNOOP'))).to.equal(String(DBPlanGOOP, \"spousePlanNOOP did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"//console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_n_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_n_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FamilyMedicareR3_Magi5_HealthGrade5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var BD = response.primaryBirthDate;\r",
									"var bit = BD.split('-');\r",
									"var primary_birthmonth = Number(bit[0]);\r",
									"var primary_birthyear = Number(bit[1]);\r",
									"// console.log(primary_birthyear);\r",
									"var current_date = new Date();\r",
									"var primary_age = current_date.getFullYear() - primary_birthyear;\r",
									"if (current_date.getMonth() < primary_birthmonth) { primary_age -= 1; }\r",
									"\r",
									"console.log(primary_age);\r",
									"postman.setEnvironmentVariable(\"primary_age\", primary_age);\r",
									"\r",
									"var spouseBD = response.spouseBirthDate;\r",
									"var bit1 = BD.split('-');\r",
									"var spouse_birthmonth = Number(bit[0]);\r",
									"var spouse_birthyear = Number(bit[1]);\r",
									"// console.log(primary_birthyear);\r",
									"//var current_date = new Date();\r",
									"var spouse_age = current_date.getFullYear() - spouse_birthyear;\r",
									"if (current_date.getMonth() < spouse_birthmonth) { spouse_age -= 1; }\r",
									"console.log(spouse_age);\r",
									"postman.setEnvironmentVariable(\"spouse_age\", spouse_age);\r",
									"\r",
									"postman.setEnvironmentVariable(\"year\", (response.familyMedicares[0].year));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartAPremium\", Math.round(response.familyMedicares[0].primaryPartAPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartAPremium\", (response.familyMedicares[0].spousePartAPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartBPremium\", (response.familyMedicares[0].primaryPartBPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPartBOOP\", Math.round(response.familyMedicares[0].primaryPartBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartBPremium\", (response.familyMedicares[0].spousePartBPremium));\r",
									"postman.setEnvironmentVariable(\"spousePartBOOP\", Math.round(response.familyMedicares[0].spousePartBOOP));\r",
									"\r",
									"// postman.setEnvironmentVariable(\"primaryPartCPremium\", (response.familyMedicares[0].primaryPartCPremium));\r",
									"// postman.setEnvironmentVariable(\"primaryPartCOOP\", (response.familyMedicares[0].primaryPartCOOP));\r",
									"\r",
									"// postman.setEnvironmentVariable(\"spousePartCPremium\", (response.familyMedicares[0].spousePartCPremium));\r",
									"// postman.setEnvironmentVariable(\"spousePartCOOP\", (response.familyMedicares[0].spousePartCOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartDPremium\",Math.round(response.familyMedicares[0].primaryPartDPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPartDOOP\", Math.round(response.familyMedicares[0].primaryPartDOOP ));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartDPremium\",Math.round(response.familyMedicares[0].spousePartDPremium));\r",
									"postman.setEnvironmentVariable(\"spousePartDOOP\",Math.round(response.familyMedicares[0].spousePartDOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartFPremium\", (response.familyMedicares[0].primaryPartFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartFPremium\", (response.familyMedicares[0].spousePartFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPlanGPremium\", (response.familyMedicares[0].primaryPlanGPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPlanGOOP\", (response.familyMedicares[0].primaryPlanGOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePlanGPremium\", (response.familyMedicares[0].spousePlanGPremium));\r",
									"postman.setEnvironmentVariable(\"spousePlanGOOP\", (response.familyMedicares[0].spousePlanGOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPlanNPremium\", (response.familyMedicares[0].primaryPlanNPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPlanNOOP\", (response.familyMedicares[0].primaryPlanNOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePlanNPremium\", (response.familyMedicares[0].spousePlanNPremium));\r",
									"postman.setEnvironmentVariable(\"spousePlanNOOP\", (response.familyMedicares[0].spousePlanNOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartDPremiumSurcharge\", (response.familyMedicares[0].primaryPartDPremiumSurcharge));\r",
									"postman.setEnvironmentVariable(\"spousePartDPremiumSurcharge\", (response.familyMedicares[0].spousePartDPremiumSurcharge));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"{\r",
									"postman.setEnvironmentVariable(\"healthGrade\", 5),\r",
									"postman.setEnvironmentVariable(\"spouseHealthGrade\", 5),\r",
									"postman.setEnvironmentVariable(\"magiTier\", 5),\r",
									"postman.setEnvironmentVariable(\"spouseMagiTier\", 5)\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"primaryPlanId\": \"{{planId}}\",\r\n    \"primaryBirthDate\": \"{{birthDate}}\",\r\n    \"primaryRetirementYear\": \"{{retirementYear}}\",\r\n    \"primaryLifeExpectancy\": {{lifeExpectancy}},\r\n    \"primaryPlanType\": \"{{planType}}\",\r\n    \"primaryHealthGrade\": \"{{healthGrade}}\",\r\n    \"primarySingleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"primaryMagiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"primaryMagiTier\": {{magiTier}},\r\n    \"primaryTaxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"primaryMagiDollarAmount\": {{magiDollarAmount}},\r\n    \"primaryStateName\": \"{{stateName}}\",\r\n    \"primaryZipcode\": \"{{zipcode}}\",\r\n    \"primaryRetirementState\": \"{{retirementState}}\",\r\n    \"primaryRetirementZipcode\": \"{{retirementZipcode}}\",\r\n    \"primaryBoughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"primaryReserveDaysUsed\": \"{{reserveDaysUsed}}\",\r\n    \"primaryDental\": \"{{dental}}\",\r\n    \"primaryDentalHealthGrade\": \"{{dentalHealthGrade}}\",\r\n    \"primaryTobacco\": {{tobacco}},\r\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\r\n\r\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\r\n    \"spousePlanId\": \"{{spousePlanId}}\",\r\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\r\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\r\n    \"spouseLifeExpectancy\": {{spouseLifeExpectancy}},\r\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\r\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\r\n    \"spouseMagiTier\": {{spouseMagiTier}},\r\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\r\n    \"spouseMagiDollarAmount\": {{spouseMagiDollarAmount}},\r\n    \"spouseHealthGrade\": {{spouseHealthGrade}},\r\n    \"spouseStateName\": \"{{spouseStateName}}\",\r\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\r\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\r\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\r\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\r\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\r\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\r\n    \"spouseReserveDaysUsed\": {{spouseReserveDaysUsed}},\r\n    \"spouseDental\": \"{{spouseDental}}\",\r\n    \"spouseDentalHealthGrade\": {{spouseDentalHealthGrade}},\r\n    \r\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\r\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\r\n}"
						},
						"url": {
							"raw": "{{server}}/familyMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"familyMedicareR3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG5_PARTA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartAPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API Primary_PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartAPremium'))).to.equal (String(DBPartAPremium, \"primaryPartAPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartAPremium'))).to.equal(String(DBPartAPremium, \"spousePartAPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Current_Age,eq,{{primary_age}})~and(Health_Grade,eq,{{healthGrade}})&_fields=Premium,Year,Current_Age,Health_Grade,OOP\"\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTA?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTA"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi5_PartB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartBPremium = data[0].Premium;\r",
									"var DBPartBOOP = data[0].OOP;\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartBOOP*OOP_mult));\r",
									"//console.log(\"oop: \"+ oop);\r",
									"\r",
									"pm.test(\"API primaryPartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartBPremium'))).to.equal (String(DBPartBPremium, \"primaryPartBPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartBPremium'))).to.equal(String(DBPartBPremium, \"spousePartBPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPartBOOP matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartBOOP'))).to.equal (String(oop, \"primaryPartBOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartBOOP'))).to.equal(String(oop, \"spousePartBOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{primary_age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTB?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTB"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi5_PARTD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var Sur = pm.environment.get('primaryPartDPremiumSurcharge');\r",
									"console.log(\"Sur: \" + Sur);\r",
									"var DBPartDPremium1 = pm.environment.get('DBPartDPremium');\r",
									"console.log(\"DBPartDPremium1: \" + DBPartDPremium1);\r",
									"var premD_mult = pm.environment.get('premD_mult');\r",
									"console.log(\"premD_mult: \" + premD_mult);\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"\r",
									"\r",
									"const Dpremium1 = (DBPartDPremium1*premD_mult);\r",
									"\r",
									"var Dpremium =parseFloat(Dpremium1)+parseFloat(Sur);\r",
									"console.log(\"Dpremium: \" + Dpremium);\r",
									"//var DBPartDPremium = data[0].Premium;\r",
									"\r",
									"var DBPartDOOP = data[0].OOP;\r",
									"\r",
									"var oop = (Math.round(DBPartDOOP * OOP_mult));\r",
									"console.log(\"oop: \" + oop);\r",
									"\r",
									"\r",
									"pm.test(\"API primaryPartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('primaryPartDPremium'))).to.equal(String(Math.round((Dpremium)), \"primaryPartDPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('spousePartDPremium'))).to.equal(String(Math.round(Dpremium), \"primaryPartDPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('primaryPartDOOP'))).to.equal(String(oop, \"primaryPartDOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('spousePartDOOP'))).to.equal(String(oop, \"spousePartDOOP did not match\"));\r",
									"})\r",
									"\r",
									"    console.log(\"primaryPartDPremium\",pm.environment.get('primaryPartDPremium'));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{primary_age}})~and(HealthGrade,eq,{{healthGrade}})&_fields=Premium,Year,Age,HealthGrade,OOP\"\r",
									"\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTD?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTD"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG5_Part_f_r3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartFPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API primaryPartFPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartFPremium'))).to.equal (String(DBPartFPremium, \"primaryPartFPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartFPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartFPremium'))).to.equal(String(DBPartFPremium, \"spousePartFPremium did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=Premium,zipcode,age_then_year,age_now,current_health_grade,state,OOP\"\r",
									"//console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/part_f_r3?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"part_f_r3"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG5_plan_g_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanGPremium = data[0].premium;\r",
									"//console.log(DBPartGPremium);\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API primaryPlanGPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanGPremium'))).to.equal (String(DBPlanGPremium, \"primaryPlanGPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanGPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanGPremium'))).to.equal(String(DBPlanGPremium, \"spousePlanGPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPlanGOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanGOOP'))).to.equal (String(DBPlanGOOP, \"primaryPlanGOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanGOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanGOOP'))).to.equal(String(DBPlanGOOP, \"spousePlanGOOP did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_g_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_g_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG5_plan_n_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanNPremium = data[0].premium;\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API primaryPlanNPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanNPremium'))).to.equal (String(DBPlanNPremium, \"primaryPlanNPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanNPremium matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanNPremium'))).to.equal(String(DBPlanNPremium, \"spousePlanNPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPlanNOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPlanNOOP'))).to.equal (String(DBPlanGOOP, \"primaryPlanNOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePlanNOOP matches with PlanG DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePlanNOOP'))).to.equal(String(DBPlanGOOP, \"spousePlanNOOP did not match\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"//console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_n_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_n_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FamilyMedicareR3_Magi6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var BD = response.primaryBirthDate;\r",
									"var bit = BD.split('-');\r",
									"var primary_birthmonth = Number(bit[0]);\r",
									"var primary_birthyear = Number(bit[1]);\r",
									"// console.log(primary_birthyear);\r",
									"var current_date = new Date();\r",
									"var primary_age = current_date.getFullYear() - primary_birthyear;\r",
									"if (current_date.getMonth() < primary_birthmonth) { primary_age -= 1; }\r",
									"\r",
									"console.log(primary_age);\r",
									"postman.setEnvironmentVariable(\"primary_age\", primary_age);\r",
									"\r",
									"var spouseBD = response.spouseBirthDate;\r",
									"var bit1 = BD.split('-');\r",
									"var spouse_birthmonth = Number(bit[0]);\r",
									"var spouse_birthyear = Number(bit[1]);\r",
									"// console.log(primary_birthyear);\r",
									"//var current_date = new Date();\r",
									"var spouse_age = current_date.getFullYear() - spouse_birthyear;\r",
									"if (current_date.getMonth() < spouse_birthmonth) { spouse_age -= 1; }\r",
									"console.log(spouse_age);\r",
									"postman.setEnvironmentVariable(\"spouse_age\", spouse_age);\r",
									"\r",
									"postman.setEnvironmentVariable(\"year\", (response.familyMedicares[0].year));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartAPremium\", Math.round(response.familyMedicares[0].primaryPartAPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartAPremium\", (response.familyMedicares[0].spousePartAPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartBPremium\", (response.familyMedicares[0].primaryPartBPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPartBOOP\", Math.round(response.familyMedicares[0].primaryPartBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartBPremium\", (response.familyMedicares[0].spousePartBPremium));\r",
									"postman.setEnvironmentVariable(\"spousePartBOOP\", Math.round(response.familyMedicares[0].spousePartBOOP));\r",
									"\r",
									"// postman.setEnvironmentVariable(\"primaryPartCPremium\", (response.familyMedicares[0].primaryPartCPremium));\r",
									"// postman.setEnvironmentVariable(\"primaryPartCOOP\", (response.familyMedicares[0].primaryPartCOOP));\r",
									"\r",
									"// postman.setEnvironmentVariable(\"spousePartCPremium\", (response.familyMedicares[0].spousePartCPremium));\r",
									"// postman.setEnvironmentVariable(\"spousePartCOOP\", (response.familyMedicares[0].spousePartCOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartDPremium\",Math.round(response.familyMedicares[0].primaryPartDPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPartDOOP\", Math.round(response.familyMedicares[0].primaryPartDOOP ));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartDPremium\",Math.round(response.familyMedicares[0].spousePartDPremium));\r",
									"postman.setEnvironmentVariable(\"spousePartDOOP\",Math.round(response.familyMedicares[0].spousePartDOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartFPremium\", (response.familyMedicares[0].primaryPartFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePartFPremium\", (response.familyMedicares[0].spousePartFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPlanGPremium\", (response.familyMedicares[0].primaryPlanGPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPlanGOOP\", (response.familyMedicares[0].primaryPlanGOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePlanGPremium\", (response.familyMedicares[0].spousePlanGPremium));\r",
									"postman.setEnvironmentVariable(\"spousePlanGOOP\", (response.familyMedicares[0].spousePlanGOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPlanNPremium\", (response.familyMedicares[0].primaryPlanNPremium));\r",
									"postman.setEnvironmentVariable(\"primaryPlanNOOP\", (response.familyMedicares[0].primaryPlanNOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"spousePlanNPremium\", (response.familyMedicares[0].spousePlanNPremium));\r",
									"postman.setEnvironmentVariable(\"spousePlanNOOP\", (response.familyMedicares[0].spousePlanNOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"primaryPartDPremiumSurcharge\", (response.familyMedicares[0].primaryPartDPremiumSurcharge));\r",
									"postman.setEnvironmentVariable(\"spousePartDPremiumSurcharge\", (response.familyMedicares[0].spousePartDPremiumSurcharge));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"{\r",
									"postman.setEnvironmentVariable(\"magiTier\", 6),\r",
									"postman.setEnvironmentVariable(\"spouseMagiTier\", 6)\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"primaryPlanId\": \"{{planId}}\",\r\n    \"primaryBirthDate\": \"{{birthDate}}\",\r\n    \"primaryRetirementYear\": \"{{retirementYear}}\",\r\n    \"primaryLifeExpectancy\": {{lifeExpectancy}},\r\n    \"primaryPlanType\": \"{{planType}}\",\r\n    \"primaryHealthGrade\": \"{{healthGrade}}\",\r\n    \"primarySingleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"primaryMagiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"primaryMagiTier\": {{magiTier}},\r\n    \"primaryTaxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"primaryMagiDollarAmount\": {{magiDollarAmount}},\r\n    \"primaryStateName\": \"{{stateName}}\",\r\n    \"primaryZipcode\": \"{{zipcode}}\",\r\n    \"primaryRetirementState\": \"{{retirementState}}\",\r\n    \"primaryRetirementZipcode\": \"{{retirementZipcode}}\",\r\n    \"primaryBoughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"primaryReserveDaysUsed\": \"{{reserveDaysUsed}}\",\r\n    \"primaryDental\": \"{{dental}}\",\r\n    \"primaryDentalHealthGrade\": \"{{dentalHealthGrade}}\",\r\n    \"primaryTobacco\": {{tobacco}},\r\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\r\n\r\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\r\n    \"spousePlanId\": \"{{spousePlanId}}\",\r\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\r\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\r\n    \"spouseLifeExpectancy\": {{spouseLifeExpectancy}},\r\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\r\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\r\n    \"spouseMagiTier\": {{spouseMagiTier}},\r\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\r\n    \"spouseMagiDollarAmount\": {{spouseMagiDollarAmount}},\r\n    \"spouseHealthGrade\": {{spouseHealthGrade}},\r\n    \"spouseStateName\": \"{{spouseStateName}}\",\r\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\r\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\r\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\r\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\r\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\r\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\r\n    \"spouseReserveDaysUsed\": {{spouseReserveDaysUsed}},\r\n    \"spouseDental\": \"{{spouseDental}}\",\r\n    \"spouseDentalHealthGrade\": {{spouseDentalHealthGrade}},\r\n    \r\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\r\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\r\n}"
						},
						"url": {
							"raw": "{{server}}/familyMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"familyMedicareR3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi6_PartCost_PartB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartBPremium = data[0].Premium;\r",
									"var DBPartBOOP = data[0].OOP;\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartBOOP*OOP_mult));\r",
									"//console.log(\"oop: \"+ oop);\r",
									"\r",
									"pm.test(\"API primaryPartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartBPremium'))).to.equal (String(DBPartBPremium, \"primaryPartBPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartBPremium'))).to.equal(String(DBPartBPremium, \"spousePartBPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPartBOOP matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('primaryPartBOOP'))).to.equal (String(oop, \"primaryPartBOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API Spouse_PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('spousePartBOOP'))).to.equal(String(oop, \"spousePartBOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{primary_age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTB?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTB"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi6_PARTD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var Sur = pm.environment.get('primaryPartDPremiumSurcharge');\r",
									"console.log(\"Sur: \" + Sur);\r",
									"var DBPartDPremium1 = pm.environment.get('DBPartDPremium');\r",
									"console.log(\"DBPartDPremium1: \" + DBPartDPremium1);\r",
									"var premD_mult = pm.environment.get('premD_mult');\r",
									"console.log(\"premD_mult: \" + premD_mult);\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"\r",
									"\r",
									"const Dpremium1 = (DBPartDPremium1*premD_mult);\r",
									"\r",
									"var Dpremium =parseFloat(Dpremium1)+parseFloat(Sur);\r",
									"console.log(\"Dpremium: \" + Dpremium);\r",
									"//var DBPartDPremium = data[0].Premium;\r",
									"\r",
									"var DBPartDOOP = data[0].OOP;\r",
									"\r",
									"var oop = (Math.round(DBPartDOOP * OOP_mult));\r",
									"console.log(\"oop: \" + oop);\r",
									"\r",
									"\r",
									"pm.test(\"API primaryPartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('primaryPartDPremium'))).to.equal(String(Math.round((Dpremium)), \"primaryPartDPremium did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('spousePartDPremium'))).to.equal(String(Math.round(Dpremium), \"primaryPartDPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API primaryPartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('primaryPartDOOP'))).to.equal(String(oop, \"primaryPartDOOP did not match\"));\r",
									"})\r",
									"pm.test(\"API spousePartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('spousePartDOOP'))).to.equal(String(oop, \"spousePartDOOP did not match\"));\r",
									"})\r",
									"\r",
									"    console.log(\"primaryPartDPremium\",pm.environment.get('primaryPartDPremium'));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{primary_age}})~and(HealthGrade,eq,{{healthGrade}})&_fields=Premium,Year,Age,HealthGrade,OOP\"\r",
									"\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTD?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTD"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Validating FamilyMedicareR3 with database values of PartB, PartD for MagiTiers(1-6) & PartA, PartC, PartF, PlanN, PlanG for HealthGrades(1-5).\n\nVerifying for the first year of FamilyMedicareExpR3, FamilyPremedicareR3, FamilyTotalExpR3, IndividualMedicareR3, IndividualPreMedecareR3, IndividualPremedicareR3, IndividualTotalExpR3, LongTermCareR4 HealthCare Expenses of partAPremium & partAOOP with PARTA DB Table, partBPremium & partBOOP with PARTB DB Table, partDPremium & partDOOP, partFPremium with part_f_r3 DB Table, planGPremium & planGOOP with plan_g_cost DB Table, palnNPremium & planNOOP with plan_n_cost DB Tables Premium,OOP and Year Values for MagiTier 1 to 6 and HealthGrade 1 to 5. Validating Response values of UsersManagement_FinancialPlanner & Support_Users with Database by Joining users tables and users_details table.  \n\nState_Mult DB Table: \"premD_mult\", \"OOP_mult\", \"premF_mult\", \"Dental_mult\", value is used for Calculating Premiums & OOPs of (A,B,D) by considering retirementState."
		},
		{
			"name": "FamilyPremedicareR3_Premium_OOP_dental",
			"item": [
				{
					"name": "Family PremedicareR3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var apiresponse=JSON.parse(responseBody);\r",
									"pm.globals.set(\"apiresponse\", apiresponse);\r",
									"postman.setEnvironmentVariable(\"F_primaryRetirementYear\",apiresponse.primaryRetirementState);\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_spouseRetirementState\",apiresponse.spouseRetirementState);\r",
									"\r",
									"//console.log()\r",
									"postman.setEnvironmentVariable(\"F_primaryDentalHealthGrade\",apiresponse.primaryDentalHealthGrade);\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_spouseDentalHealthGrade\",apiresponse.spouseDentalHealthGrade);\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_primaryDentalPremium\",apiresponse.familyPreMedicares[0].primaryDentalPremium);\r",
									"       \r",
									"postman.setEnvironmentVariable(\"F_spouseDentalPremium\",apiresponse.familyPreMedicares[0].spouseDentalPremium);\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_year\",(apiresponse.familyPreMedicares[0].year));\r",
									"\r",
									"        // console.log(\"planId\",planId);\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_primaryPlanId\",(apiresponse.primaryPlanId));\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_spousePlanId\",(apiresponse.spousePlanId));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_averageNetPremium\", (apiresponse.primaryPlanDetails.averageNetPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_totalIndividualInNetworkDeductible\", (apiresponse.primaryPlanDetails.totalIndividualInNetworkDeductible));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_totalFamilyInNetworkDeductible\",(apiresponse.primaryPlanDetails.totalFamilyInNetworkDeductible));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_totalIndividualInNetworkOOP\",(apiresponse.primaryPlanDetails.totalIndividualInNetworkOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_totalFamilyInNetworkOOP\",(apiresponse.primaryPlanDetails.totalFamilyInNetworkOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_totalPlanLevelCoinsurance\",(apiresponse.primaryPlanDetails.totalPlanLevelCoinsurance));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_averageIndividualInNetworkDeductible\",(apiresponse.primaryPlanDetails.averageIndividualInNetworkDeductible));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_averageFamilyInNetworkDeductible\",(apiresponse.primaryPlanDetails.averageFamilyInNetworkDeductible));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_averageIndividualInNetworkOOP\",(apiresponse.primaryPlanDetails.averageIndividualInNetworkOOP));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_averageFamilyInNetworkOOP\",(apiresponse.primaryPlanDetails.averageFamilyInNetworkOOP));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_averagePlanLevelCoinsurance\",(apiresponse.primaryPlanDetails.averagePlanLevelCoinsurance));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_primaryPremium\",(apiresponse.familyPreMedicares[0].primaryPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_spousePremium\",(apiresponse.familyPreMedicares[0].spousePremium));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_primaryOutofpocket\",(apiresponse.familyPreMedicares[0].primaryOutofpocket));\r",
									"\r",
									"postman.setEnvironmentVariable(\"F_spouseOutofpocket\",(apiresponse.familyPreMedicares[0].spouseOutofpocket));\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"postman.setEnvironmentVariable(\"versionId\", \"1\");\r",
									"postman.setEnvironmentVariable(\"primaryPlanId\", \"2021Connecticut9001SilverHMOVericred\");\r",
									"postman.setEnvironmentVariable(\"primaryBirthDate\", \"01-1960\");\r",
									"postman.setEnvironmentVariable(\"primaryRetirementYear\", \"01-2021\");\r",
									"postman.setEnvironmentVariable(\"primaryHealthGrade\", \"3\");\r",
									"postman.setEnvironmentVariable(\"primaryStateName\", \"Arkansas\");\r",
									"postman.setEnvironmentVariable(\"primaryZipcode\", \"72003\");\r",
									"postman.setEnvironmentVariable(\"primaryCountyCode\",\"5001\");\r",
									"postman.setEnvironmentVariable(\"primaryRetirementState\", \"Connecticut\");\r",
									"postman.setEnvironmentVariable(\"primaryRetirementZipcode\", \"6404\");\r",
									"postman.setEnvironmentVariable(\"primaryRetirementCountyCode\", \"9001\");\r",
									"postman.setEnvironmentVariable(\"lifeExpectancy\", \"70\");\r",
									"postman.setEnvironmentVariable(\"primaryDental\", \"true\");\r",
									"postman.setEnvironmentVariable(\"primaryDentalHealthGrade\", \"3\");\r",
									"postman.setEnvironmentVariable(\"primaryPlanType\", \"Silver\");\r",
									"postman.setEnvironmentVariable(\"primaryTobacco\", \"true\");\r",
									"postman.setEnvironmentVariable(\"boughtPlanA\", \"true\");\r",
									"postman.setEnvironmentVariable(\"spouseIncluded\", \"true\");\r",
									"postman.setEnvironmentVariable(\"spousePlanId\", \"2021Connecticut9001SilverHMOVericred\");\r",
									"postman.setEnvironmentVariable(\"spouseBirthDate\", \"01-1960\");\r",
									"postman.setEnvironmentVariable(\"spouseRetirementYear\", \"01-2021\");\r",
									"postman.setEnvironmentVariable(\"spouseHealthGrade\", \"3\");\r",
									"postman.setEnvironmentVariable(\"spouseStateName\", \"Arkansas\");\r",
									"postman.setEnvironmentVariable(\"spouseZipcode\", \"72003\");\r",
									"postman.setEnvironmentVariable(\"spouseCountyCode\",\"5001\");\r",
									"postman.setEnvironmentVariable(\"spouseRetirementState\", \"Connecticut\");\r",
									"postman.setEnvironmentVariable(\"spouseRetirementZipcode\", \"6404\");\r",
									"postman.setEnvironmentVariable(\"spouseRetirementCountyCode\", \"9001\");\r",
									"postman.setEnvironmentVariable(\"spouselifeExpectancy\", \"70\");\r",
									"postman.setEnvironmentVariable(\"spouseDental\", \"true\");\r",
									"postman.setEnvironmentVariable(\"spouseDentalHealthGrade\", \"3\");\r",
									"postman.setEnvironmentVariable(\"spousePlanType\", \"Silver\");\r",
									"postman.setEnvironmentVariable(\"spouseTobacco\", \"true\");\r",
									"   \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": \"{{versionId}}\",\r\n    \"primaryPlanId\": \"{{primaryPlanId}}\",\r\n    \"primaryBirthDate\": \"{{primaryBirthDate}}\",\r\n    \"primaryRetirementYear\": \"{{primaryRetirementYear}}\",\r\n    \"primaryHealthGrade\": \"{{primaryHealthGrade}}\",\r\n    \"primaryStateName\": \"{{primaryStateName}}\",\r\n    \"primaryZipcode\": \"{{primaryZipcode}}\",\r\n    \"primaryCountyCode\": \"{{primaryCountyCode}}\",\r\n    \"primaryRetirementState\": \"{{primaryRetirementState}}\",\r\n    \"primaryRetirementZipcode\": \"{{primaryRetirementZipcode}}\",\r\n    \"primaryRetirementCountyCode\": \"{{primaryRetirementCountyCode}}\",\r\n    \"lifeExpectancy\": \"{{lifeExpectancy}}\" ,\r\n    \"primaryDental\": \"{{primaryDental}}\",\r\n    \"boughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"primaryDentalHealthGrade\": \"{{primaryDentalHealthGrade}}\",\r\n    \"primaryPlanType\": \"{{primaryPlanType}}\",\r\n    \"primaryTobacco\": \"{{primaryTobacco}}\",\r\n\r\n\"spouseIncluded\": \"{{spouseIncluded}}\",\r\n    \"spousePlanId\": \"{{spousePlanId}}\",\r\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\r\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\r\n    \"spouseHealthGrade\": \"{{spouseHealthGrade}}\",\r\n    \"spouseStateName\": \"{{spouseStateName}}\",\r\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\r\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\r\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\r\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\r\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\r\n    \"spouselifeExpectancy\": \"{{spouselifeExpectancy}}\" ,\r\n    \"spouseDental\": \"{{spouseDental}}\",\r\n    \"spousePlanType\": \"{{spousePlanType}}\",\r\n    \"spouseDentalHealthGrade\": \"{{spouseDentalHealthGrade}}\",\r\n    \"spouseTobacco\": \"{{spouseTobacco}}\"\r\n   \r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{server}}/familyPreMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"familyPreMedicareR3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_individual_plans_average_calculation Premium",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response=JSON.parse(responseBody);\r",
									"\r",
									"//Primary plan Id\r",
									"pm.test(\"Comapare  PlanId matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_primaryPlanId')).to.equal(response[0].plan_id, \" PlanId did not match\");\r",
									"})\r",
									"\r",
									"//Spouse plan Id\r",
									"pm.test(\"Comapare  spouse PlanId matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_spousePlanId')).to.equal(response[0].plan_id, \" spouse PlanId did not match\");\r",
									"})\r",
									"\r",
									"//average_net_premium\r",
									"\r",
									"pm.test(\"Comapare average_net_premium matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_averageNetPremium')).to.equal(response[0].average_net_premium, \" average_net_premium did not match\");\r",
									"})\r",
									"\r",
									"//total_individual_in_network_deductible\r",
									"pm.test(\"Comapare total_individual_in_network_deductible matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_totalIndividualInNetworkDeductible')).to.equal(response[0].total_individual_in_network_deductible, \" total_individual_in_network_deductible did not match\");\r",
									"})\r",
									"\r",
									"//total_family_in_network_deductible\r",
									"\r",
									"pm.test(\"Comapare total_family_in_network_deductible matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_totalFamilyInNetworkDeductible')).to.equal(response[0].total_family_in_network_deductible, \" total_family_in_network_deductible did not match\");\r",
									"})\r",
									"\r",
									"//total_individual_in_network_oop\r",
									"\r",
									"pm.test(\"Comapare total_individual_in_network_oop matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_totalIndividualInNetworkOOP')).to.equal(response[0].total_individual_in_network_oop, \" total_individual_in_network_oop did not match\");\r",
									"})\r",
									"\r",
									"//total_family_in_network_oop\r",
									"\r",
									"pm.test(\"Comapare total_family_in_network_oop matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_totalFamilyInNetworkOOP')).to.equal(response[0].total_family_in_network_oop, \" total_family_in_network_oop did not match\");\r",
									"})\r",
									"\r",
									"\r",
									"//total_plan_level_coinsurance\r",
									"\r",
									"pm.test(\"Comapare total_plan_level_coinsurance matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_totalPlanLevelCoinsurance')).to.equal(response[0].total_plan_level_coinsurance, \" total_plan_level_coinsurance did not match\");\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"//average_individual_in_network_deductable\r",
									"\r",
									"pm.test(\"Comapare average_individual_in_network_deductable matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_averageIndividualInNetworkDeductible')).to.equal(response[0].average_individual_in_network_deductable, \" average_individual_in_network_deductable did not match\");\r",
									"})\r",
									"\r",
									"//average_family_in_network_deductable\r",
									"\r",
									"pm.test(\"Comapare average_family_in_network_deductable matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_averageFamilyInNetworkDeductible')).to.equal(response[0].average_family_in_network_deductable, \" average_family_in_network_deductable did not match\");\r",
									"})\r",
									"\r",
									"//average_individual_in_network_oop\r",
									"\r",
									"pm.test(\"Comapare average_individual_in_network_oop matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_averageIndividualInNetworkOOP')).to.equal(response[0].average_individual_in_network_oop, \" average_individual_in_network_oop did not match\");\r",
									"})\r",
									"\r",
									"//average_family_in_network_oop\r",
									"\r",
									"pm.test(\"Comapare average_family_in_network_oop matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_averageFamilyInNetworkOOP')).to.equal(response[0].average_family_in_network_oop, \" average_family_in_network_oop did not match\");\r",
									"})\r",
									"\r",
									"//average_plan_level_coinsurance\r",
									"\r",
									"pm.test(\"Comapare average_plan_level_coinsurance matching with the db\", () => {\r",
									"pm.expect(Number(postman.getEnvironmentVariable('F_averagePlanLevelCoinsurance'))).to.equal(Number(response[0].average_plan_level_coinsurance)), \"average_plan_level_coinsurance did not match\";\r",
									"})\r",
									"\r",
									"//Family premedicare Premiums comparing with db premium\r",
									"var apiresponse=pm.globals.get(\"apiresponse\");\r",
									"\r",
									"var DBsourceYear=response[0].source_year; \r",
									"\r",
									"length1 = apiresponse.familyPreMedicares.length\r",
									"\r",
									"console.log(\"length of familyPreMedicares \",length1);\r",
									"\r",
									"var startYear = apiresponse.familyPreMedicares[0].year;\r",
									"\r",
									"console.log(\"familyPreMedicares begins year\", startYear) //2021\r",
									"\r",
									"endYear = apiresponse.familyPreMedicares[length1 - 1].year;  \r",
									"\r",
									"console.log(\"familyPreMedicares end year\", endYear) //2025\r",
									"var dbpremium=parseFloat(response[0].average_net_premium);\r",
									"console.log(\"db premium\",dbpremium)\r",
									"\r",
									"for(var i=0;i<(length1-1);i++)\r",
									"    {\r",
									"        var APIyear = apiresponse.familyPreMedicares[i].year;\r",
									"        console.log(\"API year\",APIyear);\r",
									"        var apiPrimarypremium=apiresponse.familyPreMedicares[i].primaryPremium;\r",
									"        console.log(\"apipremium\",apiPrimarypremium);\r",
									"var rapiprimarypremium=Math.round(apiPrimarypremium);\r",
									"        if(DBsourceYear==APIyear)\r",
									"        {\r",
									"            dbpremium=rapiprimarypremium;\r",
									"            pm.test(\"dbpremium is matched with API Primary premium\", () => {\r",
									"        pm.expect(rapiprimarypremium).to.equal(dbpremium, \"apiprimary premium did not match\");\r",
									"            })\r",
									"           // console.log(\"in if condition\");\r",
									"        }\r",
									"        else if(DBsourceYear<APIyear) //2021<2031\r",
									"        {\r",
									"           // console.log(\"in else-if condition\");\r",
									"            var lengthd=APIyear-DBsourceYear\r",
									"           \r",
									"                var inflation=(dbpremium*0.06);\r",
									"                console.log(\"inflation:: \" +inflation);\r",
									"                var dbpremium = dbpremium + inflation;\r",
									"                var rdbpremium=Math.round(dbpremium);\r",
									"                console.log(\"After added a inflation to 'average_net_premium' DB Value 'after' rounded\",rdbpremium );\r",
									"               \r",
									"                pm.test(\"dbpremium is matched with API Primary premium\", () => {\r",
									"                pm.expect(rapiprimarypremium).to.equal(rdbpremium, \"apiprimary premium did not match\");\r",
									"            })\r",
									"          \r",
									"        }\r",
									"    }\r",
									"\r",
									"//SPouse Individual Premedicare premiums\r",
									"\r",
									"length1 = apiresponse.familyPreMedicares.length\r",
									"\r",
									"console.log(\"length of familyPreMedicares \",length1);\r",
									"\r",
									"var startYear = apiresponse.familyPreMedicares[0].year;\r",
									"\r",
									"console.log(\"familyPreMedicares begins year\", startYear) //2021\r",
									"\r",
									"endYear = apiresponse.familyPreMedicares[length1 - 1].year;  \r",
									"\r",
									"console.log(\"familyPreMedicares end year\", endYear) //2025\r",
									"\r",
									"var dbpremium=parseFloat(response[0].average_net_premium);\r",
									"console.log(\"db premium\",dbpremium)\r",
									"\r",
									"for(var i=0;i<(length1-1);i++)\r",
									"    {\r",
									"        var APIyear = apiresponse.familyPreMedicares[i].year;\r",
									"        console.log(\"API year\",APIyear);\r",
									"        var apispousepremium=apiresponse.familyPreMedicares[i].spousePremium;\r",
									"        console.log(\"apiSpousepremium\",apispousepremium);\r",
									"var rapispousepremium=Math.round(apispousepremium) ;\r",
									"        if(DBsourceYear==APIyear)\r",
									"        {\r",
									"            dbpremium=rapispousepremium;\r",
									"            pm.test(\"dbpremium is matched with API spouse premium\", () => {\r",
									"        pm.expect(rapispousepremium).to.equal(dbpremium, \"apispouse premium did not match\");\r",
									"            })\r",
									"           // console.log(\"in if condition\");\r",
									"        }\r",
									"        else if(DBsourceYear<APIyear) //2021<2031\r",
									"        {\r",
									"           // console.log(\"in else-if condition\");\r",
									"            var lengthd=APIyear-DBsourceYear \r",
									"                var inflation=(dbpremium*0.06); \r",
									"                console.log(\"inflation:: \" +inflation);\r",
									"                var dbpremium = dbpremium + inflation;\r",
									"                var rdbpremium=Math.round(dbpremium) ;\r",
									"                console.log(\"After added a inflation to 'average_net_premium' DB Value 'after' rounded\",rdbpremium );\r",
									"                pm.test(\"dbpremium is matched with API spouse premium\", () => {\r",
									"                pm.expect(rapispousepremium).to.equal(rdbpremium, \"apispouse premium did not match\");\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(plan_id,eq,{{primaryPlanId}})\"\r",
									"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);\r",
									"\r",
									"setTimeout(function(){}, 1000);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/individual_plans_average_calculation?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"individual_plans_average_calculation"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_DENTAL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var dbresponse=JSON.parse(responseBody);\r",
									"//pm.globals.set(\"dbdental\", response);\r",
									"\r",
									"var dbyear=dbresponse[0].Year;\r",
									"var dbHealth_Grade=dbresponse[0].Health_Grade;\r",
									"var dbState=dbresponse[0].State;\r",
									"\r",
									"var dbPremium=parseInt(dbresponse[0].Premium);\r",
									"\r",
									"//Primary retirement state and dental health grade\r",
									"\r",
									"pm.test(\"Comapare Primary retirementState and dentalHealthGrade matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_primaryRetirementYear')).to.equal(String(dbState), \" retirementState and dentalHealthGrade did not match\");\r",
									"pm.expect(postman.getEnvironmentVariable('F_primaryDentalHealthGrade')).to.equal(String(dbHealth_Grade), \" retirementState and dentalHealthGrade did not match\");\r",
									"})\r",
									"\r",
									"\r",
									"//Spouse retirement state and dental health grade\r",
									"\r",
									"pm.test(\"Comapare spouse retirementState and dentalHealthGrade matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_spouseRetirementState')).to.equal(String(dbState), \" retirementState and dentalHealthGrade did not match\");\r",
									"pm.expect(postman.getEnvironmentVariable('F_spouseDentalHealthGrade')).to.equal(String(dbHealth_Grade), \" retirementState and dentalHealthGrade did not match\");\r",
									"})\r",
									"\r",
									"//Primary Dental Premium\r",
									"\r",
									"pm.test(\"Comapare primary Dental Premium matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_primaryDentalPremium')).to.equal(String(dbPremium), \" Dental Premium did not match\");\r",
									"})\r",
									"\r",
									"\r",
									"//SPouse Dental Premium\r",
									"\r",
									"pm.test(\"Comapare  spouse Dental Premium matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_spouseDentalPremium')).to.equal(String(dbPremium), \" Dental Premium did not match\");\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(State,eq,{{primaryRetirementState}})~and(Year,eq,{{F_year}})~and(Health_Grade,eq,{{primaryDentalHealthGrade}})\"\r",
									"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);\r",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/DENTAL?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"DENTAL"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_PreRET OOps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response=JSON.parse(responseBody);\r",
									"//primary OOP\r",
									"pm.test(\"Comapare primary outofpocket matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_primaryOutofpocket')).to.equal(String(response[0].OOP), \" outofpocket did not match\");\r",
									"})\r",
									"\r",
									"//spouse OOP\r",
									"pm.test(\"Comapare spouse outofpocket matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('F_spouseOutofpocket')).to.equal(String(response[0].OOP), \" outofpocket did not match\");\r",
									"})\r",
									"\r",
									"pm.environment.clear();\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(State,eq,{{primaryRetirementState}})~and(Year,eq,{{F_year}})~and(Plan_type,eq,{{primaryPlanType}})~and(Health_Grade,eq,{{primaryHealthGrade}})\"\r",
									"\r",
									"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);\r",
									"setTimeout(function(){}, 1000);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/PRE_RET?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PRE_RET"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Validating Family Premedicare(Primary and Spouse)Premiums, OOPs and Dental Premium with databases."
		},
		{
			"name": "FamilyTotalExpR3_Premium_OOPs",
			"item": [
				{
					"name": "familyTotalExpeR3Premedicare",
					"item": [
						{
							"name": "famTotHealthGrade1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('versionId','1');\r",
											"pm.environment.set(\"primaryPlanId\",\"2021Colorado8035SilverHMOHealthSherpa\");\r",
											"pm.environment.set('primaryBirthDate','01-1957');\r",
											"pm.environment.set('primaryRetirementYear','01-2021');\r",
											"pm.environment.set('primaryLifeExpectancy','67');\r",
											"pm.environment.set('primarySingleVsMultipleMagi','false');\r",
											"pm.environment.set('primaryMagiTierVsDollarAmount', 'false');\r",
											"pm.environment.set('primaryMagiTier', '1');\r",
											"pm.environment.set('primaryTaxFilingStatus','MARRIED_FILING_JOINTLY');\r",
											"pm.environment.set('primaryMagiDollarAmount', '170000');\r",
											"pm.environment.set('primaryHealthGrade','1');\r",
											"pm.environment.set('primaryStateName', 'Colorado');\r",
											"pm.environment.set('primaryZipcode', '80130');\r",
											"pm.environment.set('primaryCountyCode', '8035');\r",
											"pm.environment.set('primaryRetirementState', 'Colorado');\r",
											"pm.environment.set('primaryRetirementZipcode', '80130');\r",
											"pm.environment.set('primaryRetirementCountyCode', '8035');\r",
											"pm.environment.set('primaryBoughtPlanA', 'false');\r",
											"pm.environment.set('primaryReserveDaysUsed', '0');\r",
											"pm.environment.set('primaryDental', 'false');\r",
											"pm.environment.set('primaryDentalHealthGrade', '1');\r",
											"pm.environment.set('primaryPlanType', 'Silver');\r",
											"pm.environment.set('primaryTobacco', 'false');\r",
											"pm.environment.set('spouseIncluded', 'true');\r",
											"pm.environment.set('spousePlanId', '2021Colorado8035SilverHMOHealthSherpa');\r",
											"pm.environment.set('spouseBirthDate', '01-1957');\r",
											"pm.environment.set('spouseRetirementYear', '01-2021');\r",
											"pm.environment.set('spouseLifeExpectancy', '67');\r",
											"pm.environment.set('spouseSingleVsMultipleMagi', 'false');\r",
											"pm.environment.set('spouseMagiTierVsDollarAmount', 'false');\r",
											"pm.environment.set('spouseMagiTier', '1');\r",
											"pm.environment.set('spouseTaxFilingStatus', 'MARRIED_FILING_JOINTLY');\r",
											"pm.environment.set('spouseMagiDollarAmount', '170000');\r",
											"pm.environment.set('spouseHealthGrade', '1');\r",
											"pm.environment.set('spouseStateName', 'Colorado');\r",
											"pm.environment.set('spouseZipcode', '80130');\r",
											"pm.environment.set('spouseCountyCode', '8035');\r",
											"pm.environment.set('spouseRetirementState', 'Colorado');\r",
											"pm.environment.set('spouseRetirementZipcode', '80130');\r",
											"pm.environment.set('spouseRetirementCountyCode', '8035');\r",
											"pm.environment.set('spouseBoughtPlanA', 'false');\r",
											"pm.environment.set('spouseReserveDaysUsed', '0');\r",
											"pm.environment.set('spouseDental', 'false');\r",
											"pm.environment.set('spouseDentalHealthGrade', '1');\r",
											"pm.environment.set('spousePlanType', 'Silver');\r",
											"pm.environment.set('spouseTobacco', 'false');\r",
											"pm.environment.set('fullYearDataForLifeExpectancyYear', 'false');\r",
											"pm.environment.set('primaryYearWiseMagiDetailList', '[{ \"year\": 2021, \"taxFilingStatus\": \"{{primaryTaxFilingStatus}}\",\"magiTier\": \"{{primaryMagiTier}}\",\"magiDollarAmount\": {{primaryMagiDollarAmount}} }]');\r",
											"pm.environment.set('spouseYearWiseMagiDetailList', '[{\"year\": 2021,\"taxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\"magiTier\": \"{{spouseMagiTier}}\",\"magiDollarAmount\": {{spouseMagiDollarAmount}} }]'); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"var BD = data.primaryBirthDate; \r",
											"var bit = BD.split('-'); \r",
											"var primary_birthmonth = Number(bit[0]); \r",
											"var primary_birthyear = Number(bit[1]); \r",
											"// console.log(primary_birthyear); \r",
											"var current_date = new Date(); \r",
											"var primary_age = current_date.getFullYear() - primary_birthyear; \r",
											"if (current_date.getMonth() < primary_birthmonth) {primary_age -= 1;} \r",
											"console.log(primary_age); \r",
											"pm.environment.set(\"primary_age\", primary_age);\r",
											"var year = data.familyTotalExpenses[0].year;\r",
											"pm.environment.set(\"year\", year);\r",
											"\r",
											"//Premedicare premium verification\r",
											"var primaryPremium = data.familyTotalExpenses[0].primaryPremium;\r",
											"pm.environment.set(\"primaryPremium1\", primaryPremium);\r",
											"var spousePremium = data.familyTotalExpenses[0].spousePremium;\r",
											"pm.environment.set('spousePremium1', spousePremium);\r",
											"\r",
											"//premedicare OOP verification\r",
											"var primaryOutofpocket = data.familyTotalExpenses[0].primaryOutofpocket;\r",
											"pm.environment.set(\"primaryOutofpocket1\", primaryOutofpocket);\r",
											"var spouseOutofpocket = data.familyTotalExpenses[0].spouseOutofpocket;\r",
											"pm.environment.set('spouseOutofpocket1', spouseOutofpocket);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"versionId\": \"{{versionId}}\",\n    \"primaryPlanId\": \"{{primaryPlanId}}\",\n    \"primaryBirthDate\": \"{{primaryBirthDate}}\",\n    \"primaryRetirementYear\": \"{{primaryRetirementYear}}\",\n    \"primaryLifeExpectancy\": \"{{primaryLifeExpectancy}}\",\n    \"primarySingleVsMultipleMagi\": \"{{primarySingleVsMultipleMagi}}\",\n    \"primaryMagiTierVsDollarAmount\": \"{{primaryMagiTierVsDollarAmount}}\",\n    \"primaryMagiTier\": \"{{primaryMagiTier}}\",\n    \"primaryTaxFilingStatus\": \"{{primaryTaxFilingStatus}}\",\n    \"primaryMagiDollarAmount\": \"{{primaryMagiDollarAmount}}\",\n    \"primaryHealthGrade\": \"{{primaryHealthGrade}}\",\n    \"primaryStateName\": \"{{primaryStateName}}\",\n    \"primaryZipcode\": \"{{primaryZipcode}}\",\n    \"primaryCountyCode\": \"{{primaryCountyCode}}\",\n    \"primaryRetirementState\": \"{{primaryRetirementState}}\",\n    \"primaryRetirementZipcode\": \"{{primaryRetirementZipcode}}\",\n    \"primaryRetirementCountyCode\": \"{{primaryRetirementCountyCode}}\",\n    \"primaryBoughtPlanA\": \"{{primaryBoughtPlanA}}\",\n    \"primaryReserveDaysUsed\": \"{{primaryReserveDaysUsed}}\",\n    \"primaryDental\": \"{{primaryDental}}\",\n    \"primaryDentalHealthGrade\": \"{{primaryDentalHealthGrade}}\",\n    \"primaryPlanType\": \"{{primaryPlanType}}\",\n    \"primaryTobacco\": \"{{primaryTobacco}}\",\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\n    \"spousePlanId\": \"{{spousePlanId}}\",\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\n    \"spouseLifeExpectancy\": \"{{spouseLifeExpectancy}}\",\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\n    \"spouseMagiTier\": \"{{spouseMagiTier}}\",\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\n    \"spouseMagiDollarAmount\": \"{{spouseMagiDollarAmount}}\",\n    \"spouseHealthGrade\": \"{{spouseHealthGrade}}\",\n    \"spouseStateName\": \"{{spouseStateName}}\",\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\n    \"spouseReserveDaysUsed\": \"{{spouseReserveDaysUsed}}\",\n    \"spouseDental\": \"{{spouseDental}}\",\n    \"spouseDentalHealthGrade\": \"{{spouseDentalHealthGrade}}\",\n    \"spousePlanType\": \"{{spousePlanType}}\",\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\n}"
								},
								"url": {
									"raw": "{{server}}/familyTotalExpensesR3",
									"host": [
										"{{server}}"
									],
									"path": [
										"familyTotalExpensesR3"
									]
								},
								"description": "Verifying pre medicare premium and OOP with HG 1. Comparing data with 'individual_plans_average_calculation' table of DB."
							},
							"response": []
						},
						{
							"name": "preMedPremium/ind_avgCalc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var Premium1 = Math.round(parseFloat(data[0].average_net_premium));\r",
											"\r",
											"var primaryPremium1 = Math.round(pm.environment.get('primaryPremium1'));\r",
											"var spousePremium1 = Math.round(pm.environment.get('spousePremium1'));\r",
											"pm.test(\"Comapre primaryPremium1 matching with the db\", () => {\r",
											"pm.expect(primaryPremium1).to.equal(Premium1, \"primaryPremium1 did not match\");\r",
											"})\r",
											"pm.test(\"Compare spousePremium1 matching with the db\", () => {\r",
											"pm.expect(spousePremium1).to.equal(Premium1, \"spousePremium1 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('query',\"_where=(plan_id,eq,{{primaryPlanId}})~and(State,eq,{{primaryRetirementState}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/individual_plans_average_calculation?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"individual_plans_average_calculation"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "preMedOOP/PRE_RET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"//var Premium1 = data[0].Premium;\r",
											"var OOP1 = data[0].OOP;\r",
											"\r",
											"\r",
											"//OOP verification\r",
											"pm.test(\"Comapre primaryOutofpocket1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryOutofpocket1')).to.equal(OOP1, \"primaryOutofpocket1 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spouseOutofpocket1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spouseOutofpocket1')).to.equal(OOP1, \"spouseOutofpocket1 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('query', \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(State,eq,{{primaryRetirementState}})~and(Health_Grade,eq,{{primaryHealthGrade}})~and(Plan_type,eq,{{primaryPlanType}})\");\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PRE_RET?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PRE_RET"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "famTotHealthGrade2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('primaryHealthGrade', '2');\r",
											"pm.environment.set('spouseHealthGrade', '2');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"//Premedicare premium verification\r",
											"var primaryPremium = data.familyTotalExpenses[0].primaryPremium;\r",
											"pm.environment.set(\"primaryPremium2\", primaryPremium);\r",
											"var spousePremium = data.familyTotalExpenses[0].spousePremium;\r",
											"pm.environment.set('spousePremium2', spousePremium);\r",
											"\r",
											"//premedicare OOP verification\r",
											"var primaryOutofpocket = data.familyTotalExpenses[0].primaryOutofpocket;\r",
											"pm.environment.set(\"primaryOutofpocket2\", primaryOutofpocket);\r",
											"var spouseOutofpocket = data.familyTotalExpenses[0].spouseOutofpocket;\r",
											"pm.environment.set('spouseOutofpocket2', spouseOutofpocket);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"versionId\": \"{{versionId}}\",\n    \"primaryPlanId\": \"{{primaryPlanId}}\",\n    \"primaryBirthDate\": \"{{primaryBirthDate}}\",\n    \"primaryRetirementYear\": \"{{primaryRetirementYear}}\",\n    \"primaryLifeExpectancy\": \"{{primaryLifeExpectancy}}\",\n    \"primarySingleVsMultipleMagi\": \"{{primarySingleVsMultipleMagi}}\",\n    \"primaryMagiTierVsDollarAmount\": \"{{primaryMagiTierVsDollarAmount}}\",\n    \"primaryMagiTier\": \"{{primaryMagiTier}}\",\n    \"primaryTaxFilingStatus\": \"{{primaryTaxFilingStatus}}\",\n    \"primaryMagiDollarAmount\": \"{{primaryMagiDollarAmount}}\",\n    \"primaryHealthGrade\": \"{{primaryHealthGrade}}\",\n    \"primaryStateName\": \"{{primaryStateName}}\",\n    \"primaryZipcode\": \"{{primaryZipcode}}\",\n    \"primaryCountyCode\": \"{{primaryCountyCode}}\",\n    \"primaryRetirementState\": \"{{primaryRetirementState}}\",\n    \"primaryRetirementZipcode\": \"{{primaryRetirementZipcode}}\",\n    \"primaryRetirementCountyCode\": \"{{primaryRetirementCountyCode}}\",\n    \"primaryBoughtPlanA\": \"{{primaryBoughtPlanA}}\",\n    \"primaryReserveDaysUsed\": \"{{primaryReserveDaysUsed}}\",\n    \"primaryDental\": \"{{primaryDental}}\",\n    \"primaryDentalHealthGrade\": \"{{primaryDentalHealthGrade}}\",\n    \"primaryPlanType\": \"{{primaryPlanType}}\",\n    \"primaryTobacco\": \"{{primaryTobacco}}\",\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\n    \"spousePlanId\": \"{{spousePlanId}}\",\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\n    \"spouseLifeExpectancy\": \"{{spouseLifeExpectancy}}\",\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\n    \"spouseMagiTier\": \"{{spouseMagiTier}}\",\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\n    \"spouseMagiDollarAmount\": \"{{spouseMagiDollarAmount}}\",\n    \"spouseHealthGrade\": \"{{spouseHealthGrade}}\",\n    \"spouseStateName\": \"{{spouseStateName}}\",\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\n    \"spouseReserveDaysUsed\": \"{{spouseReserveDaysUsed}}\",\n    \"spouseDental\": \"{{spouseDental}}\",\n    \"spouseDentalHealthGrade\": \"{{spouseDentalHealthGrade}}\",\n    \"spousePlanType\": \"{{spousePlanType}}\",\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\n}"
								},
								"url": {
									"raw": "{{server}}/familyTotalExpensesR3",
									"host": [
										"{{server}}"
									],
									"path": [
										"familyTotalExpensesR3"
									]
								},
								"description": "Comparing premium and OOP values for Health Grade 2."
							},
							"response": []
						},
						{
							"name": "preMedPremium/ind_avgCalc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var Premium1 = Math.round(parseFloat(data[0].average_net_premium));\r",
											"//var OOP1 = data[0].OOP;\r",
											"//premium verification\r",
											"//var primaryPremium = String(pm.environment.get('primaryPremium1'))\r",
											"var primaryPremium1 = Math.round(pm.environment.get('primaryPremium1'));\r",
											"var spousePremium1 = Math.round(pm.environment.get('spousePremium1'));\r",
											"pm.test(\"Comapre primaryPremium1 matching with the db\", () => {\r",
											"pm.expect(primaryPremium1).to.equal(Premium1, \"primaryPremium1 did not match\");\r",
											"})\r",
											"pm.test(\"Compare spousePremium1 matching with the db\", () => {\r",
											"pm.expect(spousePremium1).to.equal(Premium1, \"spousePremium1 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('query',\"_where=(plan_id,eq,{{primaryPlanId}})~and(State,eq,{{primaryRetirementState}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/individual_plans_average_calculation?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"individual_plans_average_calculation"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "preMedOOP/PRE_RET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"//var Premium2 = data[0].Premium;\r",
											"var OOP2 = data[0].OOP;\r",
											"\r",
											"\r",
											"//OOP verification\r",
											"pm.test(\"Comapre primaryOutofpocket2 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryOutofpocket2')).to.equal(OOP2, \"primaryOutofpocket2 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spouseOutofpocket2 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spouseOutofpocket2')).to.equal(OOP2, \"spouseOutofpocket2 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('query', \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(State,eq,{{primaryRetirementState}})~and(Health_Grade,eq,{{primaryHealthGrade}})~and(Plan_type,eq,{{primaryPlanType}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PRE_RET?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PRE_RET"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "famTotHealthGrade3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('primaryHealthGrade', '3');\r",
											"pm.environment.set('spouseHealthGrade', '3');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"//Premedicare premium verification\r",
											"var primaryPremium = data.familyTotalExpenses[0].primaryPremium;\r",
											"pm.environment.set(\"primaryPremium3\", primaryPremium);\r",
											"var spousePremium = data.familyTotalExpenses[0].spousePremium;\r",
											"pm.environment.set('spousePremium3', spousePremium);\r",
											"\r",
											"//premedicare OOP verification\r",
											"var primaryOutofpocket = data.familyTotalExpenses[0].primaryOutofpocket;\r",
											"pm.environment.set(\"primaryOutofpocket3\", primaryOutofpocket);\r",
											"var spouseOutofpocket = data.familyTotalExpenses[0].spouseOutofpocket;\r",
											"pm.environment.set('spouseOutofpocket3', spouseOutofpocket);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"versionId\": \"{{versionId}}\",\n    \"primaryPlanId\": \"{{primaryPlanId}}\",\n    \"primaryBirthDate\": \"{{primaryBirthDate}}\",\n    \"primaryRetirementYear\": \"{{primaryRetirementYear}}\",\n    \"primaryLifeExpectancy\": \"{{primaryLifeExpectancy}}\",\n    \"primarySingleVsMultipleMagi\": \"{{primarySingleVsMultipleMagi}}\",\n    \"primaryMagiTierVsDollarAmount\": \"{{primaryMagiTierVsDollarAmount}}\",\n    \"primaryMagiTier\": \"{{primaryMagiTier}}\",\n    \"primaryTaxFilingStatus\": \"{{primaryTaxFilingStatus}}\",\n    \"primaryMagiDollarAmount\": \"{{primaryMagiDollarAmount}}\",\n    \"primaryHealthGrade\": \"{{primaryHealthGrade}}\",\n    \"primaryStateName\": \"{{primaryStateName}}\",\n    \"primaryZipcode\": \"{{primaryZipcode}}\",\n    \"primaryCountyCode\": \"{{primaryCountyCode}}\",\n    \"primaryRetirementState\": \"{{primaryRetirementState}}\",\n    \"primaryRetirementZipcode\": \"{{primaryRetirementZipcode}}\",\n    \"primaryRetirementCountyCode\": \"{{primaryRetirementCountyCode}}\",\n    \"primaryBoughtPlanA\": \"{{primaryBoughtPlanA}}\",\n    \"primaryReserveDaysUsed\": \"{{primaryReserveDaysUsed}}\",\n    \"primaryDental\": \"{{primaryDental}}\",\n    \"primaryDentalHealthGrade\": \"{{primaryDentalHealthGrade}}\",\n    \"primaryPlanType\": \"{{primaryPlanType}}\",\n    \"primaryTobacco\": \"{{primaryTobacco}}\",\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\n    \"spousePlanId\": \"{{spousePlanId}}\",\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\n    \"spouseLifeExpectancy\": \"{{spouseLifeExpectancy}}\",\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\n    \"spouseMagiTier\": \"{{spouseMagiTier}}\",\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\n    \"spouseMagiDollarAmount\": \"{{spouseMagiDollarAmount}}\",\n    \"spouseHealthGrade\": \"{{spouseHealthGrade}}\",\n    \"spouseStateName\": \"{{spouseStateName}}\",\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\n    \"spouseReserveDaysUsed\": \"{{spouseReserveDaysUsed}}\",\n    \"spouseDental\": \"{{spouseDental}}\",\n    \"spouseDentalHealthGrade\": \"{{spouseDentalHealthGrade}}\",\n    \"spousePlanType\": \"{{spousePlanType}}\",\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\n}"
								},
								"url": {
									"raw": "{{server}}/familyTotalExpensesR3",
									"host": [
										"{{server}}"
									],
									"path": [
										"familyTotalExpensesR3"
									]
								},
								"description": "Comparing premium and OOP values for Health Grade 3."
							},
							"response": []
						},
						{
							"name": "preMedPremium/ind_avgCalc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var Premium1 = Math.round(parseFloat(data[0].average_net_premium));\r",
											"//var OOP1 = data[0].OOP;\r",
											"//premium verification\r",
											"//var primaryPremium = String(pm.environment.get('primaryPremium1'))\r",
											"var primaryPremium1 = Math.round(pm.environment.get('primaryPremium1'));\r",
											"var spousePremium1 = Math.round(pm.environment.get('spousePremium1'));\r",
											"pm.test(\"Comapre primaryPremium1 matching with the db\", () => {\r",
											"pm.expect(primaryPremium1).to.equal(Premium1, \"primaryPremium1 did not match\");\r",
											"})\r",
											"pm.test(\"Compare spousePremium1 matching with the db\", () => {\r",
											"pm.expect(spousePremium1).to.equal(Premium1, \"spousePremium1 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('query',\"_where=(plan_id,eq,{{primaryPlanId}})~and(State,eq,{{primaryRetirementState}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/individual_plans_average_calculation?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"individual_plans_average_calculation"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "preMedOOP/PRE_RET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"//var Premium3 = data[0].Premium;\r",
											"var OOP3 = data[0].OOP;\r",
											"\r",
											"\r",
											"//OOP verification\r",
											"pm.test(\"Comapre primaryOutofpocket3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryOutofpocket3')).to.equal(OOP3, \"primaryOutofpocket3 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spouseOutofpocket3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spouseOutofpocket3')).to.equal(OOP3, \"spouseOutofpocket3 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('query', \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(State,eq,{{primaryRetirementState}})~and(Health_Grade,eq,{{primaryHealthGrade}})~and(Plan_type,eq,{{primaryPlanType}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PRE_RET?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PRE_RET"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "famTotHealthGrade4",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('primaryHealthGrade', '4');\r",
											"pm.environment.set('spouseHealthGrade', '4');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"//Premedicare premium verification\r",
											"var primaryPremium = data.familyTotalExpenses[0].primaryPremium;\r",
											"pm.environment.set(\"primaryPremium4\", primaryPremium);\r",
											"var spousePremium = data.familyTotalExpenses[0].spousePremium;\r",
											"pm.environment.set('spousePremium4', spousePremium);\r",
											"\r",
											"//premedicare OOP verification\r",
											"var primaryOutofpocket = data.familyTotalExpenses[0].primaryOutofpocket;\r",
											"pm.environment.set(\"primaryOutofpocket4\", primaryOutofpocket);\r",
											"var spouseOutofpocket = data.familyTotalExpenses[0].spouseOutofpocket;\r",
											"pm.environment.set('spouseOutofpocket4', spouseOutofpocket);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"versionId\": \"{{versionId}}\",\n    \"primaryPlanId\": \"{{primaryPlanId}}\",\n    \"primaryBirthDate\": \"{{primaryBirthDate}}\",\n    \"primaryRetirementYear\": \"{{primaryRetirementYear}}\",\n    \"primaryLifeExpectancy\": \"{{primaryLifeExpectancy}}\",\n    \"primarySingleVsMultipleMagi\": \"{{primarySingleVsMultipleMagi}}\",\n    \"primaryMagiTierVsDollarAmount\": \"{{primaryMagiTierVsDollarAmount}}\",\n    \"primaryMagiTier\": \"{{primaryMagiTier}}\",\n    \"primaryTaxFilingStatus\": \"{{primaryTaxFilingStatus}}\",\n    \"primaryMagiDollarAmount\": \"{{primaryMagiDollarAmount}}\",\n    \"primaryHealthGrade\": \"{{primaryHealthGrade}}\",\n    \"primaryStateName\": \"{{primaryStateName}}\",\n    \"primaryZipcode\": \"{{primaryZipcode}}\",\n    \"primaryCountyCode\": \"{{primaryCountyCode}}\",\n    \"primaryRetirementState\": \"{{primaryRetirementState}}\",\n    \"primaryRetirementZipcode\": \"{{primaryRetirementZipcode}}\",\n    \"primaryRetirementCountyCode\": \"{{primaryRetirementCountyCode}}\",\n    \"primaryBoughtPlanA\": \"{{primaryBoughtPlanA}}\",\n    \"primaryReserveDaysUsed\": \"{{primaryReserveDaysUsed}}\",\n    \"primaryDental\": \"{{primaryDental}}\",\n    \"primaryDentalHealthGrade\": \"{{primaryDentalHealthGrade}}\",\n    \"primaryPlanType\": \"{{primaryPlanType}}\",\n    \"primaryTobacco\": \"{{primaryTobacco}}\",\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\n    \"spousePlanId\": \"{{spousePlanId}}\",\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\n    \"spouseLifeExpectancy\": \"{{spouseLifeExpectancy}}\",\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\n    \"spouseMagiTier\": \"{{spouseMagiTier}}\",\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\n    \"spouseMagiDollarAmount\": \"{{spouseMagiDollarAmount}}\",\n    \"spouseHealthGrade\": \"{{spouseHealthGrade}}\",\n    \"spouseStateName\": \"{{spouseStateName}}\",\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\n    \"spouseReserveDaysUsed\": \"{{spouseReserveDaysUsed}}\",\n    \"spouseDental\": \"{{spouseDental}}\",\n    \"spouseDentalHealthGrade\": \"{{spouseDentalHealthGrade}}\",\n    \"spousePlanType\": \"{{spousePlanType}}\",\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\n}"
								},
								"url": {
									"raw": "{{server}}/familyTotalExpensesR3",
									"host": [
										"{{server}}"
									],
									"path": [
										"familyTotalExpensesR3"
									]
								},
								"description": "Comparing premium and OOP values for Health Grade 4."
							},
							"response": []
						},
						{
							"name": "preMedPremium/ind_avgCalc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var Premium1 = Math.round(parseFloat(data[0].average_net_premium));\r",
											"//var OOP1 = data[0].OOP;\r",
											"//premium verification\r",
											"//var primaryPremium = String(pm.environment.get('primaryPremium1'))\r",
											"var primaryPremium1 = Math.round(pm.environment.get('primaryPremium1'));\r",
											"var spousePremium1 = Math.round(pm.environment.get('spousePremium1'));\r",
											"pm.test(\"Comapre primaryPremium1 matching with the db\", () => {\r",
											"pm.expect(primaryPremium1).to.equal(Premium1, \"primaryPremium1 did not match\");\r",
											"})\r",
											"pm.test(\"Compare spousePremium1 matching with the db\", () => {\r",
											"pm.expect(spousePremium1).to.equal(Premium1, \"spousePremium1 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('query',\"_where=(plan_id,eq,{{primaryPlanId}})~and(State,eq,{{primaryRetirementState}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/individual_plans_average_calculation?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"individual_plans_average_calculation"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "preMedOOP/PRE_RET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"//var Premium4 = data[0].Premium;\r",
											"var OOP4 = data[0].OOP;\r",
											"\r",
											"\r",
											"//OOP verification\r",
											"pm.test(\"Comapre primaryOutofpocket4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryOutofpocket4')).to.equal(OOP4, \"primaryOutofpocket4 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spouseOutofpocket4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spouseOutofpocket4')).to.equal(OOP4, \"spouseOutofpocket4 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('query', \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(State,eq,{{primaryRetirementState}})~and(Health_Grade,eq,{{primaryHealthGrade}})~and(Plan_type,eq,{{primaryPlanType}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PRE_RET?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PRE_RET"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "famTotHealthGrade5",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('primaryHealthGrade', '5');\r",
											"pm.environment.set('spouseHealthGrade', '5');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"//Premedicare premium verification\r",
											"var primaryPremium = data.familyTotalExpenses[0].primaryPremium;\r",
											"pm.environment.set(\"primaryPremium5\", primaryPremium);\r",
											"var spousePremium = data.familyTotalExpenses[0].spousePremium;\r",
											"pm.environment.set('spousePremium5', spousePremium);\r",
											"\r",
											"//premedicare OOP verification\r",
											"var primaryOutofpocket = data.familyTotalExpenses[0].primaryOutofpocket;\r",
											"pm.environment.set(\"primaryOutofpocket5\", primaryOutofpocket);\r",
											"var spouseOutofpocket = data.familyTotalExpenses[0].spouseOutofpocket;\r",
											"pm.environment.set('spouseOutofpocket5', spouseOutofpocket);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"versionId\": \"{{versionId}}\",\n    \"primaryPlanId\": \"{{primaryPlanId}}\",\n    \"primaryBirthDate\": \"{{primaryBirthDate}}\",\n    \"primaryRetirementYear\": \"{{primaryRetirementYear}}\",\n    \"primaryLifeExpectancy\": \"{{primaryLifeExpectancy}}\",\n    \"primarySingleVsMultipleMagi\": \"{{primarySingleVsMultipleMagi}}\",\n    \"primaryMagiTierVsDollarAmount\": \"{{primaryMagiTierVsDollarAmount}}\",\n    \"primaryMagiTier\": \"{{primaryMagiTier}}\",\n    \"primaryTaxFilingStatus\": \"{{primaryTaxFilingStatus}}\",\n    \"primaryMagiDollarAmount\": \"{{primaryMagiDollarAmount}}\",\n    \"primaryHealthGrade\": \"{{primaryHealthGrade}}\",\n    \"primaryStateName\": \"{{primaryStateName}}\",\n    \"primaryZipcode\": \"{{primaryZipcode}}\",\n    \"primaryCountyCode\": \"{{primaryCountyCode}}\",\n    \"primaryRetirementState\": \"{{primaryRetirementState}}\",\n    \"primaryRetirementZipcode\": \"{{primaryRetirementZipcode}}\",\n    \"primaryRetirementCountyCode\": \"{{primaryRetirementCountyCode}}\",\n    \"primaryBoughtPlanA\": \"{{primaryBoughtPlanA}}\",\n    \"primaryReserveDaysUsed\": \"{{primaryReserveDaysUsed}}\",\n    \"primaryDental\": \"{{primaryDental}}\",\n    \"primaryDentalHealthGrade\": \"{{primaryDentalHealthGrade}}\",\n    \"primaryPlanType\": \"{{primaryPlanType}}\",\n    \"primaryTobacco\": \"{{primaryTobacco}}\",\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\n    \"spousePlanId\": \"{{spousePlanId}}\",\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\n    \"spouseLifeExpectancy\": \"{{spouseLifeExpectancy}}\",\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\n    \"spouseMagiTier\": \"{{spouseMagiTier}}\",\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\n    \"spouseMagiDollarAmount\": \"{{spouseMagiDollarAmount}}\",\n    \"spouseHealthGrade\": \"{{spouseHealthGrade}}\",\n    \"spouseStateName\": \"{{spouseStateName}}\",\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\n    \"spouseReserveDaysUsed\": \"{{spouseReserveDaysUsed}}\",\n    \"spouseDental\": \"{{spouseDental}}\",\n    \"spouseDentalHealthGrade\": \"{{spouseDentalHealthGrade}}\",\n    \"spousePlanType\": \"{{spousePlanType}}\",\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\n}"
								},
								"url": {
									"raw": "{{server}}/familyTotalExpensesR3",
									"host": [
										"{{server}}"
									],
									"path": [
										"familyTotalExpensesR3"
									]
								},
								"description": "Comparing premium and OOP values for Health Grade 5"
							},
							"response": []
						},
						{
							"name": "preMedPremium/ind_avgCalc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var Premium1 = Math.round(parseFloat(data[0].average_net_premium));\r",
											"//var OOP1 = data[0].OOP;\r",
											"//premium verification\r",
											"//var primaryPremium = String(pm.environment.get('primaryPremium1'))\r",
											"var primaryPremium1 = Math.round(pm.environment.get('primaryPremium1'));\r",
											"var spousePremium1 = Math.round(pm.environment.get('spousePremium1'));\r",
											"pm.test(\"Comapre primaryPremium1 matching with the db\", () => {\r",
											"pm.expect(primaryPremium1).to.equal(Premium1, \"primaryPremium1 did not match\");\r",
											"})\r",
											"pm.test(\"Compare spousePremium1 matching with the db\", () => {\r",
											"pm.expect(spousePremium1).to.equal(Premium1, \"spousePremium1 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('query',\"_where=(plan_id,eq,{{primaryPlanId}})~and(State,eq,{{primaryRetirementState}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/individual_plans_average_calculation?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"individual_plans_average_calculation"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "preMedOOP_PRE_RET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"//var Premium5 = data[0].Premium;\r",
											"var OOP5 = data[0].OOP;\r",
											"\r",
											"\r",
											"//OOP verification\r",
											"pm.test(\"Comapre primaryOutofpocket5 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryOutofpocket5')).to.equal(OOP5, \"primaryOutofpocket5 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spouseOutofpocket5 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spouseOutofpocket5')).to.equal(OOP5, \"spouseOutofpocket5 did not match\");\r",
											"})\r",
											"pm.environment.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('query', \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(State,eq,{{primaryRetirementState}})~and(Health_Grade,eq,{{primaryHealthGrade}})~and(Plan_type,eq,{{primaryPlanType}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PRE_RET?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PRE_RET"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "familyTotalExpensesR3Medicare_Premium_OOP",
					"item": [
						{
							"name": "famTotMagiTier1_HG1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('versionId','1');\r",
											"pm.environment.set(\"primaryPlanId\", \"2021Colorado8035BronzeEPOHealthSherpa\");\r",
											"//\"2021Colorado8035SilverHMOHealthSherpa\");\r",
											"pm.environment.set('primaryBirthDate','01-1956');\r",
											"pm.environment.set('primaryRetirementYear','01-2021');\r",
											"pm.environment.set('primaryLifeExpectancy','67');\r",
											"pm.environment.set('primarySingleVsMultipleMagi','false');\r",
											"pm.environment.set('primaryMagiTierVsDollarAmount', 'false');\r",
											"pm.environment.set('primaryMagiTier', '1');\r",
											"pm.environment.set('primaryTaxFilingStatus','MARRIED_FILING_JOINTLY');\r",
											"pm.environment.set('primaryMagiDollarAmount', '170000');\r",
											"pm.environment.set('primaryHealthGrade','1');\r",
											"pm.environment.set('primaryStateName', 'Colorado');\r",
											"pm.environment.set('primaryZipcode', '80130');\r",
											"pm.environment.set('primaryCountyCode', '8035');\r",
											"pm.environment.set('primaryRetirementState', 'Colorado');\r",
											"pm.environment.set('primaryRetirementZipcode', '80130');\r",
											"pm.environment.set('primaryRetirementCountyCode', '8035');\r",
											"pm.environment.set('primaryBoughtPlanA', 'True');\r",
											"pm.environment.set('primaryReserveDaysUsed', '0');\r",
											"pm.environment.set('primaryDental', 'false');\r",
											"pm.environment.set('primaryDentalHealthGrade', '1');\r",
											"pm.environment.set('primaryPlanType', 'Silver');\r",
											"pm.environment.set('primaryTobacco', 'false');\r",
											"pm.environment.set('spouseIncluded', 'true');\r",
											"pm.environment.set('spousePlanId', '2021Colorado8035SilverHMOHealthSherpa');\r",
											"pm.environment.set('spouseBirthDate', '01-1956');\r",
											"pm.environment.set('spouseRetirementYear', '01-2021');\r",
											"pm.environment.set('spouseLifeExpectancy', '67');\r",
											"pm.environment.set('spouseSingleVsMultipleMagi', 'false');\r",
											"pm.environment.set('spouseMagiTierVsDollarAmount', 'false');\r",
											"pm.environment.set('spouseMagiTier', '1');\r",
											"pm.environment.set('spouseTaxFilingStatus', 'MARRIED_FILING_JOINTLY');\r",
											"pm.environment.set('spouseMagiDollarAmount', '170000');\r",
											"pm.environment.set('spouseHealthGrade', '1');\r",
											"pm.environment.set('spouseStateName', 'Colorado');\r",
											"pm.environment.set('spouseZipcode', '80130');\r",
											"pm.environment.set('spouseCountyCode', '8035');\r",
											"pm.environment.set('spouseRetirementState', 'Colorado');\r",
											"pm.environment.set('spouseRetirementZipcode', '80130');\r",
											"pm.environment.set('spouseRetirementCountyCode', '8035');\r",
											"pm.environment.set('spouseBoughtPlanA', 'True');\r",
											"pm.environment.set('spouseReserveDaysUsed', '0');\r",
											"pm.environment.set('spouseDental', 'false');\r",
											"pm.environment.set('spouseDentalHealthGrade', '1');\r",
											"pm.environment.set('spousePlanType', 'Silver');\r",
											"pm.environment.set('spouseTobacco', 'false');\r",
											"pm.environment.set('fullYearDataForLifeExpectancyYear', 'false');\r",
											"pm.environment.set('primaryYearWiseMagiDetailList', '[{ \"year\": 2021, \"taxFilingStatus\": \"{{primaryTaxFilingStatus}}\",\"magiTier\": \"{{primaryMagiTier}}\",\"magiDollarAmount\": {{primaryMagiDollarAmount}} }]');\r",
											"pm.environment.set('spouseYearWiseMagiDetailList', '[{\"year\": 2021,\"taxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\"magiTier\": \"{{spouseMagiTier}}\",\"magiDollarAmount\": {{spouseMagiDollarAmount}} }]');    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"var BD = data.primaryBirthDate; \r",
											"var bit = BD.split('-'); \r",
											"var primary_birthmonth = Number(bit[0]); \r",
											"var primary_birthyear = Number(bit[1]); \r",
											"// console.log(primary_birthyear); \r",
											"var current_date = new Date(); \r",
											"var primary_age = current_date.getFullYear() - primary_birthyear; \r",
											"if (current_date.getMonth() < primary_birthmonth) {primary_age -= 1;} \r",
											"console.log(primary_age); \r",
											"pm.environment.set(\"primary_age\", primary_age);\r",
											"var year = data.familyTotalExpenses[0].year;\r",
											"pm.environment.set(\"year\", year);\r",
											"\r",
											"\r",
											"//partA premium verification\r",
											"var primaryPartAPremium = data.familyTotalExpenses[0].primaryPartAPremium\r",
											"pm.environment.set(\"primaryPartAPremium1\", primaryPartAPremium);\r",
											"var spousePartAPremium = data.familyTotalExpenses[0].spousePartAPremium;\r",
											"pm.environment.set(\"spousePartAPremium1\", spousePartAPremium);\r",
											"//partA OOP verification\r",
											"var primaryPartAOOP = data.familyTotalExpenses[0].primaryPartAOOP;\r",
											"pm.environment.set(\"primaryPartAOOP1\", primaryPartAOOP);\r",
											"var spousePartAOOP = data.familyTotalExpenses[0].spousePartAOOP;\r",
											"pm.environment.set(\"spousePartAOOP1\", spousePartAOOP);\r",
											"\r",
											"//partB premium verification\r",
											"var primaryPartBPremium = data.familyTotalExpenses[0].primaryPartBPremium;\r",
											"pm.environment.set(\"primaryPartBPremium1\", primaryPartBPremium);\r",
											"var spousePartBPremium = data.familyTotalExpenses[0].spousePartBPremium;\r",
											"pm.environment.set(\"spousePartBPremium1\", spousePartBPremium);\r",
											"//partB OOP verification\r",
											"var primaryPartBOOP = data.familyTotalExpenses[0].primaryPartBOOP;\r",
											"pm.environment.set(\"primaryPartBOOP1\", primaryPartBOOP);\r",
											"var spousePartBOOP = data.familyTotalExpenses[0].spousePartBOOP;\r",
											"pm.environment.set(\"spousePartBOOP1\", spousePartBOOP);\r",
											"\r",
											"//partD premium verification\r",
											"var primaryPartDPremium = data.familyTotalExpenses[0].primaryPartDPremium;\r",
											"pm.environment.set(\"primaryPartDPremium1\", primaryPartDPremium);\r",
											"var spousePartDPremium = data.familyTotalExpenses[0].spousePartDPremium;\r",
											"pm.environment.set(\"spousePartDPremium1\", spousePartDPremium);\r",
											"\r",
											"//partD OOP verification\r",
											"var primaryPartDOOP = data.familyTotalExpenses[0].primaryPartDOOP;\r",
											"pm.environment.set(\"primaryPartDOOP1\", primaryPartDOOP);\r",
											"var spousePartDOOP = data.familyTotalExpenses[0].spousePartDOOP;\r",
											"pm.environment.set(\"spousePartDOOP1\", spousePartDOOP);\r",
											"\r",
											"//partF premium verification\r",
											"var primaryPartFPremium = data.familyTotalExpenses[0].primaryPartFPremium;\r",
											"pm.environment.set(\"primaryPartFPremium1\", primaryPartFPremium);\r",
											"var spousePartFPremium = data.familyTotalExpenses[0].spousePartFPremium;\r",
											"pm.environment.set(\"spousePartFPremium1\", spousePartFPremium);\r",
											"\r",
											"//planG premium verification\r",
											"var primaryPlanGPremium = data.familyTotalExpenses[0].primaryPlanGPremium;\r",
											"pm.environment.set(\"primaryPlanGPremium1\", primaryPlanGPremium);\r",
											"var spousePlanGPremium = data.familyTotalExpenses[0].spousePlanGPremium;\r",
											"pm.environment.set(\"spousePlanGPremium1\", spousePlanGPremium);\r",
											"\r",
											"//planG OOP verification\r",
											"var primaryPlanGOOP = data.familyTotalExpenses[0].primaryPlanGOOP;\r",
											"pm.environment.set(\"primaryPlanGOOP1\", primaryPlanGOOP);\r",
											"var spousePlanGOOP = data.familyTotalExpenses[0].spousePlanGOOP;\r",
											"pm.environment.set(\"spousePlanGOOP1\", spousePlanGOOP);\r",
											"\r",
											"//planN premium verification\r",
											"var primaryPlanNPremium = data.familyTotalExpenses[0].primaryPlanNPremium;\r",
											"pm.environment.set(\"primaryPlanNPremium1\", primaryPlanNPremium);\r",
											"var spousePlanNPremium = data.familyTotalExpenses[0].spousePlanNPremium;\r",
											"pm.environment.set(\"spousePlanNPremium1\", spousePlanNPremium);\r",
											"\r",
											"//planN OOP verification\r",
											"var primaryPlanNOOP = data.familyTotalExpenses[0].primaryPlanNOOP;\r",
											"pm.environment.set(\"primaryPlanNOOP1\", primaryPlanNOOP);\r",
											"var spousePlanNOOP = data.familyTotalExpenses[0].spousePlanNOOP;\r",
											"pm.environment.set(\"spousePlanNOOP1\", spousePlanNOOP);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"versionId\": \"{{versionId}}\",\n    \"primaryPlanId\": \"{{primaryPlanId}}\",\n    \"primaryBirthDate\": \"{{primaryBirthDate}}\",\n    \"primaryRetirementYear\": \"{{primaryRetirementYear}}\",\n    \"primaryLifeExpectancy\": \"{{primaryLifeExpectancy}}\",\n    \"primarySingleVsMultipleMagi\": \"{{primarySingleVsMultipleMagi}}\",\n    \"primaryMagiTierVsDollarAmount\": \"{{primaryMagiTierVsDollarAmount}}\",\n    \"primaryMagiTier\": \"{{primaryMagiTier}}\",\n    \"primaryTaxFilingStatus\": \"{{primaryTaxFilingStatus}}\",\n    \"primaryMagiDollarAmount\": \"{{primaryMagiDollarAmount}}\",\n    \"primaryHealthGrade\": \"{{primaryHealthGrade}}\",\n    \"primaryStateName\": \"{{primaryStateName}}\",\n    \"primaryZipcode\": \"{{primaryZipcode}}\",\n    \"primaryCountyCode\": \"{{primaryCountyCode}}\",\n    \"primaryRetirementState\": \"{{primaryRetirementState}}\",\n    \"primaryRetirementZipcode\": \"{{primaryRetirementZipcode}}\",\n    \"primaryRetirementCountyCode\": \"{{primaryRetirementCountyCode}}\",\n    \"primaryBoughtPlanA\": \"{{primaryBoughtPlanA}}\",\n    \"primaryReserveDaysUsed\": \"{{primaryReserveDaysUsed}}\",\n    \"primaryDental\": \"{{primaryDental}}\",\n    \"primaryDentalHealthGrade\": \"{{primaryDentalHealthGrade}}\",\n    \"primaryPlanType\": \"{{primaryPlanType}}\",\n    \"primaryTobacco\": \"{{primaryTobacco}}\",\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\n    \"spousePlanId\": \"{{spousePlanId}}\",\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\n    \"spouseLifeExpectancy\": \"{{spouseLifeExpectancy}}\",\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\n    \"spouseMagiTier\": \"{{spouseMagiTier}}\",\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\n    \"spouseMagiDollarAmount\": \"{{spouseMagiDollarAmount}}\",\n    \"spouseHealthGrade\": \"{{spouseHealthGrade}}\",\n    \"spouseStateName\": \"{{spouseStateName}}\",\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\n    \"spouseReserveDaysUsed\": \"{{spouseReserveDaysUsed}}\",\n    \"spouseDental\": \"{{spouseDental}}\",\n    \"spouseDentalHealthGrade\": \"{{spouseDentalHealthGrade}}\",\n    \"spousePlanType\": \"{{spousePlanType}}\",\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\n}"
								},
								"url": {
									"raw": "{{server}}/familyTotalExpensesR3",
									"host": [
										"{{server}}"
									],
									"path": [
										"familyTotalExpensesR3"
									]
								},
								"description": "Comparing premium andOOP values for MagiTier1 and HG1."
							},
							"response": []
						},
						{
							"name": "state_multiDB1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var OOP_MULT = data[0].OOP_mult;\r",
											"pm.environment.set(\"OOP_MULT\", OOP_MULT);\r",
											"var premD_mult = data[0].premD_mult;\r",
											"pm.environment.set(\"premD_mult\", premD_mult);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(State,eq,{{primaryRetirementState}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/STATE_MULT?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"STATE_MULT"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partAmagiTier1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartApremium = data[0].Premium;\r",
											"var dbpartA_OOP1 = data[0].OOP;\r",
											"\r",
											"\r",
											"//part A premium\r",
											"pm.test(\"Comapre primaryPartApremium1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartAPremium1')).to.equal(dbpartApremium, \"primaryPartApremium1 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartApremium1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartAPremium1')).to.equal(dbpartApremium, \"spousePartApremium1 did not match\");\r",
											"})\r",
											"\r",
											"//partA OOP \r",
											"\r",
											"pm.test(\"Comapre primaryPartAOOP1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartAOOP1')).to.equal(dbpartA_OOP1, \"primaryPartAOOP1 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartAOOP1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartAOOP1')).to.equal(dbpartA_OOP1, \"spousePartAOOP1 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(Current_Age,eq,{{primary_age}})~and(Health_Grade,eq,{{primaryHealthGrade}})\");\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTA?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTA"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partBmagiTier1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartBpremium = data[0].Premium;\r",
											"var dbpartB_OOP1 = data[0].OOP;\r",
											"\r",
											"var dbpartB_OOP1 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartB_OOP1);\r",
											"\r",
											"//part B OOP\r",
											"var primaryPartBOOP1 = Math.round(pm.environment.get('primaryPartBOOP1'));\r",
											"var spousePartBOOP1 = Math.round(pm.environment.get('spousePartBOOP1'));\r",
											"console.log(\"primaryPartBOOP1 \", + primaryPartBOOP1);\r",
											"console.log(\"spousePartBOOP1 \", + spousePartBOOP1);\r",
											"\r",
											"pm.test(\"Comapre primaryPartBOOP1 matching with the db\", () => {\r",
											"pm.expect(primaryPartBOOP1).to.equal(dbpartB_OOP1, \"primaryPartBOOP1 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartBOOP1 matching with the db\", () => {\r",
											"pm.expect(spousePartBOOP1).to.equal(dbpartB_OOP1, \"spousePartBOOP1 did not match\");\r",
											"})\r",
											"\r",
											"//part B premium\r",
											"pm.test(\"Comapre primaryPartBpremium1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartBPremium1')).to.equal(dbpartBpremium, \"primaryPartBpremium1 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartBpremium1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartBPremium1')).to.equal(dbpartBpremium, \"spousePartBpremium1 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(Income,eq,{{primaryMagiTier}})~and(HealthGrade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"//pm.environment.set(\"dbpartB_OOP1\", dbpartB_OOP1);\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTB?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTB"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partDmagiTier1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartDpremium = data[0].Premium;\r",
											"var dbpartD_OOP1 = data[0].OOP;\r",
											"pm.environment.set(\"dbpartDpremium1\", dbpartDpremium);\r",
											"\r",
											"var calc_dbpartDpremium = Math.round(pm.environment.get(\"premD_mult\")*dbpartDpremium);\r",
											"\r",
											"\r",
											"var primaryPartDPremium1 = Math.round(pm.environment.get('primaryPartDPremium1'));\r",
											"var spousePartDPremium1 = Math.round(pm.environment.get('spousePartDPremium1'));\r",
											"\r",
											"\r",
											"pm.test(\"Comapre primaryPartDpremium1 matching with the db\", () => {\r",
											"pm.expect(primaryPartDPremium1).to.equal(calc_dbpartDpremium, \"primaryPartDpremium1 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartDpremium1 matching with the db\", () => {\r",
											"pm.expect(spousePartDPremium1).to.equal(calc_dbpartDpremium, \"spousePartDpremium1 did not match\");\r",
											"})\r",
											"\r",
											"var dbpartD_OOP1 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartD_OOP1);\r",
											"var primaryPartDOOP1 = Math.round(pm.environment.get('primaryPartDOOP1'));\r",
											"var spousePartDOOP1 = Math.round(pm.environment.get('spousePartDOOP1'));\r",
											"\r",
											"\r",
											"pm.test(\"Comapre primaryPartDOOP1 matching with the db\", () => {\r",
											"pm.expect(primaryPartDOOP1).to.equal(dbpartD_OOP1, \"primaryPartDOOP1 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartDOOP1 matching with the db\", () => {\r",
											"pm.expect(spousePartDOOP1).to.equal(dbpartD_OOP1, \"spousePartDOOP1 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(Income,eq,{{primaryMagiTier}})~and(healthgrade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTD?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTD"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartFpremium = data[0].Premium;\r",
											"//pm.environment.set(\"dbpartFpremium\",dbpartFpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPartFpremium1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartFPremium1')).to.equal(dbpartFpremium, \"primaryPartFPremium1 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartFpremium1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartFPremium1')).to.equal(dbpartFpremium, \"spousePartFPremium1 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/part_f_r3?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"part_f_r3"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "planG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbplanGpremium = data[0].premium;\r",
											"//pm.environment.set(\"dbplanGpremium\",dbplanGpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPlanGpremium1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPlanGPremium1')).to.equal(dbplanGpremium, \"primaryPlanGPremium1 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePlanGpremium1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePlanGPremium1')).to.equal(dbplanGpremium, \"spousePlanGPremium1 did not match\");\r",
											"})\r",
											"\r",
											"var dbpartG_OOP1 = data[0].oop;\r",
											"//pm.environment.set(\"dbplanGpremium\",dbplanGpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPlanGOOP1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPlanGOOP1')).to.equal(dbpartG_OOP1, \"primaryPlanGOOP1 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePlanGOOP1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePlanGOOP1')).to.equal(dbpartG_OOP1, \"spousePlanGOOP1 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"setTimeout(function(){}, 500);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/plan_g_cost?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"plan_g_cost"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "planN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbplanNpremium = data[0].premium;\r",
											"//pm.environment.set(\"dbplanNpremium\",dbplanNpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPlanNpremium1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPlanNPremium1')).to.equal(dbplanNpremium, \"primaryPlanNPremium1 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePlanNpremium1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePlanNPremium1')).to.equal(dbplanNpremium, \"spousePlanNPremium1 did not match\");\r",
											"})\r",
											"\r",
											"var dbpartN_OOP1 = data[0].oop;\r",
											"//pm.environment.set(\"dbplanNpremium\",dbplanNpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPlanNOOP1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPlanNOOP1')).to.equal(dbpartN_OOP1, \"primaryPlanNOOP1 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePlanNOOP1 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePlanNOOP1')).to.equal(dbpartN_OOP1, \"spousePlanNOOP1 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/plan_n_cost?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"plan_n_cost"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "famTotMagiTier2_HG2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('primaryMagiTier', '2');\r",
											"pm.environment.set('spouseMagiTier', '2');\r",
											"pm.environment.set('primaryHealthGrade', '2');\r",
											"pm.environment.set('spouseHealthGrade', '2')\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var BD = data.primaryBirthDate; \r",
											"var bit = BD.split('-'); \r",
											"var primary_birthmonth = Number(bit[0]); \r",
											"var primary_birthyear = Number(bit[1]); \r",
											"// console.log(primary_birthyear); \r",
											"var current_date = new Date(); \r",
											"var primary_age = current_date.getFullYear() - primary_birthyear; \r",
											"if (current_date.getMonth() < primary_birthmonth) {primary_age -= 1;} \r",
											"console.log(primary_age); \r",
											"pm.environment.set(\"primary_age\", primary_age);\r",
											"var year = data.familyTotalExpenses[0].year;\r",
											"pm.environment.set(\"year\", year);\r",
											"\r",
											"//partA premium verification\r",
											"var primaryPartAPremium = data.familyTotalExpenses[0].primaryPartAPremium\r",
											"pm.environment.set(\"primaryPartAPremium2\", primaryPartAPremium);\r",
											"var spousePartAPremium = data.familyTotalExpenses[0].spousePartAPremium;\r",
											"pm.environment.set(\"spousePartAPremium2\", spousePartAPremium);\r",
											"//partA OOP verification\r",
											"var primaryPartAOOP = data.familyTotalExpenses[0].primaryPartAOOP;\r",
											"pm.environment.set(\"primaryPartAOOP2\", primaryPartAOOP);\r",
											"var spousePartAOOP = data.familyTotalExpenses[0].spousePartAOOP;\r",
											"pm.environment.set(\"spousePartAOOP2\", spousePartAOOP);\r",
											"\r",
											"//partB premium verification\r",
											"var primaryPartBPremium = data.familyTotalExpenses[0].primaryPartBPremium;\r",
											"pm.environment.set(\"primaryPartBPremium2\", primaryPartBPremium);\r",
											"var spousePartBPremium = data.familyTotalExpenses[0].spousePartBPremium;\r",
											"pm.environment.set('spousePartBPremium2', spousePartBPremium);\r",
											"//setting primary and spouse surcharge in the environment\r",
											"var primaryPartDPremiumSurcharge = data.familyTotalExpenses[0].primaryPartDPremiumSurcharge;\r",
											"pm.environment.set(\"primaryPartDPremiumSurcharge2\", primaryPartDPremiumSurcharge);\r",
											"var spousePartDPremiumSurcharge = data.familyTotalExpenses[0].spousePartDPremiumSurcharge\r",
											"pm.environment.set(\"spousePartDPremiumSurcharge2\", spousePartDPremiumSurcharge);\r",
											"\r",
											"//partD premium verification\r",
											"var primaryPartDPremium = data.familyTotalExpenses[0].primaryPartDPremium;\r",
											"pm.environment.set(\"primaryPartDPremium2\", primaryPartDPremium);\r",
											"var spousePartDPremium = data.familyTotalExpenses[0].spousePartDPremium;\r",
											"pm.environment.set('spousePartDPremium2', spousePartDPremium);\r",
											"\r",
											"//partB OOP verification\r",
											"var primaryPartBOOP = data.familyTotalExpenses[0].primaryPartBOOP;\r",
											"pm.environment.set(\"primaryPartBOOP2\", primaryPartBOOP);\r",
											"var spousePartBOOP = data.familyTotalExpenses[0].spousePartBOOP;\r",
											"pm.environment.set('spousePartBOOP2', spousePartBOOP);\r",
											"\r",
											"//partD OOP verification\r",
											"var primaryPartDOOP = data.familyTotalExpenses[0].primaryPartDOOP;\r",
											"pm.environment.set(\"primaryPartDOOP2\", primaryPartDOOP);\r",
											"var spousePartDOOP = data.familyTotalExpenses[0].spousePartDOOP;\r",
											"pm.environment.set('spousePartDOOP2', spousePartDOOP);\r",
											"\r",
											"//partF premium verification\r",
											"var primaryPartFPremium = data.familyTotalExpenses[0].primaryPartFPremium;\r",
											"pm.environment.set(\"primaryPartFPremium2\", primaryPartFPremium);\r",
											"var spousePartFPremium = data.familyTotalExpenses[0].spousePartFPremium;\r",
											"pm.environment.set(\"spousePartFPremium2\", spousePartFPremium);\r",
											"\r",
											"//planG OOP verification\r",
											"var primaryPlanGOOP = data.familyTotalExpenses[0].primaryPlanGOOP;\r",
											"pm.environment.set(\"primaryPlanGOOP2\", primaryPlanGOOP);\r",
											"var spousePlanGOOP = data.familyTotalExpenses[0].spousePlanGOOP;\r",
											"pm.environment.set('spousePlanGOOP2', spousePlanGOOP);\r",
											"\r",
											"//planN OOP verification\r",
											"var primaryPlanNOOP = data.familyTotalExpenses[0].primaryPlanNOOP;\r",
											"pm.environment.set(\"primaryPlanNOOP2\", primaryPlanNOOP);\r",
											"var spousePlanNOOP = data.familyTotalExpenses[0].spousePlanNOOP;\r",
											"pm.environment.set('spousePlanNOOP2', spousePlanNOOP);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"versionId\": \"{{versionId}}\",\n    \"primaryPlanId\": \"{{primaryPlanId}}\",\n    \"primaryBirthDate\": \"{{primaryBirthDate}}\",\n    \"primaryRetirementYear\": \"{{primaryRetirementYear}}\",\n    \"primaryLifeExpectancy\": \"{{primaryLifeExpectancy}}\",\n    \"primarySingleVsMultipleMagi\": \"{{primarySingleVsMultipleMagi}}\",\n    \"primaryMagiTierVsDollarAmount\": \"{{primaryMagiTierVsDollarAmount}}\",\n    \"primaryMagiTier\": \"{{primaryMagiTier}}\",\n    \"primaryTaxFilingStatus\": \"{{primaryTaxFilingStatus}}\",\n    \"primaryMagiDollarAmount\": \"{{primaryMagiDollarAmount}}\",\n    \"primaryHealthGrade\": \"{{primaryHealthGrade}}\",\n    \"primaryStateName\": \"{{primaryStateName}}\",\n    \"primaryZipcode\": \"{{primaryZipcode}}\",\n    \"primaryCountyCode\": \"{{primaryCountyCode}}\",\n    \"primaryRetirementState\": \"{{primaryRetirementState}}\",\n    \"primaryRetirementZipcode\": \"{{primaryRetirementZipcode}}\",\n    \"primaryRetirementCountyCode\": \"{{primaryRetirementCountyCode}}\",\n    \"primaryBoughtPlanA\": \"{{primaryBoughtPlanA}}\",\n    \"primaryReserveDaysUsed\": \"{{primaryReserveDaysUsed}}\",\n    \"primaryDental\": \"{{primaryDental}}\",\n    \"primaryDentalHealthGrade\": \"{{primaryDentalHealthGrade}}\",\n    \"primaryPlanType\": \"{{primaryPlanType}}\",\n    \"primaryTobacco\": \"{{primaryTobacco}}\",\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\n    \"spousePlanId\": \"{{spousePlanId}}\",\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\n    \"spouseLifeExpectancy\": \"{{spouseLifeExpectancy}}\",\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\n    \"spouseMagiTier\": \"{{spouseMagiTier}}\",\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\n    \"spouseMagiDollarAmount\": \"{{spouseMagiDollarAmount}}\",\n    \"spouseHealthGrade\": \"{{spouseHealthGrade}}\",\n    \"spouseStateName\": \"{{spouseStateName}}\",\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\n    \"spouseReserveDaysUsed\": \"{{spouseReserveDaysUsed}}\",\n    \"spouseDental\": \"{{spouseDental}}\",\n    \"spouseDentalHealthGrade\": \"{{spouseDentalHealthGrade}}\",\n    \"spousePlanType\": \"{{spousePlanType}}\",\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\n}"
								},
								"url": {
									"raw": "{{server}}/familyTotalExpensesR3",
									"host": [
										"{{server}}"
									],
									"path": [
										"familyTotalExpensesR3"
									]
								},
								"description": "Comparing premium and OOP values for Magi Tier 2 and Health Grade 2."
							},
							"response": []
						},
						{
							"name": "partAmagiTier2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartApremium = data[0].Premium;\r",
											"var dbpartA_OOP2 = data[0].OOP;\r",
											"var dbpartA_OOP2 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartA_OOP2)\r",
											"\r",
											"\r",
											"\r",
											"//part A premium\r",
											"pm.test(\"Comapare primaryPartApremium2 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartAPremium2')).to.equal(dbpartApremium, \"primaryPartApremium2 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartApremium2 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartAPremium2')).to.equal(dbpartApremium, \"spousePartApremium2 did not match\");\r",
											"})\r",
											"\r",
											"//partA OOP \r",
											"var primaryPartAOOP2 = Math.round(pm.environment.get('primaryPartAOOP2'));\r",
											"var spousePartAOOP2 = Math.round(pm.environment.get('spousePartAOOP2'));\r",
											"pm.test(\"Comapare primaryPartAOOP2 matching with the db\", () => {\r",
											"pm.expect(primaryPartAOOP2).to.equal(dbpartA_OOP2, \"primaryPartAOOP2 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartAOOP2 matching with the db\", () => {\r",
											"pm.expect(spousePartAOOP2).to.equal(dbpartA_OOP2, \"spousePartAOOP2 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(Current_Age,eq,{{primary_age}})~and(Health_Grade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTA?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTA"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partBmagiTier2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartBpremium = data[0].Premium;\r",
											"var dbpartB_OOP2 = data[0].OOP;\r",
											"\r",
											"var dbpartB_OOP2 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartB_OOP2);\r",
											"\r",
											"//part B OOP\r",
											"var primaryPartBOOP2 = Math.round(pm.environment.get('primaryPartBOOP2'));\r",
											"var spousePartBOOP2 = Math.round(pm.environment.get('spousePartBOOP2'));\r",
											"console.log(\"primaryPartBOOP2 \", + primaryPartBOOP2);\r",
											"console.log(\"spousePartBOOP2 \", + spousePartBOOP2);\r",
											"\r",
											"pm.test(\"Comapre primaryPartBOOP2 matching with the db\", () => {\r",
											"pm.expect(primaryPartBOOP2).to.equal(dbpartB_OOP2, \"primaryPartBOOP2 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartBOOP2 matching with the db\", () => {\r",
											"pm.expect(spousePartBOOP2).to.equal(dbpartB_OOP2, \"spousePartBOOP2 did not match\");\r",
											"})\r",
											"\r",
											"//part B premium\r",
											"pm.test(\"Comapre primaryPartBpremium2 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartBPremium2')).to.equal(dbpartBpremium, \"primaryPartBpremium2 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartBpremium2 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartBPremium2')).to.equal(dbpartBpremium, \"spousePartBpremium2 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(Income,eq,{{primaryMagiTier}})~and(HealthGrade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTB?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTB"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partDmagiTier2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartDpremium = data[0].Premium;\r",
											"var dbpartD_OOP2 = data[0].OOP;\r",
											"console.log(\"dbpartDpremium \" + dbpartDpremium);\r",
											"console.log(\"dbpartD_OOP2 \" + dbpartD_OOP2);\r",
											"//comparing surcharge with database\r",
											"var dbPartDpremium1 = pm.environment.get(\"dbpartDpremium1\");\r",
											"console.log(\"partDpremium1 \" + dbPartDpremium1);\r",
											"var surcharge2 = dbpartDpremium-dbPartDpremium1;\r",
											"console.log(\"surcharge2 \" + surcharge2);\r",
											"//pm.environment.set(\"surcharge2\", surcharge2);\r",
											"var dbpremD_mult = pm.environment.get(\"premD_mult\");\r",
											"console.log(\"dbpremD_mult \" + dbpremD_mult);\r",
											"\r",
											"var primaryPartDPremium2 = Math.round(pm.environment.get('primaryPartDPremium2'));\r",
											"var spousePartDPremium2 = Math.round(pm.environment.get('spousePartDPremium2'));\r",
											"\r",
											"//Base premium*state_multi partD+partDsurcharge\r",
											"var dbpartDpremium1 = Math.round(dbPartDpremium1*dbpremD_mult+surcharge2);\r",
											"console.log(\"dbpartDpremium1 \" + dbpartDpremium1);\r",
											"//part D premium \r",
											"pm.test(\"Comapre primaryPartDpremium2 matching with the db\", () => {\r",
											"pm.expect(primaryPartDPremium2).to.equal(dbpartDpremium1, \"primaryPartDpremium2 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartDpremium2 matching with the db\", () => {\r",
											"pm.expect(spousePartDPremium2).to.equal(dbpartDpremium1, \"spousePartDpremium2 did not match\");\r",
											"})\r",
											"\r",
											"var dbpartD_OOP2 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartD_OOP2);\r",
											"var primaryPartDOOP2 = Math.round(pm.environment.get('primaryPartDOOP2'));\r",
											"var spousePartDOOP2 = Math.round(pm.environment.get('spousePartDOOP2'));\r",
											"\r",
											"//partD OOP verification\r",
											"pm.test(\"Comapre primaryPartDOOP2 matching with the db\", () => {\r",
											"pm.expect(primaryPartDOOP2).to.equal(dbpartD_OOP2, \"primaryPartDOOP2 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartDOOP2 matching with the db\", () => {\r",
											"pm.expect(spousePartDOOP2).to.equal(dbpartD_OOP2, \"spousePartDOOP2 did not match\");\r",
											"})\r",
											"//surcharge verification\r",
											"pm.test(\"Compare primarySurcharge2 for magitier2 matching with the db\", () => {\r",
											"pm.expect(surcharge2).to.equal(pm.environment.get(\"primaryPartDPremiumSurcharge2\"), \"primarySurcharge2 did not match\");\r",
											"})\r",
											"pm.test(\"Compare spouseSurcharge2 for magitier2 matching with the db\", () => {\r",
											"pm.expect(surcharge2).to.equal(pm.environment.get(\"spousePartDPremiumSurcharge2\"), \"spouseSurcharge2 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(Income,eq,{{primaryMagiTier}})~and(healthgrade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTD?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTD"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartFpremium = data[0].Premium;\r",
											"//pm.environment.set(\"dbpartFpremium\",dbpartFpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPartFpremium2 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartFPremium2')).to.equal(dbpartFpremium, \"primaryPartFPremium2 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartFpremium2 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartFPremium2')).to.equal(dbpartFpremium, \"spousePartFPremium2 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/part_f_r3?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"part_f_r3"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "planG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartG_OOP2 = data[0].oop;\r",
											"//pm.environment.set(\"dbplanGpremium\",dbplanGpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPlanGOOP2 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPlanGOOP2')).to.equal(dbpartG_OOP2, \"primaryPlanGOOP2 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePlanGOOP2 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePlanGOOP2')).to.equal(dbpartG_OOP2, \"spousePlanGOOP2 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/plan_g_cost?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"plan_g_cost"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "planN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartN_OOP2 = data[0].oop;\r",
											"//pm.environment.set(\"dbplanNpremium\",dbplanNpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPlanNOOP2 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPlanNOOP2')).to.equal(dbpartN_OOP2, \"primaryPlanNOOP2 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePlanNOOP2 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePlanNOOP2')).to.equal(dbpartN_OOP2, \"spousePlanNOOP2 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/plan_n_cost?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"plan_n_cost"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "famTotMagiTier3_HG3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('primaryMagiTier', '3');\r",
											"pm.environment.set('spouseMagiTier', '3');\r",
											"pm.environment.set('primaryHealthGrade', '3');\r",
											"pm.environment.set('spouseHealthGrade', '3')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"var data = JSON.parse(responseBody);\r",
											"var BD = data.primaryBirthDate; \r",
											"var bit = BD.split('-'); \r",
											"var primary_birthmonth = Number(bit[0]); \r",
											"var primary_birthyear = Number(bit[1]); \r",
											"// console.log(primary_birthyear); \r",
											"var current_date = new Date(); \r",
											"var primary_age = current_date.getFullYear() - primary_birthyear; \r",
											"if (current_date.getMonth() < primary_birthmonth) {primary_age -= 1;} \r",
											"console.log(primary_age); \r",
											"pm.environment.set(\"primary_age\", primary_age);\r",
											"var year = data.familyTotalExpenses[0].year;\r",
											"pm.environment.set(\"year\", year);\r",
											"\r",
											"//partA premium verification\r",
											"var primaryPartAPremium = data.familyTotalExpenses[0].primaryPartAPremium\r",
											"pm.environment.set(\"primaryPartAPremium3\", primaryPartAPremium);\r",
											"var spousePartAPremium = data.familyTotalExpenses[0].spousePartAPremium;\r",
											"pm.environment.set(\"spousePartAPremium3\", spousePartAPremium);\r",
											"//partA OOP verification\r",
											"var primaryPartAOOP = data.familyTotalExpenses[0].primaryPartAOOP;\r",
											"pm.environment.set(\"primaryPartAOOP3\", primaryPartAOOP);\r",
											"var spousePartAOOP = data.familyTotalExpenses[0].spousePartAOOP;\r",
											"pm.environment.set(\"spousePartAOOP3\", spousePartAOOP);\r",
											"\r",
											"//partB premium verification\r",
											"var primaryPartBPremium = data.familyTotalExpenses[0].primaryPartBPremium;\r",
											"pm.environment.set(\"primaryPartBPremium3\", primaryPartBPremium);\r",
											"var spousePartBPremium = data.familyTotalExpenses[0].spousePartBPremium;\r",
											"pm.environment.set('spousePartBPremium3', spousePartBPremium);\r",
											"\r",
											"//setting primary and spouse surcharge in the environment\r",
											"var primaryPartDPremiumSurcharge = data.familyTotalExpenses[0].primaryPartDPremiumSurcharge;\r",
											"pm.environment.set(\"primaryPartDPremiumSurcharge3\", primaryPartDPremiumSurcharge);\r",
											"var spousePartDPremiumSurcharge = data.familyTotalExpenses[0].spousePartDPremiumSurcharge\r",
											"pm.environment.set(\"spousePartDPremiumSurcharge3\", spousePartDPremiumSurcharge);\r",
											"\r",
											"//partD premium verification\r",
											"var primaryPartDPremium = data.familyTotalExpenses[0].primaryPartDPremium;\r",
											"pm.environment.set(\"primaryPartDPremium3\", primaryPartDPremium);\r",
											"var spousePartDPremium = data.familyTotalExpenses[0].spousePartDPremium;\r",
											"pm.environment.set('spousePartDPremium3', spousePartDPremium);\r",
											"\r",
											"//partB OOP verification\r",
											"var primaryPartBOOP = data.familyTotalExpenses[0].primaryPartBOOP;\r",
											"pm.environment.set(\"primaryPartBOOP3\", primaryPartBOOP);\r",
											"var spousePartBOOP = data.familyTotalExpenses[0].spousePartBOOP;\r",
											"pm.environment.set('spousePartBOOP3', spousePartBOOP);\r",
											"\r",
											"//partD OOP verification\r",
											"var primaryPartDOOP = data.familyTotalExpenses[0].primaryPartDOOP;\r",
											"pm.environment.set(\"primaryPartDOOP3\", primaryPartDOOP);\r",
											"var spousePartDOOP = data.familyTotalExpenses[0].spousePartDOOP;\r",
											"pm.environment.set('spousePartDOOP3', spousePartDOOP);\r",
											"\r",
											"//partF premium verification\r",
											"var primaryPartFPremium = data.familyTotalExpenses[0].primaryPartFPremium;\r",
											"pm.environment.set(\"primaryPartFPremium3\", primaryPartFPremium);\r",
											"var spousePartFPremium = data.familyTotalExpenses[0].spousePartFPremium;\r",
											"pm.environment.set(\"spousePartFPremium3\", spousePartFPremium);\r",
											"\r",
											"//PlanG OOP verification\r",
											"var primaryPlanGOOP = data.familyTotalExpenses[0].primaryPlanGOOP;\r",
											"pm.environment.set('primaryPlanGOOP3', primaryPlanGOOP);\r",
											"var spousePlanGOOP = data.familyTotalExpenses[0].spousePlanGOOP;\r",
											"pm.environment.set('spousePlanGOOP3', spousePlanGOOP);\r",
											"\r",
											"//partN OOP verification\r",
											"var primaryPlanNOOP = data.familyTotalExpenses[0].primaryPlanNOOP;\r",
											"pm.environment.set('primaryPlanNOOP3', primaryPlanNOOP);\r",
											"var spousePlanNOOP = data.familyTotalExpenses[0].spousePlanNOOP;\r",
											"pm.environment.set('spousePlanNOOP3', spousePlanNOOP);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"versionId\": \"{{versionId}}\",\n    \"primaryPlanId\": \"{{primaryPlanId}}\",\n    \"primaryBirthDate\": \"{{primaryBirthDate}}\",\n    \"primaryRetirementYear\": \"{{primaryRetirementYear}}\",\n    \"primaryLifeExpectancy\": \"{{primaryLifeExpectancy}}\",\n    \"primarySingleVsMultipleMagi\": \"{{primarySingleVsMultipleMagi}}\",\n    \"primaryMagiTierVsDollarAmount\": \"{{primaryMagiTierVsDollarAmount}}\",\n    \"primaryMagiTier\": \"{{primaryMagiTier}}\",\n    \"primaryTaxFilingStatus\": \"{{primaryTaxFilingStatus}}\",\n    \"primaryMagiDollarAmount\": \"{{primaryMagiDollarAmount}}\",\n    \"primaryHealthGrade\": \"{{primaryHealthGrade}}\",\n    \"primaryStateName\": \"{{primaryStateName}}\",\n    \"primaryZipcode\": \"{{primaryZipcode}}\",\n    \"primaryCountyCode\": \"{{primaryCountyCode}}\",\n    \"primaryRetirementState\": \"{{primaryRetirementState}}\",\n    \"primaryRetirementZipcode\": \"{{primaryRetirementZipcode}}\",\n    \"primaryRetirementCountyCode\": \"{{primaryRetirementCountyCode}}\",\n    \"primaryBoughtPlanA\": \"{{primaryBoughtPlanA}}\",\n    \"primaryReserveDaysUsed\": \"{{primaryReserveDaysUsed}}\",\n    \"primaryDental\": \"{{primaryDental}}\",\n    \"primaryDentalHealthGrade\": \"{{primaryDentalHealthGrade}}\",\n    \"primaryPlanType\": \"{{primaryPlanType}}\",\n    \"primaryTobacco\": \"{{primaryTobacco}}\",\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\n    \"spousePlanId\": \"{{spousePlanId}}\",\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\n    \"spouseLifeExpectancy\": \"{{spouseLifeExpectancy}}\",\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\n    \"spouseMagiTier\": \"{{spouseMagiTier}}\",\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\n    \"spouseMagiDollarAmount\": \"{{spouseMagiDollarAmount}}\",\n    \"spouseHealthGrade\": \"{{spouseHealthGrade}}\",\n    \"spouseStateName\": \"{{spouseStateName}}\",\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\n    \"spouseReserveDaysUsed\": \"{{spouseReserveDaysUsed}}\",\n    \"spouseDental\": \"{{spouseDental}}\",\n    \"spouseDentalHealthGrade\": \"{{spouseDentalHealthGrade}}\",\n    \"spousePlanType\": \"{{spousePlanType}}\",\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\n}"
								},
								"url": {
									"raw": "{{server}}/familyTotalExpensesR3",
									"host": [
										"{{server}}"
									],
									"path": [
										"familyTotalExpensesR3"
									]
								},
								"description": "Comparing premium and OOP values for Magi Tier 3 and Health Grade 3."
							},
							"response": []
						},
						{
							"name": "partAmagiTier3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartApremium = data[0].Premium;\r",
											"var dbpartA_OOP3 = data[0].OOP;\r",
											"\r",
											"\r",
											"//part A premium\r",
											"pm.test(\"Comapre primaryPartApremium3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartAPremium3')).to.equal(dbpartApremium, \"primaryPartApremium3 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartApremium3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartAPremium3')).to.equal(dbpartApremium, \"spousePartApremium3 did not match\");\r",
											"})\r",
											"\r",
											"//partA OOP \r",
											"\r",
											"pm.test(\"Comapre primaryPartAOOP3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartAOOP3')).to.equal(dbpartA_OOP3, \"primaryPartAOOP3 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartAOOP3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartAOOP3')).to.equal(dbpartA_OOP3, \"spousePartAOOP3 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(Current_Age,eq,{{primary_age}})~and(Health_Grade,eq,{{primaryHealthGrade}})\");\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTA?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTA"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partBmagiTier3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartBpremium = data[0].Premium;\r",
											"var dbpartB_OOP3 = data[0].OOP;\r",
											"\r",
											"var dbpartB_OOP3 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartB_OOP3);\r",
											"\r",
											"//part B OOP\r",
											"var primaryPartBOOP3 = Math.round(pm.environment.get('primaryPartBOOP3'));\r",
											"var spousePartBOOP3 = Math.round(pm.environment.get('spousePartBOOP3'));\r",
											"console.log(\"primaryPartBOOP3 \", + primaryPartBOOP3);\r",
											"console.log(\"spousePartBOOP3 \", + spousePartBOOP3);\r",
											"\r",
											"pm.test(\"Comapre primaryPartBOOP3 matching with the db\", () => {\r",
											"pm.expect(primaryPartBOOP3).to.equal(dbpartB_OOP3, \"primaryPartBOOP3 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartBOOP3 matching with the db\", () => {\r",
											"pm.expect(spousePartBOOP3).to.equal(dbpartB_OOP3, \"spousePartBOOP3 did not match\");\r",
											"})\r",
											"\r",
											"//part B premium\r",
											"pm.test(\"Comapre primaryPartBpremium3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartBPremium3')).to.equal(dbpartBpremium, \"primaryPartBpremium3 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartBpremium3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartBPremium3')).to.equal(dbpartBpremium, \"spousePartBpremium3 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(Income,eq,{{primaryMagiTier}})~and(HealthGrade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTB?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTB"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partDmagiTier3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartDpremium = data[0].Premium;\r",
											"var dbpartD_OOP3 = data[0].OOP;\r",
											"//comparing surcharge with database\r",
											"var partDpremium1 = pm.environment.get(\"dbpartDpremium1\");\r",
											"var surcharge3 = dbpartDpremium-partDpremium1;\r",
											"var dbpremD_mult = pm.environment.get(\"premD_mult\");\r",
											"\r",
											"var primaryPartDPremium3 = Math.round(pm.environment.get('primaryPartDPremium3'));\r",
											"var spousePartDPremium3 = Math.round(pm.environment.get('spousePartDPremium3'));\r",
											"\r",
											"//Base premium*state_multi partD+partDsurcharge\r",
											"var dbpartDpremium = Math.round(partDpremium1*dbpremD_mult+surcharge3);\r",
											"//part D premium \r",
											"pm.test(\"Comapre primaryPartDpremium3 matching with the db\", () => {\r",
											"pm.expect(primaryPartDPremium3).to.equal(dbpartDpremium, \"primaryPartDpremium3 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartDpremium3 matching with the db\", () => {\r",
											"pm.expect(spousePartDPremium3).to.equal(dbpartDpremium, \"spousePartDpremium3 did not match\");\r",
											"})\r",
											"\r",
											"var dbpartD_OOP3 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartD_OOP3);\r",
											"var primaryPartDOOP3 = Math.round(pm.environment.get('primaryPartDOOP3'));\r",
											"var spousePartDOOP3 = Math.round(pm.environment.get('spousePartDOOP3'));\r",
											"\r",
											"//partD OOP verification\r",
											"pm.test(\"Comapre primaryPartDOOP3 matching with the db\", () => {\r",
											"pm.expect(primaryPartDOOP3).to.equal(dbpartD_OOP3, \"primaryPartDOOP3 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartDOOP3 matching with the db\", () => {\r",
											"pm.expect(spousePartDOOP3).to.equal(dbpartD_OOP3, \"spousePartDOOP3 did not match\");\r",
											"})\r",
											"//surcharge verification\r",
											"pm.test(\"Compare primarySurcharge3 for magitier3 matching with the db\", () => {\r",
											"pm.expect(surcharge3).to.equal(pm.environment.get(\"primaryPartDPremiumSurcharge3\"), \"primarySurcharge3 did not match\");\r",
											"})\r",
											"pm.test(\"Compare spouseSurcharge3 for magitier3 matching with the db\", () => {\r",
											"pm.expect(surcharge3).to.equal(pm.environment.get(\"spousePartDPremiumSurcharge3\"), \"spouseSurcharge3 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(Income,eq,{{primaryMagiTier}})~and(healthgrade,eq,{{primaryHealthGrade}})\");\r",
											"setTimeout(function(){}, 500);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTD?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTD"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartFpremium = data[0].Premium;\r",
											"\r",
											"\r",
											"pm.test(\"Comapre primaryPartFpremium3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartFPremium3')).to.equal(dbpartFpremium, \"primaryPartFPremium3 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartFpremium3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartFPremium3')).to.equal(dbpartFpremium, \"spousePartFPremium3 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/part_f_r3?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"part_f_r3"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "planG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartG_OOP3 = data[0].oop;\r",
											"//pm.environment.set(\"dbplanGpremium\",dbplanGpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPlanGOOP3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPlanGOOP3')).to.equal(dbpartG_OOP3, \"primaryPlanGOOP3 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePlanGOOP3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePlanGOOP3')).to.equal(dbpartG_OOP3, \"spousePlanGOOP3 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/plan_g_cost?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"plan_g_cost"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "planN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartN_OOP3 = data[0].oop;\r",
											"//pm.environment.set(\"dbplanNpremium\",dbplanNpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPlanNOOP3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPlanNOOP3')).to.equal(dbpartN_OOP3, \"primaryPlanNOOP3 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePlanNOOP3 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePlanNOOP3')).to.equal(dbpartN_OOP3, \"spousePlanNOOP3 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/plan_n_cost?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"plan_n_cost"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "famTotMagiTier4_HG4",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('primaryMagiTier', '4');\r",
											"pm.environment.set('spouseMagiTier', '4');\r",
											"pm.environment.set('primaryHealthGrade', '4');\r",
											"pm.environment.set('spouseHealthGrade', '4')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var BD = data.primaryBirthDate; \r",
											"var bit = BD.split('-'); \r",
											"var primary_birthmonth = Number(bit[0]); \r",
											"var primary_birthyear = Number(bit[1]); \r",
											"// console.log(primary_birthyear); \r",
											"var current_date = new Date(); \r",
											"var primary_age = current_date.getFullYear() - primary_birthyear; \r",
											"if (current_date.getMonth() < primary_birthmonth) {primary_age -= 1;} \r",
											"console.log(primary_age); \r",
											"pm.environment.set(\"primary_age\", primary_age);\r",
											"var year = data.familyTotalExpenses[0].year;\r",
											"pm.environment.set(\"year\", year);\r",
											"\r",
											"//partA premium verification\r",
											"var primaryPartAPremium = data.familyTotalExpenses[0].primaryPartAPremium\r",
											"pm.environment.set(\"primaryPartAPremium4\", primaryPartAPremium);\r",
											"var spousePartAPremium = data.familyTotalExpenses[0].spousePartAPremium;\r",
											"pm.environment.set(\"spousePartAPremium4\", spousePartAPremium);\r",
											"//partA OOP verification\r",
											"var primaryPartAOOP = data.familyTotalExpenses[0].primaryPartAOOP;\r",
											"pm.environment.set(\"primaryPartAOOP4\", primaryPartAOOP);\r",
											"var spousePartAOOP = data.familyTotalExpenses[0].spousePartAOOP;\r",
											"pm.environment.set(\"spousePartAOOP4\", spousePartAOOP);\r",
											"\r",
											"//partB premium verification\r",
											"var primaryPartBPremium = data.familyTotalExpenses[0].primaryPartBPremium;\r",
											"pm.environment.set(\"primaryPartBPremium4\", primaryPartBPremium);\r",
											"var spousePartBPremium = data.familyTotalExpenses[0].spousePartBPremium;\r",
											"pm.environment.set('spousePartBPremium4', spousePartBPremium);\r",
											"\r",
											"//setting primary and spouse surcharge in the environment\r",
											"var primaryPartDPremiumSurcharge = data.familyTotalExpenses[0].primaryPartDPremiumSurcharge;\r",
											"pm.environment.set(\"primaryPartDPremiumSurcharge4\", primaryPartDPremiumSurcharge);\r",
											"var spousePartDPremiumSurcharge = data.familyTotalExpenses[0].spousePartDPremiumSurcharge\r",
											"pm.environment.set(\"spousePartDPremiumSurcharge4\", spousePartDPremiumSurcharge);\r",
											"\r",
											"//partD premium verification\r",
											"var primaryPartDPremium = data.familyTotalExpenses[0].primaryPartDPremium;\r",
											"pm.environment.set(\"primaryPartDPremium4\", primaryPartDPremium);\r",
											"var spousePartDPremium = data.familyTotalExpenses[0].spousePartDPremium;\r",
											"pm.environment.set('spousePartDPremium4', spousePartDPremium);\r",
											"\r",
											"//partB OOP verification\r",
											"var primaryPartBOOP = data.familyTotalExpenses[0].primaryPartBOOP;\r",
											"pm.environment.set(\"primaryPartBOOP4\", primaryPartBOOP);\r",
											"var spousePartBOOP = data.familyTotalExpenses[0].spousePartBOOP;\r",
											"pm.environment.set('spousePartBOOP4', spousePartBOOP);\r",
											"\r",
											"//partD OOP verification\r",
											"var primaryPartDOOP = data.familyTotalExpenses[0].primaryPartDOOP;\r",
											"pm.environment.set(\"primaryPartDOOP4\", primaryPartDOOP);\r",
											"var spousePartDOOP = data.familyTotalExpenses[0].spousePartDOOP;\r",
											"pm.environment.set('spousePartDOOP4', spousePartDOOP);\r",
											"\r",
											"//partF premium verification\r",
											"var primaryPartFPremium = data.familyTotalExpenses[0].primaryPartFPremium;\r",
											"pm.environment.set(\"primaryPartFPremium4\", primaryPartFPremium);\r",
											"var spousePartFPremium = data.familyTotalExpenses[0].spousePartFPremium;\r",
											"pm.environment.set(\"spousePartFPremium4\", spousePartFPremium);\r",
											"\r",
											"//PlanG OOP verification\r",
											"var primaryPlanGOOP = data.familyTotalExpenses[0].primaryPlanGOOP;\r",
											"pm.environment.set('primaryPlanGOOP4', primaryPlanGOOP);\r",
											"var spousePlanGOOP = data.familyTotalExpenses[0].spousePlanGOOP;\r",
											"pm.environment.set('spousePlanGOOP4', spousePlanGOOP);\r",
											"\r",
											"//partN OOP verification\r",
											"var primaryPlanNOOP = data.familyTotalExpenses[0].primaryPlanNOOP;\r",
											"pm.environment.set('primaryPlanNOOP4', primaryPlanNOOP);\r",
											"var spousePlanNOOP = data.familyTotalExpenses[0].spousePlanNOOP;\r",
											"pm.environment.set('spousePlanNOOP4', spousePlanNOOP);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"versionId\": \"{{versionId}}\",\n    \"primaryPlanId\": \"{{primaryPlanId}}\",\n    \"primaryBirthDate\": \"{{primaryBirthDate}}\",\n    \"primaryRetirementYear\": \"{{primaryRetirementYear}}\",\n    \"primaryLifeExpectancy\": \"{{primaryLifeExpectancy}}\",\n    \"primarySingleVsMultipleMagi\": \"{{primarySingleVsMultipleMagi}}\",\n    \"primaryMagiTierVsDollarAmount\": \"{{primaryMagiTierVsDollarAmount}}\",\n    \"primaryMagiTier\": \"{{primaryMagiTier}}\",\n    \"primaryTaxFilingStatus\": \"{{primaryTaxFilingStatus}}\",\n    \"primaryMagiDollarAmount\": \"{{primaryMagiDollarAmount}}\",\n    \"primaryHealthGrade\": \"{{primaryHealthGrade}}\",\n    \"primaryStateName\": \"{{primaryStateName}}\",\n    \"primaryZipcode\": \"{{primaryZipcode}}\",\n    \"primaryCountyCode\": \"{{primaryCountyCode}}\",\n    \"primaryRetirementState\": \"{{primaryRetirementState}}\",\n    \"primaryRetirementZipcode\": \"{{primaryRetirementZipcode}}\",\n    \"primaryRetirementCountyCode\": \"{{primaryRetirementCountyCode}}\",\n    \"primaryBoughtPlanA\": \"{{primaryBoughtPlanA}}\",\n    \"primaryReserveDaysUsed\": \"{{primaryReserveDaysUsed}}\",\n    \"primaryDental\": \"{{primaryDental}}\",\n    \"primaryDentalHealthGrade\": \"{{primaryDentalHealthGrade}}\",\n    \"primaryPlanType\": \"{{primaryPlanType}}\",\n    \"primaryTobacco\": \"{{primaryTobacco}}\",\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\n    \"spousePlanId\": \"{{spousePlanId}}\",\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\n    \"spouseLifeExpectancy\": \"{{spouseLifeExpectancy}}\",\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\n    \"spouseMagiTier\": \"{{spouseMagiTier}}\",\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\n    \"spouseMagiDollarAmount\": \"{{spouseMagiDollarAmount}}\",\n    \"spouseHealthGrade\": \"{{spouseHealthGrade}}\",\n    \"spouseStateName\": \"{{spouseStateName}}\",\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\n    \"spouseReserveDaysUsed\": \"{{spouseReserveDaysUsed}}\",\n    \"spouseDental\": \"{{spouseDental}}\",\n    \"spouseDentalHealthGrade\": \"{{spouseDentalHealthGrade}}\",\n    \"spousePlanType\": \"{{spousePlanType}}\",\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\n}"
								},
								"url": {
									"raw": "{{server}}/familyTotalExpensesR3",
									"host": [
										"{{server}}"
									],
									"path": [
										"familyTotalExpensesR3"
									]
								},
								"description": "Comparing premium and OOP values for Magi Tier 4 and Health Grade 4."
							},
							"response": []
						},
						{
							"name": "partAmagiTier4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartApremium = data[0].Premium;\r",
											"var dbpartA_OOP4 = data[0].OOP;\r",
											"\r",
											"\r",
											"//part A premium\r",
											"pm.test(\"Comapre primaryPartApremium4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartAPremium4')).to.equal(dbpartApremium, \"primaryPartApremium4 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartApremium4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartAPremium4')).to.equal(dbpartApremium, \"spousePartApremium4 did not match\");\r",
											"})\r",
											"\r",
											"//partA OOP \r",
											"\r",
											"pm.test(\"Comapre primaryPartAOOP4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartAOOP4')).to.equal(dbpartA_OOP4, \"primaryPartAOOP4 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartAOOP4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartAOOP4')).to.equal(dbpartA_OOP4, \"spousePartAOOP4 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(Current_Age,eq,{{primary_age}})~and(Health_Grade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTA?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTA"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partBmagiTier4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartBpremium = data[0].Premium;\r",
											"var dbpartB_OOP4 = data[0].OOP;\r",
											"\r",
											"var dbpartB_OOP4 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartB_OOP4);\r",
											"\r",
											"//part B OOP\r",
											"var primaryPartBOOP4 = Math.round(pm.environment.get('primaryPartBOOP4'));\r",
											"var spousePartBOOP4 = Math.round(pm.environment.get('spousePartBOOP4'));\r",
											"console.log(\"primaryPartBOOP4 \", + primaryPartBOOP4);\r",
											"console.log(\"spousePartBOOP4 \", + spousePartBOOP4);\r",
											"\r",
											"pm.test(\"Comapre primaryPartBOOP4 matching with the db\", () => {\r",
											"pm.expect(primaryPartBOOP4).to.equal(dbpartB_OOP4, \"primaryPartBOOP4 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartBOOP4 matching with the db\", () => {\r",
											"pm.expect(spousePartBOOP4).to.equal(dbpartB_OOP4, \"spousePartBOOP4 did not match\");\r",
											"})\r",
											"\r",
											"//part B premium\r",
											"pm.test(\"Comapre primaryPartBpremium4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartBPremium4')).to.equal(dbpartBpremium, \"primaryPartBpremium4 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartBpremium4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartBPremium4')).to.equal(dbpartBpremium, \"spousePartBpremium4 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(Income,eq,{{primaryMagiTier}})~and(HealthGrade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTB?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTB"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partDmagiTier4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartDpremium = data[0].Premium;\r",
											"var dbpartD_OOP4 = data[0].OOP;\r",
											"//comparing surcharge with database\r",
											"var partDpremium1 = pm.environment.get(\"dbpartDpremium1\");\r",
											"var surcharge4 = dbpartDpremium-partDpremium1;\r",
											"var dbpremD_mult = pm.environment.get(\"premD_mult\");\r",
											"\r",
											"var primaryPartDPremium4 = Math.round(pm.environment.get('primaryPartDPremium4'));\r",
											"var spousePartDPremium4 = Math.round(pm.environment.get('spousePartDPremium4'));\r",
											"\r",
											"//Base premium*state_multi partD+partDsurcharge\r",
											"var dbpartDpremium = Math.round(partDpremium1*dbpremD_mult+surcharge4);\r",
											"//part D premium \r",
											"pm.test(\"Comapre primaryPartDpremium4 matching with the db\", () => {\r",
											"pm.expect(primaryPartDPremium4).to.equal(dbpartDpremium, \"primaryPartDpremium4 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartDpremium4 matching with the db\", () => {\r",
											"pm.expect(spousePartDPremium4).to.equal(dbpartDpremium, \"spousePartDpremium4 did not match\");\r",
											"})\r",
											"\r",
											"var dbpartD_OOP4 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartD_OOP4);\r",
											"var primaryPartDOOP4 = Math.round(pm.environment.get('primaryPartDOOP4'));\r",
											"var spousePartDOOP4 = Math.round(pm.environment.get('spousePartDOOP4'));\r",
											"\r",
											"//partD OOP verification\r",
											"pm.test(\"Comapre primaryPartDOOP4 matching with the db\", () => {\r",
											"pm.expect(primaryPartDOOP4).to.equal(dbpartD_OOP4, \"primaryPartDOOP4 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartDOOP4 matching with the db\", () => {\r",
											"pm.expect(spousePartDOOP4).to.equal(dbpartD_OOP4, \"spousePartDOOP4 did not match\");\r",
											"})\r",
											"//surcharge verification\r",
											"pm.test(\"Compare primarySurcharge4 for magitier4 matching with the db\", () => {\r",
											"pm.expect(surcharge4).to.equal(pm.environment.get(\"primaryPartDPremiumSurcharge4\"), \"primarySurcharge4 did not match\");\r",
											"})\r",
											"pm.test(\"Compare spouseSurcharge4 for magitier4 matching with the db\", () => {\r",
											"pm.expect(surcharge4).to.equal(pm.environment.get(\"spousePartDPremiumSurcharge4\"), \"spouseSurcharge4 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(Income,eq,{{primaryMagiTier}})~and(healthgrade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTD?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTD"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartFpremium = data[0].Premium;\r",
											"\r",
											"\r",
											"pm.test(\"Comapre primaryPartFpremium4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartFPremium4')).to.equal(dbpartFpremium, \"primaryPartFPremium4 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartFpremium4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartFPremium4')).to.equal(dbpartFpremium, \"spousePartFPremium4 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/part_f_r3?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"part_f_r3"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "planG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartG_OOP4 = data[0].oop;\r",
											"//pm.environment.set(\"dbplanGpremium\",dbplanGpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPlanGOOP4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPlanGOOP4')).to.equal(dbpartG_OOP4, \"primaryPlanGOOP4 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePlanGOOP4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePlanGOOP4')).to.equal(dbpartG_OOP4, \"spousePlanGOOP4 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/plan_g_cost?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"plan_g_cost"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "planN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartN_OOP4 = data[0].oop;\r",
											"//pm.environment.set(\"dbplanNpremium\",dbplanNpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPlanNOOP4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPlanNOOP4')).to.equal(dbpartN_OOP4, \"primaryPlanNOOP4 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePlanNOOP4 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePlanNOOP4')).to.equal(dbpartN_OOP4, \"spousePlanNOOP4 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/plan_n_cost?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"plan_n_cost"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "famTotMagiTier5_HG5",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('primaryMagiTier', '5');\r",
											"pm.environment.set('spouseMagiTier', '5');\r",
											"pm.environment.set('primaryHealthGrade', '5');\r",
											"pm.environment.set('spouseHealthGrade', '5')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"var data = JSON.parse(responseBody);\r",
											"var BD = data.primaryBirthDate; \r",
											"var bit = BD.split('-'); \r",
											"var primary_birthmonth = Number(bit[0]); \r",
											"var primary_birthyear = Number(bit[1]); \r",
											"// console.log(primary_birthyear); \r",
											"var current_date = new Date(); \r",
											"var primary_age = current_date.getFullYear() - primary_birthyear; \r",
											"if (current_date.getMonth() < primary_birthmonth) {primary_age -= 1;} \r",
											"console.log(primary_age); \r",
											"pm.environment.set(\"primary_age\", primary_age);\r",
											"var year = data.familyTotalExpenses[0].year;\r",
											"pm.environment.set(\"year\", year);\r",
											"\r",
											"\r",
											"//partA premium verification\r",
											"var primaryPartAPremium = data.familyTotalExpenses[0].primaryPartAPremium\r",
											"pm.environment.set(\"primaryPartAPremium5\", primaryPartAPremium);\r",
											"var spousePartAPremium = data.familyTotalExpenses[0].spousePartAPremium;\r",
											"pm.environment.set(\"spousePartAPremium5\", spousePartAPremium);\r",
											"//partA OOP verification\r",
											"var primaryPartAOOP = data.familyTotalExpenses[0].primaryPartAOOP;\r",
											"pm.environment.set(\"primaryPartAOOP5\", primaryPartAOOP);\r",
											"var spousePartAOOP = data.familyTotalExpenses[0].spousePartAOOP;\r",
											"pm.environment.set(\"spousePartAOOP5\", spousePartAOOP);\r",
											"\r",
											"//partB premium verification\r",
											"var primaryPartBPremium = data.familyTotalExpenses[0].primaryPartBPremium;\r",
											"pm.environment.set(\"primaryPartBPremium5\", primaryPartBPremium);\r",
											"var spousePartBPremium = data.familyTotalExpenses[0].spousePartBPremium;\r",
											"pm.environment.set('spousePartBPremium5', spousePartBPremium);\r",
											"\r",
											"//setting primary and spouse surcharge in the environment\r",
											"var primaryPartDPremiumSurcharge = data.familyTotalExpenses[0].primaryPartDPremiumSurcharge;\r",
											"pm.environment.set(\"primaryPartDPremiumSurcharge5\", primaryPartDPremiumSurcharge);\r",
											"var spousePartDPremiumSurcharge = data.familyTotalExpenses[0].spousePartDPremiumSurcharge\r",
											"pm.environment.set(\"spousePartDPremiumSurcharge5\", spousePartDPremiumSurcharge);\r",
											"\r",
											"//partB premium verification\r",
											"var primaryPartBPremium = data.familyTotalExpenses[0].primaryPartBPremium;\r",
											"pm.environment.set(\"primaryPartBPremium5\", primaryPartBPremium);\r",
											"var spousePartBPremium = data.familyTotalExpenses[0].spousePartBPremium;\r",
											"pm.environment.set('spousePartBPremium5', spousePartBPremium);\r",
											"\r",
											"//partD premium verification\r",
											"var primaryPartDPremium = data.familyTotalExpenses[0].primaryPartDPremium;\r",
											"pm.environment.set(\"primaryPartDPremium5\", primaryPartDPremium);\r",
											"var spousePartDPremium = data.familyTotalExpenses[0].spousePartDPremium;\r",
											"pm.environment.set('spousePartDPremium5', spousePartDPremium);\r",
											"\r",
											"//partB OOP verification\r",
											"var primaryPartBOOP = data.familyTotalExpenses[0].primaryPartBOOP;\r",
											"pm.environment.set(\"primaryPartBOOP5\", primaryPartBOOP);\r",
											"var spousePartBOOP = data.familyTotalExpenses[0].spousePartBOOP;\r",
											"pm.environment.set('spousePartBOOP5', spousePartBOOP);\r",
											"\r",
											"//partC OOP verification\r",
											"var primaryPartCOOP = data.familyTotalExpenses[0].primaryPartCOOP;\r",
											"pm.environment.set(\"primaryPartCOOP5\", primaryPartCOOP);\r",
											"var spousePartCOOP = data.familyTotalExpenses[0].spousePartCOOP;\r",
											"pm.environment.set(\"spousePartCOOP5\", spousePartCOOP);\r",
											"\r",
											"//partD OOP verification\r",
											"var primaryPartDOOP = data.familyTotalExpenses[0].primaryPartDOOP;\r",
											"pm.environment.set(\"primaryPartDOOP5\", primaryPartDOOP);\r",
											"var spousePartDOOP = data.familyTotalExpenses[0].spousePartDOOP;\r",
											"pm.environment.set('spousePartDOOP5', spousePartDOOP);\r",
											"\r",
											"//partF premium verification\r",
											"var primaryPartFPremium = data.familyTotalExpenses[0].primaryPartFPremium;\r",
											"pm.environment.set(\"primaryPartFPremium5\", primaryPartFPremium);\r",
											"var spousePartFPremium = data.familyTotalExpenses[0].spousePartFPremium;\r",
											"pm.environment.set(\"spousePartFPremium5\", spousePartFPremium);\r",
											"\r",
											"//partG OOP verification\r",
											"var primaryPlanGOOP = data.familyTotalExpenses[0].primaryPlanGOOP;\r",
											"pm.environment.set(\"primaryPlanGOOP5\", primaryPlanGOOP);\r",
											"var spousePlanGOOP = data.familyTotalExpenses[0].spousePlanGOOP;\r",
											"pm.environment.set(\"spousePlanGOOP5\", spousePlanGOOP);\r",
											"\r",
											"//partN OOP verification\r",
											"var primaryPlanNOOP = data.familyTotalExpenses[0].primaryPlanNOOP;\r",
											"pm.environment.set(\"primaryPlanNOOP5\", primaryPlanNOOP);\r",
											"var spousePlanNOOP = data.familyTotalExpenses[0].spousePlanNOOP;\r",
											"pm.environment.set(\"spousePlanNOOP5\", spousePlanNOOP);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"versionId\": \"{{versionId}}\",\n    \"primaryPlanId\": \"{{primaryPlanId}}\",\n    \"primaryBirthDate\": \"{{primaryBirthDate}}\",\n    \"primaryRetirementYear\": \"{{primaryRetirementYear}}\",\n    \"primaryLifeExpectancy\": \"{{primaryLifeExpectancy}}\",\n    \"primarySingleVsMultipleMagi\": \"{{primarySingleVsMultipleMagi}}\",\n    \"primaryMagiTierVsDollarAmount\": \"{{primaryMagiTierVsDollarAmount}}\",\n    \"primaryMagiTier\": \"{{primaryMagiTier}}\",\n    \"primaryTaxFilingStatus\": \"{{primaryTaxFilingStatus}}\",\n    \"primaryMagiDollarAmount\": \"{{primaryMagiDollarAmount}}\",\n    \"primaryHealthGrade\": \"{{primaryHealthGrade}}\",\n    \"primaryStateName\": \"{{primaryStateName}}\",\n    \"primaryZipcode\": \"{{primaryZipcode}}\",\n    \"primaryCountyCode\": \"{{primaryCountyCode}}\",\n    \"primaryRetirementState\": \"{{primaryRetirementState}}\",\n    \"primaryRetirementZipcode\": \"{{primaryRetirementZipcode}}\",\n    \"primaryRetirementCountyCode\": \"{{primaryRetirementCountyCode}}\",\n    \"primaryBoughtPlanA\": \"{{primaryBoughtPlanA}}\",\n    \"primaryReserveDaysUsed\": \"{{primaryReserveDaysUsed}}\",\n    \"primaryDental\": \"{{primaryDental}}\",\n    \"primaryDentalHealthGrade\": \"{{primaryDentalHealthGrade}}\",\n    \"primaryPlanType\": \"{{primaryPlanType}}\",\n    \"primaryTobacco\": \"{{primaryTobacco}}\",\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\n    \"spousePlanId\": \"{{spousePlanId}}\",\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\n    \"spouseLifeExpectancy\": \"{{spouseLifeExpectancy}}\",\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\n    \"spouseMagiTier\": \"{{spouseMagiTier}}\",\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\n    \"spouseMagiDollarAmount\": \"{{spouseMagiDollarAmount}}\",\n    \"spouseHealthGrade\": \"{{spouseHealthGrade}}\",\n    \"spouseStateName\": \"{{spouseStateName}}\",\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\n    \"spouseReserveDaysUsed\": \"{{spouseReserveDaysUsed}}\",\n    \"spouseDental\": \"{{spouseDental}}\",\n    \"spouseDentalHealthGrade\": \"{{spouseDentalHealthGrade}}\",\n    \"spousePlanType\": \"{{spousePlanType}}\",\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\n}"
								},
								"url": {
									"raw": "{{server}}/familyTotalExpensesR3",
									"host": [
										"{{server}}"
									],
									"path": [
										"familyTotalExpensesR3"
									]
								},
								"description": "Comparing premium and OOP values for Magi Tier 5 and Health Grade 5."
							},
							"response": []
						},
						{
							"name": "partAmagiTier5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartApremium = data[0].Premium;\r",
											"var dbpartA_OOP5 = data[0].OOP;\r",
											"var dbpartA_OOP5 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartA_OOP5)\r",
											"\r",
											"//part A premium\r",
											"pm.test(\"Comapre primaryPartApremium5 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartAPremium5')).to.equal(dbpartApremium, \"primaryPartApremium5 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartApremium5 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartAPremium5')).to.equal(dbpartApremium, \"spousePartApremium5 did not match\");\r",
											"})\r",
											"\r",
											"//partA OOP\r",
											"var primaryPartAOOP5 = Math.round(pm.environment.get('primaryPartAOOP5'));\r",
											"var spousePartAOOP5 = Math.round(pm.environment.get('spousePartAOOP5'));\r",
											"\r",
											"pm.test(\"Comapre primaryPartAOOP5 matching with the db\", () => {\r",
											"pm.expect(primaryPartAOOP5).to.equal(dbpartA_OOP5, \"primaryPartAOOP5 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartAOOP5 matching with the db\", () => {\r",
											"pm.expect(spousePartAOOP5).to.equal(dbpartA_OOP5, \"spousePartAOOP5 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(Current_Age,eq,{{primary_age}})~and(Health_Grade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTA?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTA"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partBmagiTier5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartBpremium = data[0].Premium;\r",
											"var dbpartB_OOP5 = data[0].OOP;\r",
											"\r",
											"var dbpartB_OOP5 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartB_OOP5);\r",
											"\r",
											"//part B OOP\r",
											"var primaryPartBOOP5 = Math.round(pm.environment.get('primaryPartBOOP5'));\r",
											"var spousePartBOOP5 = Math.round(pm.environment.get('spousePartBOOP5'));\r",
											"console.log(\"primaryPartBOOP5 \", + primaryPartBOOP5);\r",
											"console.log(\"spousePartBOOP5 \", + spousePartBOOP5);\r",
											"\r",
											"pm.test(\"Comapre primaryPartBOOP5 matching with the db\", () => {\r",
											"pm.expect(primaryPartBOOP5).to.equal(dbpartB_OOP5, \"primaryPartBOOP5 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartBOOP5 matching with the db\", () => {\r",
											"pm.expect(spousePartBOOP5).to.equal(dbpartB_OOP5, \"spousePartBOOP5 did not match\");\r",
											"})\r",
											"\r",
											"//part B premium\r",
											"pm.test(\"Comapre primaryPartBpremium5 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartBPremium5')).to.equal(dbpartBpremium, \"primaryPartBpremium5 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartBpremium5 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartBPremium5')).to.equal(dbpartBpremium, \"spousePartBpremium5 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(Income,eq,{{primaryMagiTier}})~and(HealthGrade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTB?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTB"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partDmagiTier5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartDpremium = data[0].Premium;\r",
											"var dbpartD_OOP5 = data[0].OOP;\r",
											"//comparing surcharge with database\r",
											"var partDpremium1 = pm.environment.get(\"dbpartDpremium1\");\r",
											"var surcharge5 = dbpartDpremium-partDpremium1;\r",
											"var dbpremD_mult = pm.environment.get(\"premD_mult\");\r",
											"\r",
											"var primaryPartDPremium5 = Math.round(pm.environment.get('primaryPartDPremium5'));\r",
											"var spousePartDPremium5 = Math.round(pm.environment.get('spousePartDPremium5'));\r",
											"\r",
											"//Base premium*state_multi partD+partDsurcharge\r",
											"var dbpartDpremium = Math.round(partDpremium1*dbpremD_mult+surcharge5);\r",
											"//part D premium \r",
											"pm.test(\"Comapre primaryPartDpremium5 matching with the db\", () => {\r",
											"pm.expect(primaryPartDPremium5).to.equal(dbpartDpremium, \"primaryPartDpremium5 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartDpremium5 matching with the db\", () => {\r",
											"pm.expect(spousePartDPremium5).to.equal(dbpartDpremium, \"spousePartDpremium5 did not match\");\r",
											"})\r",
											"\r",
											"var dbpartD_OOP5 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartD_OOP5);\r",
											"var primaryPartDOOP5 = Math.round(pm.environment.get('primaryPartDOOP5'));\r",
											"var spousePartDOOP5 = Math.round(pm.environment.get('spousePartDOOP5'));\r",
											"\r",
											"//partD OOP verification\r",
											"pm.test(\"Comapre primaryPartDOOP5 matching with the db\", () => {\r",
											"pm.expect(primaryPartDOOP5).to.equal(dbpartD_OOP5, \"primaryPartDOOP5 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartDOOP5 matching with the db\", () => {\r",
											"pm.expect(spousePartDOOP5).to.equal(dbpartD_OOP5, \"spousePartDOOP5 did not match\");\r",
											"})\r",
											"//surcharge verification\r",
											"pm.test(\"Compare primarySurcharge5 for magitier5 matching with the db\", () => {\r",
											"pm.expect(surcharge5).to.equal(pm.environment.get(\"primaryPartDPremiumSurcharge5\"), \"primarySurcharge5 did not match\");\r",
											"})\r",
											"pm.test(\"Compare spouseSurcharge5 for magitier5 matching with the db\", () => {\r",
											"pm.expect(surcharge5).to.equal(pm.environment.get(\"spousePartDPremiumSurcharge5\"), \"spouseSurcharge5 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(Income,eq,{{primaryMagiTier}})~and(healthgrade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTD?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTD"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartFpremium = data[0].Premium;\r",
											"\r",
											"\r",
											"pm.test(\"Comapare primaryPartFpremium5 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartFPremium5')).to.equal(dbpartFpremium, \"primaryPartFPremium5 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartFpremium5 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartFPremium5')).to.equal(dbpartFpremium, \"spousePartFPremium5 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/part_f_r3?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"part_f_r3"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "planG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartG_OOP5 = data[0].oop;\r",
											"//pm.environment.set(\"dbplanGpremium\",dbplanGpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPlanGOOP5 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPlanGOOP5')).to.equal(dbpartG_OOP5, \"primaryPlanGOOP5 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePlanGOOP5 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePlanGOOP5')).to.equal(dbpartG_OOP5, \"spousePlanGOOP5 did not match\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/plan_g_cost?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"plan_g_cost"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "planN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartN_OOP5 = data[0].oop;\r",
											"//pm.environment.set(\"dbplanNpremium\",dbplanNpremium);\r",
											"\r",
											"pm.test(\"Comapre primaryPlanNOOP5 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPlanNOOP5')).to.equal(dbpartN_OOP5, \"primaryPlanNOOP5 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePlanNOOP5 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePlanNOOP5')).to.equal(dbpartN_OOP5, \"spousePlanNOOP5 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"//Unsetting all the variables used\r",
											"pm.environment.unset('primaryPartBOOP1');\r",
											"pm.environment.unset('spousePartBOOP1');\r",
											"pm.environment.unset('primaryPartCOOP1');\r",
											"pm.environment.unset('spousePartCOOP1');\r",
											"pm.environment.unset('primaryPartDOOP1');\r",
											"pm.environment.unset('spousePartDOOP1');\r",
											"pm.environment.unset('primaryPlanGOOP1');\r",
											"pm.environment.unset('spousePlanGOOP1');\r",
											"pm.environment.unset('primaryPlanNOOP1');\r",
											"pm.environment.unset('spousePlanNOOP1');\r",
											"pm.environment.unset('dbpartB_OOP1');\r",
											"pm.environment.unset('dbpartC_OOP1');\r",
											"pm.environment.unset('dbpartD_OOP1');\r",
											"pm.environment.unset('primaryPartBOOP2');\r",
											"pm.environment.unset('spousePartBOOP2');\r",
											"pm.environment.unset('primaryPartCOOP2');\r",
											"pm.environment.unset('spousePartCOOP2');\r",
											"pm.environment.unset('primaryPartDOOP2');\r",
											"pm.environment.unset('spousePartDOOP2');\r",
											"pm.environment.unset('primaryPlanGOOP2');\r",
											"pm.environment.unset('spousePlanGOOP2');\r",
											"pm.environment.unset('primaryPlanNOOP2');\r",
											"pm.environment.unset('spousePlanNOOP2');\r",
											"pm.environment.unset('dbpartB_OOP2');\r",
											"pm.environment.unset('dbpartC_OOP2');\r",
											"pm.environment.unset('dbpartD_OOP2');\r",
											"pm.environment.unset('primaryPartBOOP3');\r",
											"pm.environment.unset('spousePartBOOP3');\r",
											"pm.environment.unset('primaryPartCOOP3');\r",
											"pm.environment.unset('spousePartCOOP3');\r",
											"pm.environment.unset('primaryPartDOOP3');\r",
											"pm.environment.unset('spousePartDOOP3');\r",
											"pm.environment.unset('primaryPlanGOOP3');\r",
											"pm.environment.unset('spousePlanGOOP3');\r",
											"pm.environment.unset('primaryPlanNOOP3');\r",
											"pm.environment.unset('spousePlanNOOP3');\r",
											"pm.environment.unset('dbpartB_OOP3');\r",
											"pm.environment.unset('dbpartC_OOP3');\r",
											"pm.environment.unset('dbpartD_OOP3');\r",
											"pm.environment.unset('primaryPartBOOP4');\r",
											"pm.environment.unset('spousePartBOOP4');\r",
											"pm.environment.unset('primaryPartCOOP4');\r",
											"pm.environment.unset('spousePartCOOP4');\r",
											"pm.environment.unset('primaryPartDOOP4');\r",
											"pm.environment.unset('spousePartDOOP4');\r",
											"pm.environment.unset('primaryPlanGOOP4');\r",
											"pm.environment.unset('spousePlanGOOP4');\r",
											"pm.environment.unset('primaryPlanNOOP4');\r",
											"pm.environment.unset('spousePlanNOOP4');\r",
											"pm.environment.unset('dbpartB_OOP4');\r",
											"pm.environment.unset('dbpartC_OOP4');\r",
											"pm.environment.unset('dbpartD_OOP4');\r",
											"pm.environment.unset('primaryPartBOOP5');\r",
											"pm.environment.unset('spousePartBOOP5');\r",
											"pm.environment.unset('primaryPartCOOP5');\r",
											"pm.environment.unset('spousePartCOOP5');\r",
											"pm.environment.unset('primaryPartDOOP5');\r",
											"pm.environment.unset('spousePartDOOP5');\r",
											"pm.environment.unset('primaryPlanGOOP5');\r",
											"pm.environment.unset('spousePlanGOOP5');\r",
											"pm.environment.unset('primaryPlanNOOP5');\r",
											"pm.environment.unset('spousePlanNOOP5');\r",
											"pm.environment.unset('dbpartB_OOP5');\r",
											"pm.environment.unset('dbpartC_OOP5');\r",
											"pm.environment.unset('dbpartD_OOP5');\r",
											"pm.environment.unset('query');\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(state,eq,{{primaryRetirementState}})~and(age_then_year,eq,{{year}})~and(age_now,eq,{{primary_age}})~and(current_health_grade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/plan_n_cost?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"plan_n_cost"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "famTotMagiTier6",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('primaryMagiTier', '6');\r",
											"pm.environment.set('spouseMagiTier', '6');\r",
											"pm.environment.set('primaryHealthGrade', '5');\r",
											"pm.environment.set('spouseHealthGrade', '5')\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"var data = JSON.parse(responseBody);\r",
											"var BD = data.primaryBirthDate; \r",
											"var bit = BD.split('-'); \r",
											"var primary_birthmonth = Number(bit[0]); \r",
											"var primary_birthyear = Number(bit[1]); \r",
											"// console.log(primary_birthyear); \r",
											"var current_date = new Date(); \r",
											"var primary_age = current_date.getFullYear() - primary_birthyear; \r",
											"if (current_date.getMonth() < primary_birthmonth) {primary_age -= 1;} \r",
											"console.log(primary_age); \r",
											"pm.environment.set(\"primary_age\", primary_age);\r",
											"var year = data.familyTotalExpenses[0].year;\r",
											"pm.environment.set(\"year\", year);\r",
											"\r",
											"\r",
											"//partA premium verification\r",
											"var primaryPartAPremium = data.familyTotalExpenses[0].primaryPartAPremium\r",
											"pm.environment.set(\"primaryPartAPremium6\", primaryPartAPremium);\r",
											"var spousePartAPremium = data.familyTotalExpenses[0].spousePartAPremium;\r",
											"pm.environment.set(\"spousePartAPremium6\", spousePartAPremium);\r",
											"//partA OOP verification\r",
											"var primaryPartAOOP = data.familyTotalExpenses[0].primaryPartAOOP;\r",
											"pm.environment.set(\"primaryPartAOOP6\", primaryPartAOOP);\r",
											"var spousePartAOOP = data.familyTotalExpenses[0].spousePartAOOP;\r",
											"pm.environment.set(\"spousePartAOOP6\", spousePartAOOP);\r",
											"\r",
											"//partB premium verification\r",
											"var primaryPartBPremium = data.familyTotalExpenses[0].primaryPartBPremium;\r",
											"pm.environment.set(\"primaryPartBPremium6\", primaryPartBPremium);\r",
											"var spousePartBPremium = data.familyTotalExpenses[0].spousePartBPremium;\r",
											"pm.environment.set('spousePartBPremium6', spousePartBPremium);\r",
											"\r",
											"//partB OOP verification\r",
											"var primaryPartBOOP = data.familyTotalExpenses[0].primaryPartBOOP;\r",
											"pm.environment.set(\"primaryPartBOOP6\", primaryPartBOOP);\r",
											"var spousePartBOOP = data.familyTotalExpenses[0].spousePartBOOP;\r",
											"pm.environment.set('spousePartBOOP6', spousePartBOOP);\r",
											"\r",
											"//setting primary and spouse surcharge in the environment\r",
											"var primaryPartDPremiumSurcharge = data.familyTotalExpenses[0].primaryPartDPremiumSurcharge;\r",
											"pm.environment.set(\"primaryPartDPremiumSurcharge6\", primaryPartDPremiumSurcharge);\r",
											"var spousePartDPremiumSurcharge = data.familyTotalExpenses[0].spousePartDPremiumSurcharge\r",
											"pm.environment.set(\"spousePartDPremiumSurcharge6\", spousePartDPremiumSurcharge);\r",
											"\r",
											"//partD premium verification\r",
											"var primaryPartDPremium = data.familyTotalExpenses[0].primaryPartDPremium;\r",
											"pm.environment.set(\"primaryPartDPremium6\", primaryPartDPremium);\r",
											"var spousePartDPremium = data.familyTotalExpenses[0].spousePartDPremium;\r",
											"pm.environment.set('spousePartDPremium6', spousePartDPremium);\r",
											"\r",
											"//partD OOP verification\r",
											"var primaryPartDOOP = data.familyTotalExpenses[0].primaryPartDOOP;\r",
											"pm.environment.set(\"primaryPartDOOP6\", primaryPartDOOP);\r",
											"var spousePartDOOP = data.familyTotalExpenses[0].spousePartDOOP;\r",
											"pm.environment.set('spousePartDOOP6', spousePartDOOP);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"versionId\": \"{{versionId}}\",\n    \"primaryPlanId\": \"{{primaryPlanId}}\",\n    \"primaryBirthDate\": \"{{primaryBirthDate}}\",\n    \"primaryRetirementYear\": \"{{primaryRetirementYear}}\",\n    \"primaryLifeExpectancy\": \"{{primaryLifeExpectancy}}\",\n    \"primarySingleVsMultipleMagi\": \"{{primarySingleVsMultipleMagi}}\",\n    \"primaryMagiTierVsDollarAmount\": \"{{primaryMagiTierVsDollarAmount}}\",\n    \"primaryMagiTier\": \"{{primaryMagiTier}}\",\n    \"primaryTaxFilingStatus\": \"{{primaryTaxFilingStatus}}\",\n    \"primaryMagiDollarAmount\": \"{{primaryMagiDollarAmount}}\",\n    \"primaryHealthGrade\": \"{{primaryHealthGrade}}\",\n    \"primaryStateName\": \"{{primaryStateName}}\",\n    \"primaryZipcode\": \"{{primaryZipcode}}\",\n    \"primaryCountyCode\": \"{{primaryCountyCode}}\",\n    \"primaryRetirementState\": \"{{primaryRetirementState}}\",\n    \"primaryRetirementZipcode\": \"{{primaryRetirementZipcode}}\",\n    \"primaryRetirementCountyCode\": \"{{primaryRetirementCountyCode}}\",\n    \"primaryBoughtPlanA\": \"{{primaryBoughtPlanA}}\",\n    \"primaryReserveDaysUsed\": \"{{primaryReserveDaysUsed}}\",\n    \"primaryDental\": \"{{primaryDental}}\",\n    \"primaryDentalHealthGrade\": \"{{primaryDentalHealthGrade}}\",\n    \"primaryPlanType\": \"{{primaryPlanType}}\",\n    \"primaryTobacco\": \"{{primaryTobacco}}\",\n    \"spouseIncluded\": \"{{spouseIncluded}}\",\n    \"spousePlanId\": \"{{spousePlanId}}\",\n    \"spouseBirthDate\": \"{{spouseBirthDate}}\",\n    \"spouseRetirementYear\": \"{{spouseRetirementYear}}\",\n    \"spouseLifeExpectancy\": \"{{spouseLifeExpectancy}}\",\n    \"spouseSingleVsMultipleMagi\": \"{{spouseSingleVsMultipleMagi}}\",\n    \"spouseMagiTierVsDollarAmount\": \"{{spouseMagiTierVsDollarAmount}}\",\n    \"spouseMagiTier\": \"{{spouseMagiTier}}\",\n    \"spouseTaxFilingStatus\": \"{{spouseTaxFilingStatus}}\",\n    \"spouseMagiDollarAmount\": \"{{spouseMagiDollarAmount}}\",\n    \"spouseHealthGrade\": \"{{spouseHealthGrade}}\",\n    \"spouseStateName\": \"{{spouseStateName}}\",\n    \"spouseZipcode\": \"{{spouseZipcode}}\",\n    \"spouseCountyCode\": \"{{spouseCountyCode}}\",\n    \"spouseRetirementState\": \"{{spouseRetirementState}}\",\n    \"spouseRetirementZipcode\": \"{{spouseRetirementZipcode}}\",\n    \"spouseRetirementCountyCode\": \"{{spouseRetirementCountyCode}}\",\n    \"spouseBoughtPlanA\": \"{{spouseBoughtPlanA}}\",\n    \"spouseReserveDaysUsed\": \"{{spouseReserveDaysUsed}}\",\n    \"spouseDental\": \"{{spouseDental}}\",\n    \"spouseDentalHealthGrade\": \"{{spouseDentalHealthGrade}}\",\n    \"spousePlanType\": \"{{spousePlanType}}\",\n    \"spouseTobacco\": \"{{spouseTobacco}}\",\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\n    \"primaryYearWiseMagiDetailList\": {{primaryYearWiseMagiDetailList}},\n    \"spouseYearWiseMagiDetailList\": {{spouseYearWiseMagiDetailList}}\n}"
								},
								"url": {
									"raw": "{{server}}/familyTotalExpensesR3",
									"host": [
										"{{server}}"
									],
									"path": [
										"familyTotalExpensesR3"
									]
								},
								"description": "Comparing premium and OOP values for Magi Tier 6 and Health Grade 6."
							},
							"response": []
						},
						{
							"name": "partAmagiTier6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartApremium = data[0].Premium;\r",
											"var dbpartA_OOP6 = data[0].OOP;\r",
											"var dbpartA_OOP6 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartA_OOP6)\r",
											"\r",
											"//part A premium\r",
											"pm.test(\"Comapre primaryPartApremium6 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartAPremium6')).to.equal(dbpartApremium, \"primaryPartApremium6 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartApremium6 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartAPremium6')).to.equal(dbpartApremium, \"spousePartApremium6 did not match\");\r",
											"})\r",
											"\r",
											"//partA OOP\r",
											"var primaryPartAOOP6 = Math.round(pm.environment.get('primaryPartAOOP6'));\r",
											"var spousePartAOOP6 = Math.round(pm.environment.get('spousePartAOOP6'));\r",
											"\r",
											"pm.test(\"Comapre primaryPartAOOP6 matching with the db\", () => {\r",
											"pm.expect(primaryPartAOOP6).to.equal(dbpartA_OOP6, \"primaryPartAOOP6 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartAOOP6 matching with the db\", () => {\r",
											"pm.expect(spousePartAOOP6).to.equal(dbpartA_OOP6, \"spousePartAOOP6 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(Current_Age,eq,{{primary_age}})~and(Health_Grade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTA?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTA"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partBmagiTier6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartBpremium = data[0].Premium;\r",
											"var dbpartB_OOP6 = data[0].OOP;\r",
											"\r",
											"var dbpartB_OOP6 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartB_OOP6);\r",
											"\r",
											"//part B OOP\r",
											"var primaryPartBOOP6 = Math.round(pm.environment.get('primaryPartBOOP6'));\r",
											"var spousePartBOOP6 = Math.round(pm.environment.get('spousePartBOOP6'));\r",
											"console.log(\"primaryPartBOOP6 \", + primaryPartBOOP6);\r",
											"console.log(\"spousePartBOOP6 \", + spousePartBOOP6);\r",
											"\r",
											"pm.test(\"Comapre primaryPartBOOP6 matching with the db\", () => {\r",
											"pm.expect(primaryPartBOOP6).to.equal(dbpartB_OOP6, \"primaryPartBOOP6 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartBOOP6 matching with the db\", () => {\r",
											"pm.expect(spousePartBOOP6).to.equal(dbpartB_OOP6, \"spousePartBOOP6 did not match\");\r",
											"})\r",
											"\r",
											"//part B premium\r",
											"pm.test(\"Comapre primaryPartBpremium6 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('primaryPartBPremium6')).to.equal(dbpartBpremium, \"primaryPartBpremium6 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartBpremium6 matching with the db\", () => {\r",
											"pm.expect(pm.environment.get('spousePartBPremium6')).to.equal(dbpartBpremium, \"spousePartBpremium6 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(Income,eq,{{primaryMagiTier}})~and(HealthGrade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTB?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTB"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "partDmagiTier6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = JSON.parse(responseBody);\r",
											"var dbpartDpremium = data[0].Premium;\r",
											"var dbpartD_OOP6 = data[0].OOP;\r",
											"//comparing surcharge with database\r",
											"var partDpremium1 = pm.environment.get(\"dbpartDpremium1\");\r",
											"var surcharge6 = dbpartDpremium-partDpremium1;\r",
											"var dbpremD_mult = pm.environment.get(\"premD_mult\");\r",
											"\r",
											"var primaryPartDPremium6 = Math.round(pm.environment.get('primaryPartDPremium6'));\r",
											"var spousePartDPremium6 = Math.round(pm.environment.get('spousePartDPremium6'));\r",
											"\r",
											"//Base premium*state_multi partD+partDsurcharge\r",
											"var dbpartDpremium = Math.round(partDpremium1*dbpremD_mult+surcharge6);\r",
											"//part D premium \r",
											"pm.test(\"Comapre primaryPartDpremium6 matching with the db\", () => {\r",
											"pm.expect(primaryPartDPremium6).to.equal(dbpartDpremium, \"primaryPartDpremium6 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartDpremium6 matching with the db\", () => {\r",
											"pm.expect(spousePartDPremium6).to.equal(dbpartDpremium, \"spousePartDpremium6 did not match\");\r",
											"})\r",
											"\r",
											"var dbpartD_OOP6 = Math.round((pm.environment.get(\"OOP_MULT\"))*dbpartD_OOP6);\r",
											"var primaryPartDOOP6 = Math.round(pm.environment.get('primaryPartDOOP6'));\r",
											"var spousePartDOOP6 = Math.round(pm.environment.get('spousePartDOOP6'));\r",
											"\r",
											"//partD OOP verification\r",
											"pm.test(\"Comapre primaryPartDOOP6 matching with the db\", () => {\r",
											"pm.expect(primaryPartDOOP6).to.equal(dbpartD_OOP6, \"primaryPartDOOP6 did not match\");\r",
											"})\r",
											"\r",
											"pm.test(\"Compare spousePartDOOP6 matching with the db\", () => {\r",
											"pm.expect(spousePartDOOP6).to.equal(dbpartD_OOP6, \"spousePartDOOP6 did not match\");\r",
											"})\r",
											"//surcharge verification\r",
											"pm.test(\"Compare primarySurcharge6 for magitier6 matching with the db\", () => {\r",
											"pm.expect(surcharge6).to.equal(pm.environment.get(\"primaryPartDPremiumSurcharge6\"), \"primarySurcharge6 did not match\");\r",
											"})\r",
											"pm.test(\"Compare spouseSurcharge6 for magitier6 matching with the db\", () => {\r",
											"pm.expect(surcharge6).to.equal(pm.environment.get(\"spousePartDPremiumSurcharge6\"), \"spouseSurcharge6 did not match\");\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.clear();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.environment.set(\"query\", \"_where=(year,eq,{{year}})~and(age,eq,{{primary_age}})~and(Income,eq,{{primaryMagiTier}})~and(healthgrade,eq,{{primaryHealthGrade}})\");\r",
											"\r",
											"setTimeout(function(){}, 500);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/PARTD?{{query}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"PARTD"
									],
									"query": [
										{
											"key": "{{query}}",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "IndividualMedicareR3_Premiums_OOPs",
			"item": [
				{
					"name": "IndividualMedicareR3_Magi1__HealthGrade1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var BD = response.birthDate;\r",
									"var bit = BD.split('-');\r",
									"var birthmonth = Number(bit[0]);\r",
									"var birthyear = Number(bit[1]);\r",
									"// console.log(birthyear);\r",
									"var current_date = new Date();\r",
									"var age = current_date.getFullYear() - birthyear;\r",
									"if (current_date.getMonth() < birthmonth) { age -= 1; }\r",
									"\r",
									"console.log(age);\r",
									"postman.setEnvironmentVariable(\"age\", age);\r",
									"\r",
									"postman.setEnvironmentVariable(\"year\", (response.individualMedicares[0].year));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartAPremium\", Math.round(response.individualMedicares[0].partAPremium));\r",
									"postman.setEnvironmentVariable(\"PartBPremium\", (response.individualMedicares[0].partBPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartBOOP\", Math.round(response.individualMedicares[0].partBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartDPremium\",Math.round(response.individualMedicares[0].partDPremium));\r",
									"postman.setEnvironmentVariable(\"PartDOOP\", Math.round(response.individualMedicares[0].partDOOP ));\r",
									"postman.setEnvironmentVariable(\"PartFPremium\", (response.individualMedicares[0].partFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PlanGPremium\", (response.individualMedicares[0].planGPremium));\r",
									"postman.setEnvironmentVariable(\"PlanGOOP\", (response.individualMedicares[0].planGOOP));\r",
									"postman.setEnvironmentVariable(\"PlanNPremium\", (response.individualMedicares[0].planNPremium));\r",
									"postman.setEnvironmentVariable(\"PlanNOOP\", (response.individualMedicares[0].planNOOP));\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"{\r",
									"    pm.globals.set(\"server\", \"https://publicplan.aivante.net/aivante/NewFinancialPlanner/api/v1/\"),\r",
									"postman.setEnvironmentVariable(\"versionId\", \"1\"),\r",
									"\r",
									"postman.setEnvironmentVariable(\"birthDate\", \"01-1955\"),\r",
									"postman.setEnvironmentVariable(\"retirementYear\", \"01-2021\"),\r",
									"\r",
									"postman.setEnvironmentVariable(\"lifeExpectancy\", \"95\"),\r",
									"\r",
									"postman.setEnvironmentVariable(\"healthGrade\", \"1\"),\r",
									"postman.setEnvironmentVariable(\"singleVsMultipleMagi\", \"false\"),\r",
									"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\", \"false\"),\r",
									"postman.setEnvironmentVariable(\"magiTier\", \"1\"),\r",
									"postman.setEnvironmentVariable(\"taxFilingStatus\", \"MARRIED_FILING_JOINTLY\"),\r",
									"postman.setEnvironmentVariable(\"magiDollarAmount\", \"180000\"),\r",
									"postman.setEnvironmentVariable(\"stateName\", \"Colorado\"),\r",
									"postman.setEnvironmentVariable(\"zipcode\", \"80134\"),\r",
									"postman.setEnvironmentVariable(\"countyCode\", \"8035\"),\r",
									"postman.setEnvironmentVariable(\"retirementState\", \"Colorado\")\r",
									"postman.setEnvironmentVariable(\"retirementZipcode\", \"80134\")\r",
									"postman.setEnvironmentVariable(\"retirementCountyCode\", \"8035\"),\r",
									"postman.setEnvironmentVariable(\"boughtPlanA\", \"true\"),\r",
									"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\", \"false\"),\r",
									"postman.setEnvironmentVariable(\"reserveDaysUsed\", \"0\"),\r",
									"postman.setEnvironmentVariable(\"dental\", \"true\")\r",
									"postman.setEnvironmentVariable(\"dentalHealthGrade\", \"1\"),\r",
									"postman.setEnvironmentVariable(\"tobacco\", \"false\"),\r",
									"postman.setEnvironmentVariable(\"yearWiseMagiDetailList\", '[{\"year\":2020 , \"magiTier\": 1, \"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"65000\"}, {\"year\":2021 , \"magiTier\": 2,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"95000\"}, {\"year\":2022 , \"magiTier\": 3,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"110000\"},  {\"year\":2023 , \"magiTier\": 4,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"140000\"},{\"year\":2024,  \"magiTier\": 5,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"200000\"}, {\"year\":2025 , \"magiTier\": 6,\"taxFilingStatus\":\"FILING_INDIVIDUALLY\", \"magiDollarAmount\":\"501000\"}]');\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": \"{{versionId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": \"{{lifeExpectancy}}\",\r\n    \"singleVsMultipleMagi\": \"{{singleVsMultipleMagi}}\",\r\n    \"magiTierVsDollarAmount\": \"{{magiTierVsDollarAmount}}\",\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"healthGrade\":\"{{healthGrade}}\",\r\n    \"magiDollarAmount\": \"{{magiDollarAmount}}\",\r\n    \"magiTier\": \"{{magiTier}}\",\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": \"{{zipcode}}\",\r\n    \"countyCode\": \"{{countyCode}}\",\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": \"{{retirementZipcode}}\",\r\n    \"retirementCountyCode\":\"{{retirementCountyCode}}\",\r\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\r\n    \"boughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"reserveDaysUsed\": \"{{reserveDaysUsed}}\",\r\n    \"dental\": \"{{dental}}\",\r\n    \"dentalHealthGrade\": \"{{dentalHealthGrade}}\",\r\n    \"tobacco\": \"{{tobacco}}\"\r\n}\r\n    "
						},
						"url": {
							"raw": "{{server}}/individualMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"individualMedicareR3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_STATE_MULT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"premD_mult\", (response[0].premD_mult));\r",
									"postman.setEnvironmentVariable(\"OOP_mult\", (response[0].OOP_mult));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(State,eq,{{stateName}})&_fields=State,premC_mult,premD_mult,OOP_mult,premF_mult,Dental_mult\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/STATE_MULT?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"STATE_MULT"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG1_PARTA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartAPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartAPremium'))).to.equal (String(DBPartAPremium, \"PartAPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Current_Age,eq,{{age}})~and(Health_Grade,eq,{{healthGrade}})&_fields=Premium,Year,Current_Age,Health_Grade,OOP\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTA?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTA"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi1_PartB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartBPremium = data[0].Premium;\r",
									"var DBPartBOOP = data[0].OOP;\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartBOOP*OOP_mult));\r",
									"\r",
									"//console.log(\"oop: \"+ oop);\r",
									"\r",
									"pm.test(\"API PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartBPremium'))).to.equal (String(DBPartBPremium, \"primaryPartBPremium did not match\"))\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PartBOOP matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartBOOP'))).to.equal (String(oop,\"PartBOOP did not match\"));\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTB?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTB"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi1_PARTD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var  DBPartDPremium = data[0].Premium;\r",
									"pm.environment.set(\"DBPartDPremium\", DBPartDPremium);\r",
									"var DBPartDOOP = data[0].OOP;\r",
									"var premD_mult = pm.environment.get('premD_mult');\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartDOOP*OOP_mult));\r",
									"console.log(\"oop: \"+ oop);\r",
									"\r",
									"\r",
									"pm.test(\"API PartDPremium matches with PartD DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartDPremium'))).to.equal (String(Math.round(DBPartDPremium*premD_mult), \"PartDPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PartDOOP matches with PartD DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartDOOP'))).to.equal (String(oop, \"PartDOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTD?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTD"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG1_Part_f_r3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartFPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API PartFPremium matches with part_f_r3 DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartFPremium'))).to.equal (String(DBPartFPremium, \"PartFPremium did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=Premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/part_f_r3?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"part_f_r3"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG1_plan_g_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanGPremium = data[0].premium;\r",
									"//console.log(DBPartGPremium);\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API PlanGPremium matches with plan_g_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanGPremium'))).to.equal (String(DBPlanGPremium, \"PlanGPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PlanGOOP matches with plan_g_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanGOOP'))).to.equal (String(DBPlanGOOP, \"PlanGOOP did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_g_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_g_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG1_plan_n_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanNPremium = data[0].premium;\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API PlanNPremium matches with plan_n_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanNPremium'))).to.equal (String(DBPlanNPremium, \"PlanNPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PlanNOOP matches with plan_n_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanNOOP'))).to.equal (String(DBPlanGOOP, \"PlanNOOP did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_n_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_n_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IndividualMedicareR3_Magi2_HealthGrade2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var BD = response.birthDate;\r",
									"var bit = BD.split('-');\r",
									"var birthmonth = Number(bit[0]);\r",
									"var birthyear = Number(bit[1]);\r",
									"// console.log(birthyear);\r",
									"var current_date = new Date();\r",
									"var age = current_date.getFullYear() - birthyear;\r",
									"if (current_date.getMonth() < birthmonth) { age -= 1; }\r",
									"\r",
									"console.log(age);\r",
									"postman.setEnvironmentVariable(\"age\", age);\r",
									"\r",
									"postman.setEnvironmentVariable(\"year\", (response.individualMedicares[0].year));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartAPremium\", Math.round(response.individualMedicares[0].partAPremium));\r",
									"postman.setEnvironmentVariable(\"PartBPremium\", (response.individualMedicares[0].partBPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartBOOP\", Math.round(response.individualMedicares[0].partBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartDPremium2\",Math.round(response.individualMedicares[0].partDPremium));\r",
									"postman.setEnvironmentVariable(\"PartDOOP\", Math.round(response.individualMedicares[0].partDOOP ));\r",
									"postman.setEnvironmentVariable(\"PartFPremium\", (response.individualMedicares[0].partFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PlanGPremium\", (response.individualMedicares[0].planGPremium));\r",
									"postman.setEnvironmentVariable(\"PlanGOOP\", (response.individualMedicares[0].planGOOP));\r",
									"postman.setEnvironmentVariable(\"PlanNPremium\", (response.individualMedicares[0].planNPremium));\r",
									"postman.setEnvironmentVariable(\"PlanNOOP\", (response.individualMedicares[0].planNOOP));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartDPremiumSurcharge\", (response.individualMedicares[0].partDPremiumSurcharge));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"    \r",
									"postman.setEnvironmentVariable(\"healthGrade\", 2)\r",
									"\r",
									"postman.setEnvironmentVariable(\"magiTier\", 2)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": \"{{versionId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": \"{{lifeExpectancy}}\",\r\n    \"singleVsMultipleMagi\": \"{{singleVsMultipleMagi}}\",\r\n    \"magiTierVsDollarAmount\": \"{{magiTierVsDollarAmount}}\",\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"healthGrade\":\"{{healthGrade}}\",\r\n    \"magiDollarAmount\": \"{{magiDollarAmount}}\",\r\n    \"magiTier\": \"{{magiTier}}\",\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": \"{{zipcode}}\",\r\n    \"countyCode\": \"{{countyCode}}\",\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": \"{{retirementZipcode}}\",\r\n    \"retirementCountyCode\":\"{{retirementCountyCode}}\",\r\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\r\n    \"boughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"reserveDaysUsed\": \"{{reserveDaysUsed}}\",\r\n    \"dental\": \"{{dental}}\",\r\n    \"dentalHealthGrade\": \"{{dentalHealthGrade}}\",\r\n    \"tobacco\": \"{{tobacco}}\"\r\n}\r\n    "
						},
						"url": {
							"raw": "{{server}}/individualMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"individualMedicareR3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG2_PARTA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartAPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartAPremium'))).to.equal (String(DBPartAPremium, \"PartAPremium did not match\"));\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Current_Age,eq,{{age}})~and(Health_Grade,eq,{{healthGrade}})&_fields=Premium,Year,Current_Age,Health_Grade,OOP\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTA?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTA"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi2_PartB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartBPremium = data[0].Premium;\r",
									"var DBPartBOOP = data[0].OOP;\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartBOOP*OOP_mult));\r",
									"\r",
									"//console.log(\"oop: \"+ oop);\r",
									"\r",
									"pm.test(\"API PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartBPremium'))).to.equal (String(DBPartBPremium, \"primaryPartBPremium did not match\"))\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PartBOOP matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartBOOP'))).to.equal (String(oop,\"PartBOOP did not match\"));\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTB?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTB"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi2_PARTD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var Sur = pm.environment.get('PartDPremiumSurcharge');\r",
									"var partDPremium1 = pm.environment.get('PartDPremium');\r",
									"console.log(partDPremium1);\r",
									"//var premD_mult = pm.environment.get('premD_mult');\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"\r",
									"//const Dpremium1 = (DBPartDPremium1*premD_mult);\r",
									"console.log(\"Sur: \" + Sur);\r",
									"var Dpremium = +partDPremium1 + +Sur;\r",
									"\r",
									"console.log(\"Dpremium: \" + Dpremium);\r",
									"//var DBPartDPremium = data[0].Premium;\r",
									"\r",
									"var DBPartDOOP = data[0].OOP;\r",
									"\r",
									"var oop = (Math.round(DBPartDOOP * OOP_mult));\r",
									"console.log(\"oop: \" + oop);\r",
									"\r",
									"\r",
									"pm.test(\"API PartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('PartDPremium2'))).to.equal(String(Math.round((Dpremium)), \"PartDPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API PartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('PartDOOP'))).to.equal(String(oop, \"PartDOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTD?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTD"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG2_Part_f_r3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartFPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API PartFPremium matches with part_f_r3 DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartFPremium'))).to.equal (String(DBPartFPremium, \"PartFPremium did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=Premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/part_f_r3?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"part_f_r3"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG2_plan_g_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanGPremium = data[0].premium;\r",
									"//console.log(DBPartGPremium);\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API PlanGPremium matches with plan_g_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanGPremium'))).to.equal (String(DBPlanGPremium, \"PlanGPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PlanGOOP matches with plan_g_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanGOOP'))).to.equal (String(DBPlanGOOP, \"PlanGOOP did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_g_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_g_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG2_plan_n_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanNPremium = data[0].premium;\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API PlanNPremium matches with plan_n_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanNPremium'))).to.equal (String(DBPlanNPremium, \"PlanNPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PlanNOOP matches with plan_n_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanNOOP'))).to.equal (String(DBPlanGOOP, \"PlanNOOP did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_n_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_n_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IndividualMedicareR3_Magi3_HealthGrade3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var BD = response.birthDate;\r",
									"var bit = BD.split('-');\r",
									"var birthmonth = Number(bit[0]);\r",
									"var birthyear = Number(bit[1]);\r",
									"// console.log(birthyear);\r",
									"var current_date = new Date();\r",
									"var age = current_date.getFullYear() - birthyear;\r",
									"if (current_date.getMonth() < birthmonth) { age -= 1; }\r",
									"\r",
									"console.log(age);\r",
									"postman.setEnvironmentVariable(\"age\", age);\r",
									"\r",
									"postman.setEnvironmentVariable(\"year\", (response.individualMedicares[0].year));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartAPremium\", Math.round(response.individualMedicares[0].partAPremium));\r",
									"postman.setEnvironmentVariable(\"PartBPremium\", (response.individualMedicares[0].partBPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartBOOP\", Math.round(response.individualMedicares[0].partBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartDPremium3\",Math.round(response.individualMedicares[0].partDPremium));\r",
									"postman.setEnvironmentVariable(\"PartDOOP\", Math.round(response.individualMedicares[0].partDOOP ));\r",
									"postman.setEnvironmentVariable(\"PartFPremium\", (response.individualMedicares[0].partFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PlanGPremium\", (response.individualMedicares[0].planGPremium));\r",
									"postman.setEnvironmentVariable(\"PlanGOOP\", (response.individualMedicares[0].planGOOP));\r",
									"postman.setEnvironmentVariable(\"PlanNPremium\", (response.individualMedicares[0].planNPremium));\r",
									"postman.setEnvironmentVariable(\"PlanNOOP\", (response.individualMedicares[0].planNOOP));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartDPremiumSurcharge\", (response.individualMedicares[0].partDPremiumSurcharge));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"    \r",
									"postman.setEnvironmentVariable(\"healthGrade\", 3)\r",
									"\r",
									"postman.setEnvironmentVariable(\"magiTier\", 3)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": \"{{versionId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": \"{{lifeExpectancy}}\",\r\n    \"singleVsMultipleMagi\": \"{{singleVsMultipleMagi}}\",\r\n    \"magiTierVsDollarAmount\": \"{{magiTierVsDollarAmount}}\",\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"healthGrade\":\"{{healthGrade}}\",\r\n    \"magiDollarAmount\": \"{{magiDollarAmount}}\",\r\n    \"magiTier\": \"{{magiTier}}\",\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": \"{{zipcode}}\",\r\n    \"countyCode\": \"{{countyCode}}\",\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": \"{{retirementZipcode}}\",\r\n    \"retirementCountyCode\":\"{{retirementCountyCode}}\",\r\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\r\n    \"boughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"reserveDaysUsed\": \"{{reserveDaysUsed}}\",\r\n    \"dental\": \"{{dental}}\",\r\n    \"dentalHealthGrade\": \"{{dentalHealthGrade}}\",\r\n    \"tobacco\": \"{{tobacco}}\"\r\n}\r\n    "
						},
						"url": {
							"raw": "{{server}}/individualMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"individualMedicareR3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG3_PARTA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartAPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartAPremium'))).to.equal (String(DBPartAPremium, \"PartAPremium did not match\"));\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Current_Age,eq,{{age}})~and(Health_Grade,eq,{{healthGrade}})&_fields=Premium,Year,Current_Age,Health_Grade,OOP\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTA?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTA"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi3_PartB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartBPremium = data[0].Premium;\r",
									"var DBPartBOOP = data[0].OOP;\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartBOOP*OOP_mult));\r",
									"\r",
									"//console.log(\"oop: \"+ oop);\r",
									"\r",
									"pm.test(\"API PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartBPremium'))).to.equal (String(DBPartBPremium, \"primaryPartBPremium did not match\"))\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PartBOOP matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartBOOP'))).to.equal (String(oop,\"PartBOOP did not match\"));\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTB?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTB"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi3_PARTD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var Sur = pm.environment.get('PartDPremiumSurcharge');\r",
									"var partDPremium1 = pm.environment.get('PartDPremium');\r",
									"console.log(partDPremium1);\r",
									"//var premD_mult = pm.environment.get('premD_mult');\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"\r",
									"//const Dpremium1 = (DBPartDPremium1*premD_mult);\r",
									"console.log(\"Sur: \" + Sur);\r",
									"var Dpremium = +partDPremium1 + +Sur;\r",
									"\r",
									"console.log(\"Dpremium: \" + Dpremium);\r",
									"//var DBPartDPremium = data[0].Premium;\r",
									"\r",
									"var DBPartDOOP = data[0].OOP;\r",
									"\r",
									"var oop = (Math.round(DBPartDOOP * OOP_mult));\r",
									"console.log(\"oop: \" + oop);\r",
									"\r",
									"\r",
									"pm.test(\"API PartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('PartDPremium3'))).to.equal(String(Math.round((Dpremium)), \"PartDPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API PartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('PartDOOP'))).to.equal(String(oop, \"PartDOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTD?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTD"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG3_Part_f_r3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartFPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API PartFPremium matches with part_f_r3 DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartFPremium'))).to.equal (String(DBPartFPremium, \"PartFPremium did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=Premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/part_f_r3?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"part_f_r3"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG3_plan_g_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanGPremium = data[0].premium;\r",
									"//console.log(DBPartGPremium);\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API PlanGPremium matches with plan_g_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanGPremium'))).to.equal (String(DBPlanGPremium, \"PlanGPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PlanGOOP matches with plan_g_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanGOOP'))).to.equal (String(DBPlanGOOP, \"PlanGOOP did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_g_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_g_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG3_plan_n_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanNPremium = data[0].premium;\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API PlanNPremium matches with plan_n_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanNPremium'))).to.equal (String(DBPlanNPremium, \"PlanNPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PlanNOOP matches with plan_n_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanNOOP'))).to.equal (String(DBPlanGOOP, \"PlanNOOP did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_n_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_n_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IndividualMedicareR3_Magi4_HealthGrade4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var BD = response.birthDate;\r",
									"var bit = BD.split('-');\r",
									"var birthmonth = Number(bit[0]);\r",
									"var birthyear = Number(bit[1]);\r",
									"// console.log(birthyear);\r",
									"var current_date = new Date();\r",
									"var age = current_date.getFullYear() - birthyear;\r",
									"if (current_date.getMonth() < birthmonth) { age -= 1; }\r",
									"\r",
									"console.log(age);\r",
									"postman.setEnvironmentVariable(\"age\", age);\r",
									"\r",
									"postman.setEnvironmentVariable(\"year\", (response.individualMedicares[0].year));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartAPremium\", Math.round(response.individualMedicares[0].partAPremium));\r",
									"postman.setEnvironmentVariable(\"PartBPremium\", (response.individualMedicares[0].partBPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartBOOP\", Math.round(response.individualMedicares[0].partBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartDPremium4\",Math.round(response.individualMedicares[0].partDPremium));\r",
									"postman.setEnvironmentVariable(\"PartDOOP\", Math.round(response.individualMedicares[0].partDOOP ));\r",
									"postman.setEnvironmentVariable(\"PartFPremium\", (response.individualMedicares[0].partFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PlanGPremium\", (response.individualMedicares[0].planGPremium));\r",
									"postman.setEnvironmentVariable(\"PlanGOOP\", (response.individualMedicares[0].planGOOP));\r",
									"postman.setEnvironmentVariable(\"PlanNPremium\", (response.individualMedicares[0].planNPremium));\r",
									"postman.setEnvironmentVariable(\"PlanNOOP\", (response.individualMedicares[0].planNOOP));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartDPremiumSurcharge\", (response.individualMedicares[0].partDPremiumSurcharge));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"    \r",
									"postman.setEnvironmentVariable(\"healthGrade\", 4)\r",
									"\r",
									"postman.setEnvironmentVariable(\"magiTier\",4)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": \"{{versionId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": \"{{lifeExpectancy}}\",\r\n    \"singleVsMultipleMagi\": \"{{singleVsMultipleMagi}}\",\r\n    \"magiTierVsDollarAmount\": \"{{magiTierVsDollarAmount}}\",\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"healthGrade\":\"{{healthGrade}}\",\r\n    \"magiDollarAmount\": \"{{magiDollarAmount}}\",\r\n    \"magiTier\": \"{{magiTier}}\",\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": \"{{zipcode}}\",\r\n    \"countyCode\": \"{{countyCode}}\",\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": \"{{retirementZipcode}}\",\r\n    \"retirementCountyCode\":\"{{retirementCountyCode}}\",\r\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\r\n    \"boughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"reserveDaysUsed\": \"{{reserveDaysUsed}}\",\r\n    \"dental\": \"{{dental}}\",\r\n    \"dentalHealthGrade\": \"{{dentalHealthGrade}}\",\r\n    \"tobacco\": \"{{tobacco}}\"\r\n}\r\n    "
						},
						"url": {
							"raw": "{{server}}/individualMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"individualMedicareR3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG4PARTA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartAPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartAPremium'))).to.equal (String(DBPartAPremium, \"PartAPremium did not match\"));\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Current_Age,eq,{{age}})~and(Health_Grade,eq,{{healthGrade}})&_fields=Premium,Year,Current_Age,Health_Grade,OOP\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTA?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTA"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi4_PartB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartBPremium = data[0].Premium;\r",
									"var DBPartBOOP = data[0].OOP;\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartBOOP*OOP_mult));\r",
									"\r",
									"//console.log(\"oop: \"+ oop);\r",
									"\r",
									"pm.test(\"API PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartBPremium'))).to.equal (String(DBPartBPremium, \"primaryPartBPremium did not match\"))\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PartBOOP matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartBOOP'))).to.equal (String(oop,\"PartBOOP did not match\"));\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTB?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTB"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi4_PARTD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var Sur = pm.environment.get('PartDPremiumSurcharge');\r",
									"var partDPremium1 = pm.environment.get('PartDPremium');\r",
									"console.log(partDPremium1);\r",
									"//var premD_mult = pm.environment.get('premD_mult');\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"\r",
									"//const Dpremium1 = (DBPartDPremium1*premD_mult);\r",
									"console.log(\"Sur: \" + Sur);\r",
									"var Dpremium = +partDPremium1 + +Sur;\r",
									"\r",
									"console.log(\"Dpremium: \" + Dpremium);\r",
									"//var DBPartDPremium = data[0].Premium;\r",
									"\r",
									"var DBPartDOOP = data[0].OOP;\r",
									"\r",
									"var oop = (Math.round(DBPartDOOP * OOP_mult));\r",
									"console.log(\"oop: \" + oop);\r",
									"\r",
									"\r",
									"pm.test(\"API PartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('PartDPremium4'))).to.equal(String(Math.round((Dpremium)), \"PartDPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API PartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('PartDOOP'))).to.equal(String(oop, \"PartDOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTD?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTD"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG4_Part_f_r3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartFPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API PartFPremium matches with part_f_r3 DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartFPremium'))).to.equal (String(DBPartFPremium, \"PartFPremium did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=Premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/part_f_r3?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"part_f_r3"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG4_plan_g_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanGPremium = data[0].premium;\r",
									"//console.log(DBPartGPremium);\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API PlanGPremium matches with plan_g_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanGPremium'))).to.equal (String(DBPlanGPremium, \"PlanGPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PlanGOOP matches with plan_g_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanGOOP'))).to.equal (String(DBPlanGOOP, \"PlanGOOP did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_g_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_g_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG4_plan_n_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanNPremium = data[0].premium;\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API PlanNPremium matches with plan_n_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanNPremium'))).to.equal (String(DBPlanNPremium, \"PlanNPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PlanNOOP matches with plan_n_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanNOOP'))).to.equal (String(DBPlanGOOP, \"PlanNOOP did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_n_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_n_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IndividualMedicareR3_Magi5_HealthGrade5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var BD = response.birthDate;\r",
									"var bit = BD.split('-');\r",
									"var birthmonth = Number(bit[0]);\r",
									"var birthyear = Number(bit[1]);\r",
									"// console.log(birthyear);\r",
									"var current_date = new Date();\r",
									"var age = current_date.getFullYear() - birthyear;\r",
									"if (current_date.getMonth() < birthmonth) { age -= 1; }\r",
									"\r",
									"console.log(age);\r",
									"postman.setEnvironmentVariable(\"age\", age);\r",
									"\r",
									"postman.setEnvironmentVariable(\"year\", (response.individualMedicares[0].year));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartAPremium\", Math.round(response.individualMedicares[0].partAPremium));\r",
									"postman.setEnvironmentVariable(\"PartBPremium\", (response.individualMedicares[0].partBPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartBOOP\", Math.round(response.individualMedicares[0].partBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartDPremium5\",Math.round(response.individualMedicares[0].partDPremium));\r",
									"postman.setEnvironmentVariable(\"PartDOOP\", Math.round(response.individualMedicares[0].partDOOP ));\r",
									"postman.setEnvironmentVariable(\"PartFPremium\", (response.individualMedicares[0].partFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PlanGPremium\", (response.individualMedicares[0].planGPremium));\r",
									"postman.setEnvironmentVariable(\"PlanGOOP\", (response.individualMedicares[0].planGOOP));\r",
									"postman.setEnvironmentVariable(\"PlanNPremium\", (response.individualMedicares[0].planNPremium));\r",
									"postman.setEnvironmentVariable(\"PlanNOOP\", (response.individualMedicares[0].planNOOP));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartDPremiumSurcharge\", (response.individualMedicares[0].partDPremiumSurcharge));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"    \r",
									"postman.setEnvironmentVariable(\"healthGrade\", 5)\r",
									"\r",
									"postman.setEnvironmentVariable(\"magiTier\",5)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": \"{{versionId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": \"{{lifeExpectancy}}\",\r\n    \"singleVsMultipleMagi\": \"{{singleVsMultipleMagi}}\",\r\n    \"magiTierVsDollarAmount\": \"{{magiTierVsDollarAmount}}\",\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"healthGrade\":\"{{healthGrade}}\",\r\n    \"magiDollarAmount\": \"{{magiDollarAmount}}\",\r\n    \"magiTier\": \"{{magiTier}}\",\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": \"{{zipcode}}\",\r\n    \"countyCode\": \"{{countyCode}}\",\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": \"{{retirementZipcode}}\",\r\n    \"retirementCountyCode\":\"{{retirementCountyCode}}\",\r\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\r\n    \"boughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"reserveDaysUsed\": \"{{reserveDaysUsed}}\",\r\n    \"dental\": \"{{dental}}\",\r\n    \"dentalHealthGrade\": \"{{dentalHealthGrade}}\",\r\n    \"tobacco\": \"{{tobacco}}\"\r\n}\r\n    "
						},
						"url": {
							"raw": "{{server}}/individualMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"individualMedicareR3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG5PARTA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartAPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API PartAPremium matches with PartA DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartAPremium'))).to.equal (String(DBPartAPremium, \"PartAPremium did not match\"));\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Current_Age,eq,{{age}})~and(Health_Grade,eq,{{healthGrade}})&_fields=Premium,Year,Current_Age,Health_Grade,OOP\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTA?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTA"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi5_PartB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartBPremium = data[0].Premium;\r",
									"var DBPartBOOP = data[0].OOP;\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartBOOP*OOP_mult));\r",
									"\r",
									"//console.log(\"oop: \"+ oop);\r",
									"\r",
									"pm.test(\"API PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartBPremium'))).to.equal (String(DBPartBPremium, \"primaryPartBPremium did not match\"))\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PartBOOP matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartBOOP'))).to.equal (String(oop,\"PartBOOP did not match\"));\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTB?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTB"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi5_PARTD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var Sur = pm.environment.get('PartDPremiumSurcharge');\r",
									"var partDPremium1 = pm.environment.get('PartDPremium');\r",
									"console.log(partDPremium1);\r",
									"//var premD_mult = pm.environment.get('premD_mult');\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"\r",
									"\r",
									"console.log(\"Sur: \" + Sur);\r",
									"var Dpremium = +partDPremium1 + +Sur;\r",
									"\r",
									"console.log(\"Dpremium: \" + Dpremium);\r",
									"//var DBPartDPremium = data[0].Premium;\r",
									"\r",
									"var DBPartDOOP = data[0].OOP;\r",
									"\r",
									"var oop = (Math.round(DBPartDOOP * OOP_mult));\r",
									"console.log(\"oop: \" + oop);\r",
									"\r",
									"\r",
									"pm.test(\"API PartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('PartDPremium5'))).to.equal(String(Math.round((Dpremium)), \"PartDPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API PartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('PartDOOP'))).to.equal(String(oop, \"PartDOOP did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTD?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTD"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG5_Part_f_r3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartFPremium = data[0].Premium;\r",
									"\r",
									"pm.test(\"API PartFPremium matches with part_f_r3 DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartFPremium'))).to.equal (String(DBPartFPremium, \"PartFPremium did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=Premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/part_f_r3?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"part_f_r3"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG5_plan_g_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanGPremium = data[0].premium;\r",
									"//console.log(DBPartGPremium);\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API PlanGPremium matches with plan_g_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanGPremium'))).to.equal (String(DBPlanGPremium, \"PlanGPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PlanGOOP matches with plan_g_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanGOOP'))).to.equal (String(DBPlanGOOP, \"PlanGOOP did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_g_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_g_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_HG5_plan_n_cost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPlanNPremium = data[0].premium;\r",
									"var DBPlanGOOP = data[0].oop;\r",
									"\r",
									"pm.test(\"API PlanNPremium matches with plan_n_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanNPremium'))).to.equal (String(DBPlanNPremium, \"PlanNPremium did not match\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PlanNOOP matches with plan_n_cost DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PlanNOOP'))).to.equal (String(DBPlanGOOP, \"PlanNOOP did not match\"));\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(age_then_year,eq,{{year}})~and(age_now,eq,{{age}})~and(current_health_grade,eq,{{healthGrade}})~and(state,eq,{{stateName}})&_fields=premium,zipcode,age_then_year,age_now,current_health_grade,state,oop\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/plan_n_cost?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"plan_n_cost"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IndividualMedicareR3_Magi6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var BD = response.birthDate;\r",
									"var bit = BD.split('-');\r",
									"var birthmonth = Number(bit[0]);\r",
									"var birthyear = Number(bit[1]);\r",
									"// console.log(birthyear);\r",
									"var current_date = new Date();\r",
									"var age = current_date.getFullYear() - birthyear;\r",
									"if (current_date.getMonth() < birthmonth) { age -= 1; }\r",
									"\r",
									"console.log(age);\r",
									"postman.setEnvironmentVariable(\"age\", age);\r",
									"\r",
									"postman.setEnvironmentVariable(\"year\", (response.individualMedicares[0].year));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartAPremium\", Math.round(response.individualMedicares[0].partAPremium));\r",
									"postman.setEnvironmentVariable(\"PartBPremium\", (response.individualMedicares[0].partBPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartBOOP\", Math.round(response.individualMedicares[0].partBOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartDPremium6\",Math.round(response.individualMedicares[0].partDPremium));\r",
									"postman.setEnvironmentVariable(\"PartDOOP\", Math.round(response.individualMedicares[0].partDOOP ));\r",
									"postman.setEnvironmentVariable(\"PartFPremium\", (response.individualMedicares[0].partFPremium));\r",
									"\r",
									"postman.setEnvironmentVariable(\"PlanGPremium\", (response.individualMedicares[0].planGPremium));\r",
									"postman.setEnvironmentVariable(\"PlanGOOP\", (response.individualMedicares[0].planGOOP));\r",
									"postman.setEnvironmentVariable(\"PlanNPremium\", (response.individualMedicares[0].planNPremium));\r",
									"postman.setEnvironmentVariable(\"PlanNOOP\", (response.individualMedicares[0].planNOOP));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"PartDPremiumSurcharge\", (response.individualMedicares[0].partDPremiumSurcharge));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"    \r",
									"\r",
									"postman.setEnvironmentVariable(\"magiTier\",6)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": \"{{versionId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": \"{{lifeExpectancy}}\",\r\n    \"singleVsMultipleMagi\": \"{{singleVsMultipleMagi}}\",\r\n    \"magiTierVsDollarAmount\": \"{{magiTierVsDollarAmount}}\",\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"healthGrade\":\"{{healthGrade}}\",\r\n    \"magiDollarAmount\": \"{{magiDollarAmount}}\",\r\n    \"magiTier\": \"{{magiTier}}\",\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": \"{{zipcode}}\",\r\n    \"countyCode\": \"{{countyCode}}\",\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": \"{{retirementZipcode}}\",\r\n    \"retirementCountyCode\":\"{{retirementCountyCode}}\",\r\n    \"fullYearDataForLifeExpectancyYear\": \"{{fullYearDataForLifeExpectancyYear}}\",\r\n    \"boughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"reserveDaysUsed\": \"{{reserveDaysUsed}}\",\r\n    \"dental\": \"{{dental}}\",\r\n    \"dentalHealthGrade\": \"{{dentalHealthGrade}}\",\r\n    \"tobacco\": \"{{tobacco}}\"\r\n}\r\n    "
						},
						"url": {
							"raw": "{{server}}/individualMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"individualMedicareR3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi6_PartB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var DBPartBPremium = data[0].Premium;\r",
									"var DBPartBOOP = data[0].OOP;\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"var oop = (Math.round(DBPartBOOP*OOP_mult));\r",
									"\r",
									"//console.log(\"oop: \"+ oop);\r",
									"\r",
									"pm.test(\"API PartBPremium matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartBPremium'))).to.equal (String(DBPartBPremium, \"primaryPartBPremium did not match\"))\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"API PartBOOP matches with PartB DataBase values\", () => {\r",
									"pm.expect(pm.environment.get(String('PartBOOP'))).to.equal (String(oop,\"PartBOOP did not match\"));\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTB?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTB"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Magi6_PARTD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var data = JSON.parse(responseBody);\r",
									"var Sur = pm.environment.get('PartDPremiumSurcharge');\r",
									"var partDPremium1 = pm.environment.get('PartDPremium');\r",
									"console.log(partDPremium1);\r",
									"//var premD_mult = pm.environment.get('premD_mult');\r",
									"var OOP_mult = pm.environment.get('OOP_mult');\r",
									"\r",
									"\r",
									"console.log(\"Sur: \" + Sur);\r",
									"var Dpremium = +partDPremium1 + +Sur;\r",
									"\r",
									"console.log(\"Dpremium: \" + Dpremium);\r",
									"//var DBPartDPremium = data[0].Premium;\r",
									"\r",
									"var DBPartDOOP = data[0].OOP;\r",
									"\r",
									"var oop = (Math.round(DBPartDOOP * OOP_mult));\r",
									"console.log(\"oop: \" + oop);\r",
									"\r",
									"\r",
									"pm.test(\"API PartDPremium matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('PartDPremium6'))).to.equal(String(Math.round((Dpremium)), \"PartDPremium did not match\"));\r",
									"})\r",
									"\r",
									"pm.test(\"API PartDOOP matches with PartD DataBase values\", () => {\r",
									"    pm.expect(pm.environment.get(String('PartDOOP'))).to.equal(String(oop, \"PartDOOP did not match\"));\r",
									"})\r",
									"\r",
									"pm.environment.clear();\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(Year,eq,{{year}})~and(Age,eq,{{age}})~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})&_fields=Premium,Year,Age,HealthGrade,OOP,Income\"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/PARTD?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PARTD"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Validating FamilyMedicareR3 with database values of PartB, PartD for MagiTiers(1-6) & PartA, PartC, PartF, PlanN, PlanG for HealthGrades(1-5).\n\nVerifying for the first year of FamilyMedicareExpR3, FamilyPremedicareR3, FamilyTotalExpR3, IndividualMedicareR3, IndividualPreMedecareR3, IndividualPremedicareR3, IndividualTotalExpR3, LongTermCareR4 HealthCare Expenses of partAPremium & partAOOP with PARTA DB Table, partBPremium & partBOOP with PARTB DB Table, partDPremium & partDOOP, partFPremium with part_f_r3 DB Table, planGPremium & planGOOP with plan_g_cost DB Table, palnNPremium & planNOOP with plan_n_cost DB Tables Premium,OOP and Year Values for MagiTier 1 to 6 and HealthGrade 1 to 5. Validating Response values of UsersManagement_FinancialPlanner & Support_Users with Database by Joining users tables and users_details table.  \n\nState_Mult DB Table: \"premD_mult\", \"OOP_mult\", \"premF_mult\", \"Dental_mult\", value is used for Calculating Premiums & OOPs of (A,B,D) by considering retirementState."
		},
		{
			"name": "IndividualPremedicareR3_Premium_OOP_Dental",
			"item": [
				{
					"name": "individualPreMedicareR3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"postman.setEnvironmentVariable(\"versionId\", 1);\r",
									"postman.setEnvironmentVariable(\"planId\", \"2021Connecticut9001SilverHMOVericred\");\r",
									"postman.setEnvironmentVariable(\"birthDate\", \"01-1961\");\r",
									"postman.setEnvironmentVariable(\"retirementYear\", \"01-2021\");\r",
									"postman.setEnvironmentVariable(\"lifeExpectancy\", 70);\r",
									"postman.setEnvironmentVariable(\"planType\", \"Silver\");\r",
									"postman.setEnvironmentVariable(\"healthGrade\", 4);\r",
									"postman.setEnvironmentVariable(\"stateName\",\"Arkansas\");\r",
									"postman.setEnvironmentVariable(\"zipcode\", 72003);\r",
									"postman.setEnvironmentVariable(\"countyCode\", 5001);\r",
									"postman.setEnvironmentVariable(\"retirementState\", \"Connecticut\");\r",
									"postman.setEnvironmentVariable(\"retirementZipcode\", \"6404\");\r",
									"postman.setEnvironmentVariable(\"retirementCountyCode\", \"9001\");\r",
									"postman.setEnvironmentVariable(\"boughtPlanA\", true);\r",
									"postman.setEnvironmentVariable(\"dental\", true);\r",
									"postman.setEnvironmentVariable(\"dentalHealthGrade\", 3);\r",
									"postman.setEnvironmentVariable(\"tobacco\", false);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"  "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//var response = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"var apiresponse=JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"apiresponse\", apiresponse);\r",
									"\r",
									"/*var BD = apiresponse.birthDate;\r",
									"var bit = BD.split('-');\r",
									"var birthmonth = Number(bit[0]);\r",
									"var birthyear = Number(bit[1]);\r",
									"// console.log(primary_birthyear);\r",
									"var current_date = new Date();\r",
									"var age = current_date.getFullYear() - birthyear;\r",
									"if (current_date.getMonth() < birthmonth) {age -= 1;}\r",
									"\r",
									"console.log(age);\r",
									"postman.setEnvironmentVariable(\"age\", age);*/\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_APIretirementState\",apiresponse.retirementState);\r",
									"//console.log()\r",
									"postman.setEnvironmentVariable(\"I_APIdentalHealthGrade\",apiresponse.dentalHealthGrade);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_APIdentalPremium\",apiresponse.individualPreMedicares[0].dentalPremium);\r",
									"       \r",
									"postman.setEnvironmentVariable(\"I_year\",(apiresponse.individualPreMedicares[0].year));\r",
									"\r",
									"        // console.log(\"planId\",planId);\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_planId\",(apiresponse.planId));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_averageNetPremium\", (apiresponse.planDetails.averageNetPremium));\r",
									"\r",
									"//console.log(\"averageNetPremium\", I_averageNetPremium);\r",
									"\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_totalIndividualInNetworkDeductible\", (apiresponse.planDetails.totalIndividualInNetworkDeductible));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_totalFamilyInNetworkDeductible\",(apiresponse.planDetails.totalFamilyInNetworkDeductible));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_totalIndividualInNetworkOOP\",(apiresponse.planDetails.totalIndividualInNetworkOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_totalFamilyInNetworkOOP\",(apiresponse.planDetails.totalFamilyInNetworkOOP));\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_totalPlanLevelCoinsurance\",(apiresponse.planDetails.totalPlanLevelCoinsurance));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_averageIndividualInNetworkDeductible\",(apiresponse.planDetails.averageIndividualInNetworkDeductible));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_averageFamilyInNetworkDeductible\",(apiresponse.planDetails.averageFamilyInNetworkDeductible));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_averageIndividualInNetworkOOP\",(apiresponse.planDetails.averageIndividualInNetworkOOP));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_averageFamilyInNetworkOOP\",(apiresponse.planDetails.averageFamilyInNetworkOOP));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_averagePlanLevelCoinsurance\",(apiresponse.planDetails.averagePlanLevelCoinsurance));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_premium\",(apiresponse.individualPreMedicares[0].premium));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"I_outofpocket\",(apiresponse.individualPreMedicares[0].outofpocket));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"versionId\": \"{{versionId}}\",\r\n    \"planId\": \"{{planId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": \"{{lifeExpectancy}}\",\r\n    \"planType\": \"{{planType}}\",\r\n    \"healthGrade\": \"{{healthGrade}}\",\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": \"{{zipcode}}\",\r\n    \"countyCode\": \"{{countyCode}}\",\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": \"{{retirementZipcode}}\" ,\r\n    \"retirementCountyCode\": \"{{retirementCountyCode}}\",\r\n    \"boughtPlanA\": \"{{boughtPlanA}}\",\r\n    \"dental\": \"{{dental}}\",\r\n    \"dentalHealthGrade\": \"{{dentalHealthGrade}}\",\r\n    \"tobacco\": \"{{tobacco}}\"\r\n}"
						},
						"url": {
							"raw": "{{server}}/individualPreMedicareR3",
							"host": [
								"{{server}}"
							],
							"path": [
								"individualPreMedicareR3"
							]
						},
						"description": "Validating Individual Premedicare Total Premiums and OOPs and Average Premiums and OOPs with database."
					},
					"response": []
				},
				{
					"name": "DB_individual_plans_average_calculation Premiums",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response=JSON.parse(responseBody);\r",
									"//plan Id\r",
									"pm.test(\"Comapare  PlanId matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_planId')).to.equal(response[0].plan_id, \" Dental Premium did not match\");\r",
									"})\r",
									"\r",
									"\r",
									"//average_net_premium\r",
									"\r",
									"pm.test(\"Comapare average_net_premium matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_averageNetPremium')).to.equal(response[0].average_net_premium, \" average_net_premium did not match\");\r",
									"})\r",
									"\r",
									"\r",
									"//total_individual_in_network_deductible\r",
									"pm.test(\"Comapare total_individual_in_network_deductible matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_totalIndividualInNetworkDeductible')).to.equal(response[0].total_individual_in_network_deductible, \" total_individual_in_network_deductible did not match\");\r",
									"\r",
									"})\r",
									"\r",
									"//total_family_in_network_deductible\r",
									"\r",
									"pm.test(\"Comapare total_family_in_network_deductible matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_totalFamilyInNetworkDeductible')).to.equal(response[0].total_family_in_network_deductible, \" total_family_in_network_deductible did not match\");\r",
									"})\r",
									"\r",
									"//total_individual_in_network_oop\r",
									"\r",
									"pm.test(\"Comapare total_individual_in_network_oop matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_totalIndividualInNetworkOOP')).to.equal(response[0].total_individual_in_network_oop, \" total_individual_in_network_oop did not match\");\r",
									"})\r",
									"\r",
									"//total_family_in_network_oop\r",
									"\r",
									"pm.test(\"Comapare total_family_in_network_oop matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_totalFamilyInNetworkOOP')).to.equal(response[0].total_family_in_network_oop, \" total_family_in_network_oop did not match\");\r",
									"})\r",
									"\r",
									"\r",
									"//total_plan_level_coinsurance\r",
									"\r",
									"pm.test(\"Comapare total_plan_level_coinsurance matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_totalPlanLevelCoinsurance')).to.equal(response[0].total_plan_level_coinsurance),\" total_plan_level_coinsurance did not match\";\r",
									"})\r",
									"\r",
									"\r",
									"//average_individual_in_network_deductable\r",
									"\r",
									"pm.test(\"Comapare average_individual_in_network_deductable matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_averageIndividualInNetworkDeductible')).to.equal(response[0].average_individual_in_network_deductable, \" average_individual_in_network_deductable did not match\");\r",
									"})\r",
									"\r",
									"//average_family_in_network_deductable\r",
									"\r",
									"pm.test(\"Comapare average_family_in_network_deductable matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_averageFamilyInNetworkDeductible')).to.equal(response[0].average_family_in_network_deductable, \" average_family_in_network_deductable did not match\");\r",
									"})\r",
									"\r",
									"//average_individual_in_network_oop\r",
									"\r",
									"pm.test(\"Comapare average_individual_in_network_oop matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_averageIndividualInNetworkOOP')).to.equal(response[0].average_individual_in_network_oop, \" average_individual_in_network_oop did not match\");\r",
									"})\r",
									"\r",
									"//average_family_in_network_oop\r",
									"\r",
									"pm.test(\"Comapare average_family_in_network_oop matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_averageFamilyInNetworkOOP')).to.equal(response[0].average_family_in_network_oop, \" average_family_in_network_oop did not match\");\r",
									"})\r",
									"\r",
									"//average_plan_level_coinsurance\r",
									"\r",
									"pm.test(\"Comapare average_plan_level_coinsurance matching with the db\", () => {\r",
									"pm.expect(Number(postman.getEnvironmentVariable('I_averagePlanLevelCoinsurance'))).to.equal(Number(response[0].average_plan_level_coinsurance)), \"average_plan_level_coinsurance did not match\";\r",
									"})\r",
									"\r",
									"\r",
									"//individualpremedicare Premiums comparing with db premium\r",
									"\r",
									"var apiresponse=pm.globals.get(\"apiresponse\");\r",
									"\r",
									"var DBsourceYear=response[0].source_year; \r",
									"\r",
									"length1 = apiresponse.individualPreMedicares.length\r",
									"\r",
									"console.log(\"length of individualPreMedicares \",length1);\r",
									"\r",
									"var startYear = apiresponse.individualPreMedicares[0].year;\r",
									"\r",
									"console.log(\"individualPreMedicares begins year\", startYear) //2021\r",
									"\r",
									"endYear = apiresponse.individualPreMedicares[length1 - 1].year;  \r",
									"\r",
									"console.log(\"individualPreMedicares end year\", endYear) //2025\r",
									"var dbpremium=parseFloat(response[0].average_net_premium);\r",
									"console.log(\"db premium\",dbpremium)\r",
									"\r",
									"for(var i=0;i<(length1-1);i++)\r",
									"    {\r",
									"        var APIyear = apiresponse.individualPreMedicares[i].year;\r",
									"        console.log(\"API year\",APIyear);\r",
									"        var apipremium=apiresponse.individualPreMedicares[i].premium;\r",
									"        console.log(\"apipremium\",apipremium);\r",
									"var rapipremium=Math.round(apipremium* 10) / 10 ;\r",
									"        if(DBsourceYear==APIyear)\r",
									"        {\r",
									"            dbpremium=apipremium;\r",
									"            pm.test(\"dbpremium is matched with API premium\", () => {\r",
									"        pm.expect(apipremium).to.equal(dbpremium, \"apiprimary premium did not match\");\r",
									"            })\r",
									"           // console.log(\"in if condition\");\r",
									"        }\r",
									"        else if(DBsourceYear<APIyear) \r",
									"        {\r",
									"            console.log(\"in else-if condition\");\r",
									"            var lengthd=APIyear-DBsourceYear \r",
									"           \r",
									"                var inflation=(dbpremium*0.06); \r",
									"                console.log(\"inflation:: \" +inflation);\r",
									"                var dbpremium = dbpremium + inflation;\r",
									"                var rdbpremium=Math.round(dbpremium* 10) / 10 ;\r",
									"                console.log(\"After added a inflation to 'average_net_premium' DB Value 'after' rounded\",rdbpremium );\r",
									"               \r",
									"                pm.test(\"dbpremium is matched with API premium\", () => {\r",
									"                pm.expect(rapipremium).to.equal(rdbpremium, \"apiprimary premium did not match\");\r",
									"            })\r",
									"          \r",
									"        }\r",
									"    }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(plan_id,eq,{{planId}})\"\r",
									"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);\r",
									"setTimeout(function(){}, 500);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/individual_plans_average_calculation?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"individual_plans_average_calculation"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_DENTAL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var dbresponse=JSON.parse(responseBody);\r",
									"//pm.globals.set(\"dbdental\", response);\r",
									"\r",
									"var dbyear=dbresponse[0].Year;\r",
									"var dbHealth_Grade=dbresponse[0].Health_Grade;\r",
									"var dbState=dbresponse[0].State;\r",
									"\r",
									"var dbPremium=parseInt(dbresponse[0].Premium);\r",
									"\r",
									"//Primary retirement state and dental health grade\r",
									"\r",
									"pm.test(\"Comapare retirementState and dentalHealthGrade matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_APIretirementState')).to.equal(String(dbState), \" retirementState and dentalHealthGrade did not match\");\r",
									"pm.expect(postman.getEnvironmentVariable('I_APIdentalHealthGrade')).to.equal(String(dbHealth_Grade), \" retirementState and dentalHealthGrade did not match\");\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"//Primary Dental Premium\r",
									"\r",
									"pm.test(\"Comapare  Dental Premium matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_APIdentalPremium')).to.equal(String(dbPremium), \" Dental Premium did not match\");\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(State,eq,{{retirementState}})~and(Year,eq,{{I_year}})~and(Health_Grade,eq,{{dentalHealthGrade}})\"\r",
									"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);\r",
									"setTimeout(function(){}, 500);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/DENTAL?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"DENTAL"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_PreRET OOPs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response=JSON.parse(responseBody);\r",
									"//outofpocket\r",
									"pm.test(\"Comapare outofpocket matching with the db\", () => {\r",
									"pm.expect(postman.getEnvironmentVariable('I_outofpocket')).to.equal(String(response[0].OOP), \" outofpocket did not match\");\r",
									"})\r",
									"\r",
									"pm.environment.clear();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_where=(State,eq,{{retirementState}})~and(Year,eq,{{I_year}})~and(Plan_type,eq,{{planType}})~and(Health_Grade,eq,{{healthGrade}})\"\r",
									"\r",
									"console.log(\"query \"+ query);\r",
									"postman.setEnvironmentVariable(\"query\", query);\r",
									"setTimeout(function(){}, 500);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/PRE_RET?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"PRE_RET"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Validating Individual Premedicare Premiums, OOPs and Dental."
		},
		{
			"name": "IndiTotalExpR3_Premiums_OOP",
			"item": [
				{
					"name": "Pre_Med_IndTotal",
					"item": [
						{
							"name": "Magi1_HG1",
							"item": [
								{
									"name": "Magi2_individualTotalExpensesR3 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"Year\",  response.individualTotalExpenses[0].year);\r",
													"//PartA_OOP\r",
													"postman.setEnvironmentVariable(\"PreMed_Premium\",  Math.round(response.individualTotalExpenses[0].premium));\r",
													"postman.setEnvironmentVariable(\"PreMed_OOP\",  Math.round(response.individualTotalExpenses[0].outofpocket));\r",
													"postman.setEnvironmentVariable(\"PreMed_Total\",  Math.round(response.individualTotalExpenses[0].totalPreMedicareCost));\r",
													"\r",
													"console.log(\"Pre medicare premium : \"+ pm.environment.get(\"PreMed_Premium\"));\r",
													"\r",
													"//Part D Premium Validation\r",
													"postman.setEnvironmentVariable(\"partD_Premium_1\",  Math.round(response.individualTotalExpenses[0].partDPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"//Part B Premium Validation\r",
													"postman.setEnvironmentVariable(\"partB_Premium_1\",  Math.round(response.individualTotalExpenses[0].partBPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"\r",
													"//Part C Premium\r",
													"postman.setEnvironmentVariable(\"partC_Premium_1\",  Math.round(response.individualTotalExpenses[0].partCPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"\r",
													"\r",
													"\r",
													"//Also please validate the data for partAPremium, partCPremium, partDPremium, planGPremium, planNPremium, partFPremium\r",
													"\r",
													"//PlanG Premium validation\r",
													"postman.setEnvironmentVariable(\"planG_Premium_1\",  Math.round(response.individualTotalExpenses[0].planGPremium));\r",
													"\r",
													"//PlanN Premium validation\r",
													"postman.setEnvironmentVariable(\"planN_Premium_1\",  Math.round(response.individualTotalExpenses[0].planNPremium));\r",
													"//PlanF Premium validation\r",
													"postman.setEnvironmentVariable(\"planF_Premium_1\",  Math.round(response.individualTotalExpenses[0].partFPremium));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"versionId\",1);\r",
													"postman.setEnvironmentVariable(\"planId\",\"2021Arkansas5001BronzePOSHealthSherpa\");\r",
													"postman.setEnvironmentVariable(\"birthDate\",\"01-1958\");\r",
													"postman.setEnvironmentVariable(\"retirementYear\",\"01-2021\");\r",
													"postman.setEnvironmentVariable(\"lifeExpectancy\",70);\r",
													"postman.setEnvironmentVariable(\"planType\",\"Bronze\");\r",
													"postman.setEnvironmentVariable(\"healthGrade\",\"2\");\r",
													"postman.setEnvironmentVariable(\"singleVsMultipleMagi\",false);\r",
													"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\",false);\r",
													"postman.setEnvironmentVariable(\"magiTier\",2);\r",
													"postman.setEnvironmentVariable(\"taxFilingStatus\",\"MARRIED_FILING_JOINTLY\");\r",
													"postman.setEnvironmentVariable(\"magiDollarAmount\",180000);\r",
													"postman.setEnvironmentVariable(\"stateName\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"zipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"retirementState\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"retirementZipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"boughtPlanA\",true);\r",
													"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\",false);\r",
													"postman.setEnvironmentVariable(\"reserveDaysUsed\",0);\r",
													"postman.setEnvironmentVariable(\"dental\",true);\r",
													"postman.setEnvironmentVariable(\"dentalHealthGrade\",1);\r",
													"postman.setEnvironmentVariable(\"tobacco\",false);\r",
													"//postman.setEnvironmentVariable(\"yearWiseMagiDetailList\",);\r",
													"\r",
													"\r",
													"//postman.setEnvironmentVariable(\"versionId\",1);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"planId\": \"{{planId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": {{lifeExpectancy}},\r\n    \"planType\": \"{{planType}}\",\r\n    \"healthGrade\": \"{{healthGrade}}\",\r\n    \"singleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"magiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"magiTier\": {{magiTier}},\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"magiDollarAmount\": {{magiDollarAmount}},\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": {{zipcode}},\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": {{retirementZipcode}},\r\n    \"boughtPlanA\": {{boughtPlanA}},\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"reserveDaysUsed\": {{reserveDaysUsed}},\r\n    \"dental\": {{dental}},\r\n    \"dentalHealthGrade\": {{dentalHealthGrade}},\r\n    \"tobacco\": {{tobacco}}\r\n    \r\n}"
										},
										"url": {
											"raw": "{{server}}/individualTotalExpensesR3",
											"host": [
												"{{server}}"
											],
											"path": [
												"individualTotalExpensesR3"
											]
										}
									},
									"response": []
								},
								{
									"name": "PreMed_individual_plans_average_calculation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(plan_id,eq,{{planId}})~and(State,eq,{{retirementState}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Pre-Medicare Premium\r",
													"var preMed_Premium_DB=Math.round(response[0].average_net_premium);\r",
													"pm.test(\"Pre Medicare premium of API matched with that of average_net_premium from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(preMed_Premium_DB).to.eql(Number(pm.environment.get(\"PreMed_Premium\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/individual_plans_average_calculation{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"individual_plans_average_calculation{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRE_RET_OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(Plan_type,eq,{{planType}})~and(State,eq,{{retirementState}})~and(Health_Grade,eq,{{healthGrade}})~and(Age,eq,63)~and(Year,eq,{{Year}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Pre-Medicare OOP\r",
													"var preMed_OOP_DB=Math.round(response[0].OOP);\r",
													"pm.test(\"Pre Medicare OOP of API matched with that of Pre Medicare OOP from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(preMed_OOP_DB).to.eql(Number(pm.environment.get(\"PreMed_OOP\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PRE_RET{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PRE_RET{{query}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Magi2_HG2",
							"item": [
								{
									"name": "Magi2_individualTotalExpensesR3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"Year\",  response.individualTotalExpenses[0].year);\r",
													"//PartA_OOP\r",
													"postman.setEnvironmentVariable(\"PreMed_Premium2\",  Math.round(response.individualTotalExpenses[0].premium));\r",
													"postman.setEnvironmentVariable(\"PreMed_OOP2\",  Math.round(response.individualTotalExpenses[0].outofpocket));\r",
													"postman.setEnvironmentVariable(\"PreMed_Total\",  Math.round(response.individualTotalExpenses[0].totalPreMedicareCost));\r",
													"\r",
													"console.log(\"Pre medicare premium : \"+ pm.environment.get(\"PreMed_Premium\"));\r",
													"\r",
													"//Part D Premium Validation\r",
													"postman.setEnvironmentVariable(\"partD_Premium_1\",  Math.round(response.individualTotalExpenses[0].partDPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"//Part B Premium Validation\r",
													"postman.setEnvironmentVariable(\"partB_Premium_1\",  Math.round(response.individualTotalExpenses[0].partBPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"\r",
													"//Part C Premium\r",
													"postman.setEnvironmentVariable(\"partC_Premium_1\",  Math.round(response.individualTotalExpenses[0].partCPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"\r",
													"\r",
													"\r",
													"//Also please validate the data for partAPremium, partCPremium, partDPremium, planGPremium, planNPremium, partFPremium\r",
													"\r",
													"//PlanG Premium validation\r",
													"postman.setEnvironmentVariable(\"planG_Premium_1\",  Math.round(response.individualTotalExpenses[0].planGPremium));\r",
													"\r",
													"//PlanN Premium validation\r",
													"postman.setEnvironmentVariable(\"planN_Premium_1\",  Math.round(response.individualTotalExpenses[0].planNPremium));\r",
													"//PlanF Premium validation\r",
													"postman.setEnvironmentVariable(\"planF_Premium_1\",  Math.round(response.individualTotalExpenses[0].partFPremium));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"versionId\",1);\r",
													"postman.setEnvironmentVariable(\"planId\",\"2021Arkansas5001BronzePOSHealthSherpa\");\r",
													"postman.setEnvironmentVariable(\"birthDate\",\"01-1958\");\r",
													"postman.setEnvironmentVariable(\"retirementYear\",\"01-2021\");\r",
													"postman.setEnvironmentVariable(\"lifeExpectancy\",70);\r",
													"postman.setEnvironmentVariable(\"planType\",\"Bronze\");\r",
													"postman.setEnvironmentVariable(\"healthGrade\",\"2\");\r",
													"postman.setEnvironmentVariable(\"singleVsMultipleMagi\",false);\r",
													"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\",false);\r",
													"postman.setEnvironmentVariable(\"magiTier\",2);\r",
													"postman.setEnvironmentVariable(\"taxFilingStatus\",\"MARRIED_FILING_JOINTLY\");\r",
													"postman.setEnvironmentVariable(\"magiDollarAmount\",180000);\r",
													"postman.setEnvironmentVariable(\"stateName\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"zipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"retirementState\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"retirementZipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"boughtPlanA\",true);\r",
													"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\",false);\r",
													"postman.setEnvironmentVariable(\"reserveDaysUsed\",0);\r",
													"postman.setEnvironmentVariable(\"dental\",true);\r",
													"postman.setEnvironmentVariable(\"dentalHealthGrade\",1);\r",
													"postman.setEnvironmentVariable(\"tobacco\",false);\r",
													"//postman.setEnvironmentVariable(\"yearWiseMagiDetailList\",);\r",
													"\r",
													"\r",
													"//postman.setEnvironmentVariable(\"versionId\",1);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"planId\": \"{{planId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": {{lifeExpectancy}},\r\n    \"planType\": \"{{planType}}\",\r\n    \"healthGrade\": \"{{healthGrade}}\",\r\n    \"singleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"magiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"magiTier\": {{magiTier}},\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"magiDollarAmount\": {{magiDollarAmount}},\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": {{zipcode}},\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": {{retirementZipcode}},\r\n    \"boughtPlanA\": {{boughtPlanA}},\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"reserveDaysUsed\": {{reserveDaysUsed}},\r\n    \"dental\": {{dental}},\r\n    \"dentalHealthGrade\": {{dentalHealthGrade}},\r\n    \"tobacco\": {{tobacco}}\r\n    \r\n}"
										},
										"url": {
											"raw": "{{server}}/individualTotalExpensesR3",
											"host": [
												"{{server}}"
											],
											"path": [
												"individualTotalExpensesR3"
											]
										}
									},
									"response": []
								},
								{
									"name": "PreMed_individual_plans_average_calculation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(plan_id,eq,{{planId}})~and(State,eq,{{retirementState}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Pre-Medicare Premium\r",
													"var preMed_Premium_DB=Math.round(response[0].average_net_premium);\r",
													"pm.test(\"Pre Medicare premium of API matched with that of average_net_premium from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(preMed_Premium_DB).to.eql(Number(pm.environment.get(\"PreMed_Premium2\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/individual_plans_average_calculation{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"individual_plans_average_calculation{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRE_RET_OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(Plan_type,eq,{{planType}})~and(State,eq,{{retirementState}})~and(Health_Grade,eq,{{healthGrade}})~and(Age,eq,63)~and(Year,eq,{{Year}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Pre-Medicare OOP\r",
													"var preMed_OOP_DB=Math.round(response[0].OOP);\r",
													"pm.test(\"Pre Medicare OOP of API matched with that of Pre Medicare OOP from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(preMed_OOP_DB).to.eql(Number(pm.environment.get(\"PreMed_OOP2\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PRE_RET{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PRE_RET{{query}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Magi3_HG3",
							"item": [
								{
									"name": "Magi3_individualTotalExpensesR3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"Year\",  response.individualTotalExpenses[0].year);\r",
													"//PartA_OOP\r",
													"postman.setEnvironmentVariable(\"PreMed_Premium3\",  Math.round(response.individualTotalExpenses[0].premium));\r",
													"postman.setEnvironmentVariable(\"PreMed_OOP3\",  Math.round(response.individualTotalExpenses[0].outofpocket));\r",
													"postman.setEnvironmentVariable(\"PreMed_Total\",  Math.round(response.individualTotalExpenses[0].totalPreMedicareCost));\r",
													"\r",
													"console.log(\"Pre medicare premium : \"+ pm.environment.get(\"PreMed_Premium\"));\r",
													"\r",
													"//Part D Premium Validation\r",
													"postman.setEnvironmentVariable(\"partD_Premium_1\",  Math.round(response.individualTotalExpenses[0].partDPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"//Part B Premium Validation\r",
													"postman.setEnvironmentVariable(\"partB_Premium_1\",  Math.round(response.individualTotalExpenses[0].partBPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"\r",
													"//Part C Premium\r",
													"postman.setEnvironmentVariable(\"partC_Premium_1\",  Math.round(response.individualTotalExpenses[0].partCPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"\r",
													"\r",
													"\r",
													"//Also please validate the data for partAPremium, partCPremium, partDPremium, planGPremium, planNPremium, partFPremium\r",
													"\r",
													"//PlanG Premium validation\r",
													"postman.setEnvironmentVariable(\"planG_Premium_1\",  Math.round(response.individualTotalExpenses[0].planGPremium));\r",
													"\r",
													"//PlanN Premium validation\r",
													"postman.setEnvironmentVariable(\"planN_Premium_1\",  Math.round(response.individualTotalExpenses[0].planNPremium));\r",
													"//PlanF Premium validation\r",
													"postman.setEnvironmentVariable(\"planF_Premium_1\",  Math.round(response.individualTotalExpenses[0].partFPremium));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"versionId\",1);\r",
													"postman.setEnvironmentVariable(\"planId\",\"2021Arkansas5001BronzePOSHealthSherpa\");\r",
													"postman.setEnvironmentVariable(\"birthDate\",\"01-1958\");\r",
													"postman.setEnvironmentVariable(\"retirementYear\",\"01-2021\");\r",
													"postman.setEnvironmentVariable(\"lifeExpectancy\",70);\r",
													"postman.setEnvironmentVariable(\"planType\",\"Bronze\");\r",
													"postman.setEnvironmentVariable(\"healthGrade\",\"3\");\r",
													"postman.setEnvironmentVariable(\"singleVsMultipleMagi\",false);\r",
													"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\",false);\r",
													"postman.setEnvironmentVariable(\"magiTier\",3);\r",
													"postman.setEnvironmentVariable(\"taxFilingStatus\",\"MARRIED_FILING_JOINTLY\");\r",
													"postman.setEnvironmentVariable(\"magiDollarAmount\",180000);\r",
													"postman.setEnvironmentVariable(\"stateName\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"zipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"retirementState\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"retirementZipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"boughtPlanA\",true);\r",
													"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\",false);\r",
													"postman.setEnvironmentVariable(\"reserveDaysUsed\",0);\r",
													"postman.setEnvironmentVariable(\"dental\",true);\r",
													"postman.setEnvironmentVariable(\"dentalHealthGrade\",1);\r",
													"postman.setEnvironmentVariable(\"tobacco\",false);\r",
													"//postman.setEnvironmentVariable(\"yearWiseMagiDetailList\",);\r",
													"\r",
													"\r",
													"//postman.setEnvironmentVariable(\"versionId\",1);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"planId\": \"{{planId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": {{lifeExpectancy}},\r\n    \"planType\": \"{{planType}}\",\r\n    \"healthGrade\": \"{{healthGrade}}\",\r\n    \"singleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"magiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"magiTier\": {{magiTier}},\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"magiDollarAmount\": {{magiDollarAmount}},\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": {{zipcode}},\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": {{retirementZipcode}},\r\n    \"boughtPlanA\": {{boughtPlanA}},\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"reserveDaysUsed\": {{reserveDaysUsed}},\r\n    \"dental\": {{dental}},\r\n    \"dentalHealthGrade\": {{dentalHealthGrade}},\r\n    \"tobacco\": {{tobacco}}\r\n    \r\n}"
										},
										"url": {
											"raw": "{{server}}/individualTotalExpensesR3",
											"host": [
												"{{server}}"
											],
											"path": [
												"individualTotalExpensesR3"
											]
										}
									},
									"response": []
								},
								{
									"name": "PreMed_individual_plans_average_calculation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(plan_id,eq,{{planId}})~and(State,eq,{{retirementState}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Pre-Medicare Premium\r",
													"var preMed_Premium_DB=Math.round(response[0].average_net_premium);\r",
													"pm.test(\"Pre Medicare premium of API matched with that of average_net_premium from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(preMed_Premium_DB).to.eql(Number(pm.environment.get(\"PreMed_Premium3\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/individual_plans_average_calculation{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"individual_plans_average_calculation{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRE_RET_OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(Plan_type,eq,{{planType}})~and(State,eq,{{retirementState}})~and(Health_Grade,eq,{{healthGrade}})~and(Age,eq,63)~and(Year,eq,{{Year}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Pre-Medicare OOP\r",
													"var preMed_OOP_DB=Math.round(response[0].OOP);\r",
													"pm.test(\"Pre Medicare OOP of API matched with that of Pre Medicare OOP from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(preMed_OOP_DB).to.eql(Number(pm.environment.get(\"PreMed_OOP3\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PRE_RET{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PRE_RET{{query}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Magi4_HG4",
							"item": [
								{
									"name": "Magi2_individualTotalExpensesR3 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"Year\",  response.individualTotalExpenses[0].year);\r",
													"//PartA_OOP\r",
													"postman.setEnvironmentVariable(\"PreMed_Premium4\",  Math.round(response.individualTotalExpenses[0].premium));\r",
													"postman.setEnvironmentVariable(\"PreMed_OOP4\",  Math.round(response.individualTotalExpenses[0].outofpocket));\r",
													"postman.setEnvironmentVariable(\"PreMed_Total\",  Math.round(response.individualTotalExpenses[0].totalPreMedicareCost));\r",
													"\r",
													"console.log(\"Pre medicare premium : \"+ pm.environment.get(\"PreMed_Premium\"));\r",
													"\r",
													"//Part D Premium Validation\r",
													"postman.setEnvironmentVariable(\"partD_Premium_1\",  Math.round(response.individualTotalExpenses[0].partDPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"//Part B Premium Validation\r",
													"postman.setEnvironmentVariable(\"partB_Premium_1\",  Math.round(response.individualTotalExpenses[0].partBPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"\r",
													"//Part C Premium\r",
													"postman.setEnvironmentVariable(\"partC_Premium_1\",  Math.round(response.individualTotalExpenses[0].partCPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"\r",
													"\r",
													"\r",
													"//Also please validate the data for partAPremium, partCPremium, partDPremium, planGPremium, planNPremium, partFPremium\r",
													"\r",
													"//PlanG Premium validation\r",
													"postman.setEnvironmentVariable(\"planG_Premium_1\",  Math.round(response.individualTotalExpenses[0].planGPremium));\r",
													"\r",
													"//PlanN Premium validation\r",
													"postman.setEnvironmentVariable(\"planN_Premium_1\",  Math.round(response.individualTotalExpenses[0].planNPremium));\r",
													"//PlanF Premium validation\r",
													"postman.setEnvironmentVariable(\"planF_Premium_1\",  Math.round(response.individualTotalExpenses[0].partFPremium));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"versionId\",1);\r",
													"postman.setEnvironmentVariable(\"planId\",\"2021Arkansas5001BronzePOSHealthSherpa\");\r",
													"postman.setEnvironmentVariable(\"birthDate\",\"01-1958\");\r",
													"postman.setEnvironmentVariable(\"retirementYear\",\"01-2021\");\r",
													"postman.setEnvironmentVariable(\"lifeExpectancy\",70);\r",
													"postman.setEnvironmentVariable(\"planType\",\"Bronze\");\r",
													"postman.setEnvironmentVariable(\"healthGrade\",\"4\");\r",
													"postman.setEnvironmentVariable(\"singleVsMultipleMagi\",false);\r",
													"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\",false);\r",
													"postman.setEnvironmentVariable(\"magiTier\",4);\r",
													"postman.setEnvironmentVariable(\"taxFilingStatus\",\"MARRIED_FILING_JOINTLY\");\r",
													"postman.setEnvironmentVariable(\"magiDollarAmount\",180000);\r",
													"postman.setEnvironmentVariable(\"stateName\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"zipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"retirementState\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"retirementZipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"boughtPlanA\",true);\r",
													"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\",false);\r",
													"postman.setEnvironmentVariable(\"reserveDaysUsed\",0);\r",
													"postman.setEnvironmentVariable(\"dental\",true);\r",
													"postman.setEnvironmentVariable(\"dentalHealthGrade\",1);\r",
													"postman.setEnvironmentVariable(\"tobacco\",false);\r",
													"//postman.setEnvironmentVariable(\"yearWiseMagiDetailList\",);\r",
													"\r",
													"\r",
													"//postman.setEnvironmentVariable(\"versionId\",1);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"planId\": \"{{planId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": {{lifeExpectancy}},\r\n    \"planType\": \"{{planType}}\",\r\n    \"healthGrade\": \"{{healthGrade}}\",\r\n    \"singleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"magiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"magiTier\": {{magiTier}},\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"magiDollarAmount\": {{magiDollarAmount}},\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": {{zipcode}},\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": {{retirementZipcode}},\r\n    \"boughtPlanA\": {{boughtPlanA}},\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"reserveDaysUsed\": {{reserveDaysUsed}},\r\n    \"dental\": {{dental}},\r\n    \"dentalHealthGrade\": {{dentalHealthGrade}},\r\n    \"tobacco\": {{tobacco}}\r\n    \r\n}"
										},
										"url": {
											"raw": "{{server}}/individualTotalExpensesR3",
											"host": [
												"{{server}}"
											],
											"path": [
												"individualTotalExpensesR3"
											]
										}
									},
									"response": []
								},
								{
									"name": "PreMed_individual_plans_average_calculation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(plan_id,eq,{{planId}})~and(State,eq,{{retirementState}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Pre-Medicare Premium\r",
													"var preMed_Premium_DB=Math.round(response[0].average_net_premium);\r",
													"pm.test(\"Pre Medicare premium of API matched with that of average_net_premium from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(preMed_Premium_DB).to.eql(Number(pm.environment.get(\"PreMed_Premium4\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/individual_plans_average_calculation{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"individual_plans_average_calculation{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRE_RET_OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(Plan_type,eq,{{planType}})~and(State,eq,{{retirementState}})~and(Health_Grade,eq,{{healthGrade}})~and(Age,eq,63)~and(Year,eq,{{Year}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Pre-Medicare OOP\r",
													"var preMed_OOP_DB=Math.round(response[0].OOP);\r",
													"pm.test(\"Pre Medicare OOP of API matched with that of Pre Medicare OOP from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(preMed_OOP_DB).to.eql(Number(pm.environment.get(\"PreMed_OOP4\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PRE_RET{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PRE_RET{{query}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Magi5_HG5",
							"item": [
								{
									"name": "Magi5_individualTotalExpensesR3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"Year\",  response.individualTotalExpenses[0].year);\r",
													"//PartA_OOP\r",
													"postman.setEnvironmentVariable(\"PreMed_Premium5\",  Math.round(response.individualTotalExpenses[0].premium));\r",
													"postman.setEnvironmentVariable(\"PreMed_OOP5\",  Math.round(response.individualTotalExpenses[0].outofpocket));\r",
													"postman.setEnvironmentVariable(\"PreMed_Total\",  Math.round(response.individualTotalExpenses[0].totalPreMedicareCost));\r",
													"\r",
													"console.log(\"Pre medicare premium : \"+ pm.environment.get(\"PreMed_Premium\"));\r",
													"\r",
													"//Part D Premium Validation\r",
													"postman.setEnvironmentVariable(\"partD_Premium_1\",  Math.round(response.individualTotalExpenses[0].partDPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"//Part B Premium Validation\r",
													"postman.setEnvironmentVariable(\"partB_Premium_1\",  Math.round(response.individualTotalExpenses[0].partBPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"\r",
													"//Part C Premium\r",
													"postman.setEnvironmentVariable(\"partC_Premium_1\",  Math.round(response.individualTotalExpenses[0].partCPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"\r",
													"\r",
													"\r",
													"//Also please validate the data for partAPremium, partCPremium, partDPremium, planGPremium, planNPremium, partFPremium\r",
													"\r",
													"//PlanG Premium validation\r",
													"postman.setEnvironmentVariable(\"planG_Premium_1\",  Math.round(response.individualTotalExpenses[0].planGPremium));\r",
													"\r",
													"//PlanN Premium validation\r",
													"postman.setEnvironmentVariable(\"planN_Premium_1\",  Math.round(response.individualTotalExpenses[0].planNPremium));\r",
													"//PlanF Premium validation\r",
													"postman.setEnvironmentVariable(\"planF_Premium_1\",  Math.round(response.individualTotalExpenses[0].partFPremium));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"versionId\",1);\r",
													"postman.setEnvironmentVariable(\"planId\",\"2021Arkansas5001BronzePOSHealthSherpa\");\r",
													"postman.setEnvironmentVariable(\"birthDate\",\"01-1958\");\r",
													"postman.setEnvironmentVariable(\"retirementYear\",\"01-2021\");\r",
													"postman.setEnvironmentVariable(\"lifeExpectancy\",70);\r",
													"postman.setEnvironmentVariable(\"planType\",\"Bronze\");\r",
													"postman.setEnvironmentVariable(\"healthGrade\",\"5\");\r",
													"postman.setEnvironmentVariable(\"singleVsMultipleMagi\",false);\r",
													"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\",false);\r",
													"postman.setEnvironmentVariable(\"magiTier\",5);\r",
													"postman.setEnvironmentVariable(\"taxFilingStatus\",\"MARRIED_FILING_JOINTLY\");\r",
													"postman.setEnvironmentVariable(\"magiDollarAmount\",180000);\r",
													"postman.setEnvironmentVariable(\"stateName\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"zipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"retirementState\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"retirementZipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"boughtPlanA\",true);\r",
													"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\",false);\r",
													"postman.setEnvironmentVariable(\"reserveDaysUsed\",0);\r",
													"postman.setEnvironmentVariable(\"dental\",true);\r",
													"postman.setEnvironmentVariable(\"dentalHealthGrade\",1);\r",
													"postman.setEnvironmentVariable(\"tobacco\",false);\r",
													"//postman.setEnvironmentVariable(\"yearWiseMagiDetailList\",);\r",
													"\r",
													"\r",
													"//postman.setEnvironmentVariable(\"versionId\",1);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"planId\": \"{{planId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": {{lifeExpectancy}},\r\n    \"planType\": \"{{planType}}\",\r\n    \"healthGrade\": \"{{healthGrade}}\",\r\n    \"singleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"magiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"magiTier\": {{magiTier}},\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"magiDollarAmount\": {{magiDollarAmount}},\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": {{zipcode}},\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": {{retirementZipcode}},\r\n    \"boughtPlanA\": {{boughtPlanA}},\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"reserveDaysUsed\": {{reserveDaysUsed}},\r\n    \"dental\": {{dental}},\r\n    \"dentalHealthGrade\": {{dentalHealthGrade}},\r\n    \"tobacco\": {{tobacco}}\r\n    \r\n}"
										},
										"url": {
											"raw": "{{server}}/individualTotalExpensesR3",
											"host": [
												"{{server}}"
											],
											"path": [
												"individualTotalExpensesR3"
											]
										}
									},
									"response": []
								},
								{
									"name": "PreMed_individual_plans_average_calculation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(plan_id,eq,{{planId}})~and(State,eq,{{retirementState}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Pre-Medicare Premium\r",
													"var preMed_Premium_DB=Math.round(response[0].average_net_premium);\r",
													"pm.test(\"Pre Medicare premium of API matched with that of average_net_premium from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(preMed_Premium_DB).to.eql(Number(pm.environment.get(\"PreMed_Premium5\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/individual_plans_average_calculation{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"individual_plans_average_calculation{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRE_RET_OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(Plan_type,eq,{{planType}})~and(State,eq,{{retirementState}})~and(Health_Grade,eq,{{healthGrade}})~and(Age,eq,63)~and(Year,eq,{{Year}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Pre-Medicare OOP\r",
													"var preMed_OOP_DB=Math.round(response[0].OOP);\r",
													"pm.test(\"Pre Medicare OOP of API matched with that of Pre Medicare OOP from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(preMed_OOP_DB).to.eql(Number(pm.environment.get(\"PreMed_OOP5\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PRE_RET{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PRE_RET{{query}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Magi6_HG5",
							"item": [
								{
									"name": "Magi6_individualTotalExpensesR3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"Year\",  response.individualTotalExpenses[0].year);\r",
													"//PartA_OOP\r",
													"postman.setEnvironmentVariable(\"PreMed_Premium6\",  Math.round(response.individualTotalExpenses[0].premium));\r",
													"postman.setEnvironmentVariable(\"PreMed_OOP6\",  Math.round(response.individualTotalExpenses[0].outofpocket));\r",
													"postman.setEnvironmentVariable(\"PreMed_Total\",  Math.round(response.individualTotalExpenses[0].totalPreMedicareCost));\r",
													"\r",
													"console.log(\"Pre medicare premium : \"+ pm.environment.get(\"PreMed_Premium\"));\r",
													"\r",
													"//Part D Premium Validation\r",
													"postman.setEnvironmentVariable(\"partD_Premium_1\",  Math.round(response.individualTotalExpenses[0].partDPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"//Part B Premium Validation\r",
													"postman.setEnvironmentVariable(\"partB_Premium_1\",  Math.round(response.individualTotalExpenses[0].partBPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"\r",
													"//Part C Premium\r",
													"postman.setEnvironmentVariable(\"partC_Premium_1\",  Math.round(response.individualTotalExpenses[0].partCPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"\r",
													"\r",
													"\r",
													"//Also please validate the data for partAPremium, partCPremium, partDPremium, planGPremium, planNPremium, partFPremium\r",
													"\r",
													"//PlanG Premium validation\r",
													"postman.setEnvironmentVariable(\"planG_Premium_1\",  Math.round(response.individualTotalExpenses[0].planGPremium));\r",
													"\r",
													"//PlanN Premium validation\r",
													"postman.setEnvironmentVariable(\"planN_Premium_1\",  Math.round(response.individualTotalExpenses[0].planNPremium));\r",
													"//PlanF Premium validation\r",
													"postman.setEnvironmentVariable(\"planF_Premium_1\",  Math.round(response.individualTotalExpenses[0].partFPremium));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"versionId\",1);\r",
													"postman.setEnvironmentVariable(\"planId\",\"2021Arkansas5001BronzePOSHealthSherpa\");\r",
													"postman.setEnvironmentVariable(\"birthDate\",\"01-1958\");\r",
													"postman.setEnvironmentVariable(\"retirementYear\",\"01-2021\");\r",
													"postman.setEnvironmentVariable(\"lifeExpectancy\",70);\r",
													"postman.setEnvironmentVariable(\"planType\",\"Bronze\");\r",
													"postman.setEnvironmentVariable(\"healthGrade\",\"5\");\r",
													"postman.setEnvironmentVariable(\"singleVsMultipleMagi\",false);\r",
													"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\",false);\r",
													"postman.setEnvironmentVariable(\"magiTier\",6);\r",
													"postman.setEnvironmentVariable(\"taxFilingStatus\",\"MARRIED_FILING_JOINTLY\");\r",
													"postman.setEnvironmentVariable(\"magiDollarAmount\",180000);\r",
													"postman.setEnvironmentVariable(\"stateName\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"zipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"retirementState\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"retirementZipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"boughtPlanA\",true);\r",
													"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\",false);\r",
													"postman.setEnvironmentVariable(\"reserveDaysUsed\",0);\r",
													"postman.setEnvironmentVariable(\"dental\",true);\r",
													"postman.setEnvironmentVariable(\"dentalHealthGrade\",1);\r",
													"postman.setEnvironmentVariable(\"tobacco\",false);\r",
													"//postman.setEnvironmentVariable(\"yearWiseMagiDetailList\",);\r",
													"\r",
													"\r",
													"//postman.setEnvironmentVariable(\"versionId\",1);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"planId\": \"{{planId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": {{lifeExpectancy}},\r\n    \"planType\": \"{{planType}}\",\r\n    \"healthGrade\": \"{{healthGrade}}\",\r\n    \"singleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"magiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"magiTier\": {{magiTier}},\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"magiDollarAmount\": {{magiDollarAmount}},\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": {{zipcode}},\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": {{retirementZipcode}},\r\n    \"boughtPlanA\": {{boughtPlanA}},\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"reserveDaysUsed\": {{reserveDaysUsed}},\r\n    \"dental\": {{dental}},\r\n    \"dentalHealthGrade\": {{dentalHealthGrade}},\r\n    \"tobacco\": {{tobacco}}\r\n    \r\n}"
										},
										"url": {
											"raw": "{{server}}/individualTotalExpensesR3",
											"host": [
												"{{server}}"
											],
											"path": [
												"individualTotalExpensesR3"
											]
										}
									},
									"response": []
								},
								{
									"name": "PreMed_individual_plans_average_calculation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(plan_id,eq,{{planId}})~and(State,eq,{{retirementState}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Pre-Medicare Premium\r",
													"var preMed_Premium_DB=Math.round(response[0].average_net_premium);\r",
													"pm.test(\"Pre Medicare premium of API matched with that of average_net_premium from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(preMed_Premium_DB).to.eql(Number(pm.environment.get(\"PreMed_Premium6\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/individual_plans_average_calculation{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"individual_plans_average_calculation{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRE_RET_OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(Plan_type,eq,{{planType}})~and(State,eq,{{retirementState}})~and(Health_Grade,eq,{{healthGrade}})~and(Age,eq,63)~and(Year,eq,{{Year}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Pre-Medicare OOP\r",
													"var preMed_OOP_DB=Math.round(response[0].OOP);\r",
													"pm.test(\"Pre Medicare OOP of API matched with that of Pre Medicare OOP from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(preMed_OOP_DB).to.eql(Number(pm.environment.get(\"PreMed_OOP6\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PRE_RET{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PRE_RET{{query}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Medicare_Magi_Validation",
					"item": [
						{
							"name": "MagiTier1",
							"item": [
								{
									"name": "Magi1_individualTotalExpensesR3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//PartA\r",
													"postman.setEnvironmentVariable(\"Year\", response.individualTotalExpenses[0].year);\r",
													"postman.setEnvironmentVariable(\"partA_Premium_1\",  Math.round(response.individualTotalExpenses[0].partAPremium));\r",
													"postman.setEnvironmentVariable(\"partA_OOP_1\",  Math.round(response.individualTotalExpenses[0].partAOOP));\r",
													"\r",
													"//Part D Premium Validation\r",
													"postman.setEnvironmentVariable(\"partD_Premium_1\",  Math.round(response.individualTotalExpenses[0].partDPremium));\r",
													"postman.setEnvironmentVariable(\"partD_OOP_Premium_1\",  Math.round(response.individualTotalExpenses[0].partDOOP));\r",
													"//Part B Premium Validation\r",
													"postman.setEnvironmentVariable(\"partB_Premium_1\",  Math.round(response.individualTotalExpenses[0].partBPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"postman.setEnvironmentVariable(\"partB_OOP_1\",  Math.round(response.individualTotalExpenses[0].partBOOP));\r",
													"//Part C Premium\r",
													"postman.setEnvironmentVariable(\"partC_Premium_1\",  Math.round(response.individualTotalExpenses[0].partCPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"\r",
													"\r",
													"\r",
													"//Also please validate the data for partAPremium, partCPremium, partDPremium, planGPremium, planNPremium, partFPremium\r",
													"\r",
													"//PlanG Premium validation\r",
													"postman.setEnvironmentVariable(\"planG_Premium_1\",  Math.round(response.individualTotalExpenses[0].planGPremium));\r",
													"//PlanG_OOP\r",
													"postman.setEnvironmentVariable(\"planG_OOP_1\",  Math.round(response.individualTotalExpenses[0].planGOOP));\r",
													"\r",
													"//PlanN Premium validation\r",
													"postman.setEnvironmentVariable(\"planN_Premium_1\",  Math.round(response.individualTotalExpenses[0].planNPremium));\r",
													"//planN OOP\r",
													"postman.setEnvironmentVariable(\"planN_OOP_1\",  Math.round(response.individualTotalExpenses[0].planNOOP));\r",
													"//PlanF Premium validation\r",
													"postman.setEnvironmentVariable(\"planF_Premium_1\",  Math.round(response.individualTotalExpenses[0].partFPremium));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"versionId\",1);\r",
													"postman.setEnvironmentVariable(\"planId\",\"2021Arkansas5001BronzePOSHealthSherpa\");\r",
													"postman.setEnvironmentVariable(\"birthDate\",\"01-1956\");\r",
													"postman.setEnvironmentVariable(\"retirementYear\",\"01-2021\");\r",
													"postman.setEnvironmentVariable(\"lifeExpectancy\",70);\r",
													"postman.setEnvironmentVariable(\"planType\",\"silver\");\r",
													"postman.setEnvironmentVariable(\"healthGrade\",\"1\");\r",
													"postman.setEnvironmentVariable(\"singleVsMultipleMagi\",false);\r",
													"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\",false);\r",
													"postman.setEnvironmentVariable(\"magiTier\",1);\r",
													"postman.setEnvironmentVariable(\"taxFilingStatus\",\"MARRIED_FILING_JOINTLY\");\r",
													"postman.setEnvironmentVariable(\"magiDollarAmount\",180000);\r",
													"postman.setEnvironmentVariable(\"stateName\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"zipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"retirementState\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"retirementZipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"boughtPlanA\",true);\r",
													"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\",false);\r",
													"postman.setEnvironmentVariable(\"reserveDaysUsed\",0);\r",
													"postman.setEnvironmentVariable(\"dental\",true);\r",
													"postman.setEnvironmentVariable(\"dentalHealthGrade\",1);\r",
													"postman.setEnvironmentVariable(\"tobacco\",false);\r",
													"//postman.setEnvironmentVariable(\"yearWiseMagiDetailList\",);\r",
													"\r",
													"\r",
													"//postman.setEnvironmentVariable(\"versionId\",1);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"planId\": \"{{planId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": {{lifeExpectancy}},\r\n    \"planType\": \"{{planType}}\",\r\n    \"healthGrade\": \"{{healthGrade}}\",\r\n    \"singleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"magiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"magiTier\": {{magiTier}},\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"magiDollarAmount\": {{magiDollarAmount}},\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": {{zipcode}},\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": {{retirementZipcode}},\r\n    \"boughtPlanA\": {{boughtPlanA}},\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"reserveDaysUsed\": {{reserveDaysUsed}},\r\n    \"dental\": {{dental}},\r\n    \"dentalHealthGrade\": {{dentalHealthGrade}},\r\n    \"tobacco\": {{tobacco}}\r\n    \r\n}"
										},
										"url": {
											"raw": "{{server}}/individualTotalExpensesR3",
											"host": [
												"{{server}}"
											],
											"path": [
												"individualTotalExpensesR3"
											]
										}
									},
									"response": []
								},
								{
									"name": "STATE_MULT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//PartC state multi\r",
													"postman.setEnvironmentVariable(\"partC_stateMulti\",  response[0].premC_mult);\r",
													"//PartD state multi\r",
													"postman.setEnvironmentVariable(\"partD_stateMulti\",  response[0].premD_mult);\r",
													"postman.setEnvironmentVariable(\"OOP_stateMulti\",  response[0].OOP_mult);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query=\"?_where=(State,eq,{{retirementState}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/STATE_MULT{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"STATE_MULT{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "magi1_PARTA Premium&OOP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"//Part A premium\r",
													"var planA_Premium_1DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartA premium of API matched with that of premium A from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planA_Premium_1DB).to.eql(Number(pm.environment.get(\"partA_Premium_1\")));\r",
													"});\r",
													"//Part A OOP\r",
													"var partA_OOP_1DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartA OOP of API matched with that of OOP of part A from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(partA_OOP_1DB).to.eql((pm.environment.get(\"partA_OOP_1\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query=\"?_where=(year,eq,{{Year}})~and(current_age,eq,65)~and(Health_Grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTA{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTA{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi1_PARTB_Premium",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//PartB premium\r",
													"var partB_Premium_1DB=Math.round(response[0].c1);\r",
													"pm.test(\"PartB premium of API matched with that of premium B from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(partB_Premium_1DB).to.eql(Number(pm.environment.get(\"partB_Premium_1\")));\r",
													"});\r",
													"\r",
													"// //PartD premium\r",
													"// var partD_Premium_1DB=response[2].c1;\r",
													"// var C =  pm.environment.get(\"partD_Premium_1\");\r",
													"// var D= partD_Premium_1DB * postman.getEnvironmentVariable(\"partD_stateMulti\");\r",
													"// postman.setEnvironmentVariable(\"partD_Pre_1DB_stateMulti\", Math.round(D));\r",
													"// pm.test(\"PartD premium of API matched with that of premium D from DB\", function () {\r",
													"    \r",
													"//     pm.expect(postman.getEnvironmentVariable(\"partD_Pre_1DB_stateMulti\")).to.eql(pm.environment.get(\"partD_Premium_1\"));\r",
													"// });\r",
													"\r",
													"\r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  /*\r",
													"var partC_Premium_1DB = response[0].Premium;\r",
													"var A = partC_Premium_1DB/12;\r",
													"var B = A *postman.getEnvironmentVariable(\"partC_stateMulti\");\r",
													"postman.setEnvironmentVariable(\"partC_Pre_1DB_stateMulti\", Math.round(B));\r",
													"\r",
													"pm.test(\"partC_premium check with API\", () => {\r",
													"  \r",
													"  pm.expect(postman.getEnvironmentVariable(\"partC_Pre_1DB_stateMulti\")).to.eql(postman.getEnvironmentVariable(\"partC_Premium_1\"));\r",
													"  });\r",
													"*/\r",
													"  // jsonData is not defined\r",
													"  //const isEqual = (Math.round(response[2].c2) == postman.getEnvironmentVariable(\"partD_Premium_2\"));\r",
													"  //pm.expect(isEqual, \"DB_part_D_premium did not match with API\").to.be.true;\r",
													"  //pm.expect(isEqual, \"DB_part_D_premium matched with API\").to.be.false;\r",
													"\r",
													"\r",
													"/*\r",
													"if ((Math.round(response[2].c2))== postman.getEnvironmentVariable(\"partD_Premium_2\")){\r",
													"    pm.test(\"DB_part_D_premium matched with API\")\r",
													"}\r",
													"else pm.test(\"DB_part_D_premium did not match with API\")\r",
													"*/\r",
													"//PartB premium\r",
													"// var planB_Premium_2DB = Math.round(response[0].c2);\r",
													"// console.log(planB_Premium_2DB);\r",
													"// pm.test(\"DB_partB_premium check with API\", () => {\r",
													"//   pm.expect((Math.round(response[0].c2))== postman.getEnvironmentVariable(\"partB_Premium_2\"))\r",
													"// });\r",
													"//   pm.expect(planB_Premium_2DB).to.eql(postman.getEnvironmentVariable(\"partB_Premium_2\")); \r",
													"\r",
													"\r",
													"// var planB_Premium_2DB = Math.round(response[0].c2);\r",
													"// if ((Math.round(response[0].c2))== postman.getEnvironmentVariable(\"partB_Premium_2\")){\r",
													"//     pm.test(\"DB_partB_premium matched with API and is \"+ planB_Premium_2DB)\r",
													"// }\r",
													"// else pm.test(\"DB_partB_premium did not match with ///API\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/api/PART_COSTS",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PART_COSTS"
											]
										}
									},
									"response": []
								},
								{
									"name": "magi1_PARTB_OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query =\"?_where=(year,eq,{{Year}})~and(age,eq,65)~and(Income,eq,{{magiTier}})~and(healthgrade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Part B OOP\r",
													"var partB_OOP_1DB=Math.round(response[0].OOP);\r",
													"pm.test(\"Partb OOP of API matched with that of OOP of part B from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(partB_OOP_1DB*pm.environment.get(\"OOP_stateMulti\"))).to.eql(Number(pm.environment.get(\"partB_OOP_1\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTB{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTB{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "magi1_PARTD_OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(year,eq,{{Year}})~and(Age,eq,65)~and(HealthGrade,eq,{{healthGrade}})~and(Income,eq,{{magiTier}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//PartD OOP\r",
													"var partD_OOP_1DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartD OOP of API matched with that of partD OOP from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(partD_OOP_1DB*pm.environment.get(\"OOP_stateMulti\"))).to.eql(Number(pm.environment.get(\"partD_OOP_Premium_1\")));\r",
													"});\r",
													"//PartD Premium\r",
													"var partD_Premium_1DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartD Premium of API matched with that of partD premium from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(partD_Premium_1DB*pm.environment.get(\"partD_stateMulti\"))).to.eql(Number(pm.environment.get(\"partD_Premium_1\")));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTD{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTD{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HG1_plan_n_Pre&OOP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"//Plan N premium\r",
													"var planN_Premium_1DB=Math.round(response[0].premium);\r",
													"pm.test(\"PlanN premium of API matched with that of plan N premium  from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planN_Premium_1DB).to.eql(Number(pm.environment.get(\"planN_Premium_1\")));\r",
													"});\r",
													"//PlanN_OOP\r",
													"var planN_OOP_1DB=Math.round(response[0].oop);\r",
													"pm.test(\"PlanN OOP of API matched with that of PlanN OOP from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planN_OOP_1DB).to.eql(Number(pm.environment.get(\"planN_OOP_1\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(state,eq,{{retirementState}})~and(age_now,eq,65)~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/plan_n_cost{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"plan_n_cost{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HG1_PlanF_premium",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function(){\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response=JSON.parse(responseBody);\r",
													"\r",
													"//Plan F Premium(spelling in uppercase P)\r",
													"var planF_Premium_1DB = Math.round(response[0].Premium);\r",
													"if(Math.round(response[0].Premium)== postman.getEnvironmentVariable(\"planF_Premium_1\")){\r",
													"    pm.test(\"DB_planF_premium matched with API and is \"+ planF_Premium_1DB)\r",
													"}\r",
													"else pm.test(\"DB_planF_premium did not match with API\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/part_f_r3?_where=(state,eq,Arkansas)~and(age_now,eq,65)~and(zipcode,eq,72003)~and(age_then_year,eq,2021)~and(current_health_grade,eq,1)",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"part_f_r3"
											],
											"query": [
												{
													"key": "_where",
													"value": "(state,eq,Arkansas)~and(age_now,eq,65)~and(zipcode,eq,72003)~and(age_then_year,eq,2021)~and(current_health_grade,eq,1)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "HG1_plan_g_Pre&OOP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//Plan G Premium\r",
													"\r",
													"\r",
													"postman.setEnvironmentVariable(\"planG_Premium_1DB\", Math.round(response[0].premium));\r",
													"var planG_Premium_1DB= Math.round(response[0].premium);\r",
													"pm.test(\"PlanG premium of API matched with that of premium of planG from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(planG_Premium_1DB)).to.eql(Number(pm.environment.get(\"planG_Premium_1\")));\r",
													"});\r",
													"\r",
													"//PlanG OOP\r",
													"postman.setEnvironmentVariable(\"planG_OOP_1DB\", Math.round(response[0].oop));\r",
													"var planG_OOP_1DB= response[0].oop;\r",
													"pm.test(\"PlanG OOP of API matched with that of OOP of planG from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(planG_OOP_1DB)).to.eql(Number(pm.environment.get(\"planG_OOP_1\")));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(state,eq,{{retirementState}})~and(age_now,eq,65)~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													"postman.setEnvironmentVariable(\"retirementState\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"zipcode\",72003);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/plan_g_cost{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"plan_g_cost{{query}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "MagiTier2",
							"item": [
								{
									"name": "Magi2_individualTotalExpensesR3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
													"var response = JSON.parse(responseBody);\r",
													"//Calculate Age\r",
													"var BD = response.birthDate;\r",
													"var bit = BD.split('-');\r",
													"var birthmonth = Number(bit[0]);\r",
													"var birthyear = Number(bit[1]);\r",
													"// console.log(birthyear);\r",
													"var current_date = new Date();\r",
													"var age = current_date.getFullYear() - birthyear;\r",
													"if (current_date.getMonth() < birthmonth) { age -= 1; }\r",
													"console.log(\"Age : \"+age);\r",
													"postman.setEnvironmentVariable(\"Age\", age);\r",
													"\r",
													"//Year\r",
													"postman.setEnvironmentVariable(\"Year\",response.individualTotalExpenses[0].year);\r",
													"//PartA(It is dependent of year)\r",
													"postman.setEnvironmentVariable(\"partA_Premium_2\",  Math.round(response.individualTotalExpenses[0].partAPremium));\r",
													"//partA oop\r",
													"postman.setEnvironmentVariable(\"partA_OOP_2\",  Math.round(response.individualTotalExpenses[0].partAOOP));\r",
													"\r",
													"//Part D Premium Validation\r",
													"postman.setEnvironmentVariable(\"partD_surcharge_2\",(response.individualTotalExpenses[0].partDPremiumSurcharge));\r",
													"postman.setEnvironmentVariable(\"partD_Premium_2\",  Math.round(response.individualTotalExpenses[0].partDPremium));\r",
													"//part D OOP\r",
													"postman.setEnvironmentVariable(\"partD_OOP_2\",  Math.round(response.individualTotalExpenses[0].partDOOP));\r",
													"//Part B Premium Validation\r",
													"postman.setEnvironmentVariable(\"partB_Premium_2\",  Math.round(response.individualTotalExpenses[0].partBPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"//PartB OOP\r",
													"postman.setEnvironmentVariable(\"partB_OOP_2\",  Math.round(response.individualTotalExpenses[0].partBOOP));\r",
													"//Part C Premium\r",
													"postman.setEnvironmentVariable(\"partC_Premium_2\",  Math.round(response.individualTotalExpenses[0].partCPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"//PartC OOP\r",
													"postman.setEnvironmentVariable(\"partC_OOP_2\",  Math.round(response.individualTotalExpenses[0].partCOOP));\r",
													"\r",
													"\r",
													"//Also please validate the data for partAPremium, partCPremium, partDPremium, planGPremium, planNPremium, partFPremium\r",
													"\r",
													"//PlanG Premium validation\r",
													"postman.setEnvironmentVariable(\"planG_Premium_2\",  Math.round(response.individualTotalExpenses[0].planGPremium));\r",
													"//PlanG OOP\r",
													"postman.setEnvironmentVariable(\"planG_OOP_2\",  Math.round(response.individualTotalExpenses[0].planGOOP));\r",
													"\r",
													"//PlanN Premium validation\r",
													"postman.setEnvironmentVariable(\"planN_Premium_2\",  Math.round(response.individualTotalExpenses[0].planNPremium));\r",
													"//Plan N OOP\r",
													"postman.setEnvironmentVariable(\"planN_OOP_2\",  Math.round(response.individualTotalExpenses[0].planNOOP));\r",
													"//PlanF Premium validation\r",
													"postman.setEnvironmentVariable(\"planF_Premium_2\",  Math.round(response.individualTotalExpenses[0].partFPremium));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"versionId\",1);\r",
													"postman.setEnvironmentVariable(\"planId\",\"2021Arkansas5001BronzePOSHealthSherpa\");\r",
													"postman.setEnvironmentVariable(\"birthDate\",\"01-1956\");\r",
													"postman.setEnvironmentVariable(\"retirementYear\",\"01-2021\");\r",
													"postman.setEnvironmentVariable(\"lifeExpectancy\",70);\r",
													"postman.setEnvironmentVariable(\"planType\",\"Bronze\");\r",
													"postman.setEnvironmentVariable(\"healthGrade\",\"2\");\r",
													"postman.setEnvironmentVariable(\"singleVsMultipleMagi\",true);\r",
													"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\",false);\r",
													"postman.setEnvironmentVariable(\"magiTier\",2);\r",
													"postman.setEnvironmentVariable(\"taxFilingStatus\",\"MARRIED_FILING_JOINTLY\");\r",
													"postman.setEnvironmentVariable(\"magiDollarAmount\",180000);\r",
													"postman.setEnvironmentVariable(\"stateName\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"zipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"retirementState\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"retirementZipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"boughtPlanA\",true);\r",
													"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\",false);\r",
													"postman.setEnvironmentVariable(\"reserveDaysUsed\",0);\r",
													"postman.setEnvironmentVariable(\"dental\",true);\r",
													"postman.setEnvironmentVariable(\"dentalHealthGrade\",1);\r",
													"postman.setEnvironmentVariable(\"tobacco\",false);\r",
													"//postman.setEnvironmentVariable(\"yearWiseMagiDetailList\",);\r",
													"\r",
													"\r",
													"//postman.setEnvironmentVariable(\"versionId\",1);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"planId\": \"{{planId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": {{lifeExpectancy}},\r\n    \"planType\": \"{{planType}}\",\r\n    \"healthGrade\": \"{{healthGrade}}\",\r\n    \"singleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"magiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"magiTier\": {{magiTier}},\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"magiDollarAmount\": {{magiDollarAmount}},\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": {{zipcode}},\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": {{retirementZipcode}},\r\n    \"boughtPlanA\": {{boughtPlanA}},\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"reserveDaysUsed\": {{reserveDaysUsed}},\r\n    \"dental\": {{dental}},\r\n    \"dentalHealthGrade\": {{dentalHealthGrade}},\r\n    \"tobacco\": {{tobacco}},\r\n    \"yearWiseMagiDetailList\" :\r\n    [\r\n        {\r\n            \"year\": 2021,\r\n            \"taxFilingStatus\": \"FILING_INDIVIDUALLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2022,\r\n            \"taxFilingStatus\": \"FILING_INDIVIDUALLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2023,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"110000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2024,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2025,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2026,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        }\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{server}}/individualTotalExpensesR3",
											"host": [
												"{{server}}"
											],
											"path": [
												"individualTotalExpensesR3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Part_C/STATE_MULT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//PartC premium\r",
													"postman.setEnvironmentVariable(\"partC_stateMulti\",  response[0].premC_mult);\r",
													"postman.setEnvironmentVariable(\"OOP_stateMulti\",  response[0].OOP_mult);\r",
													"postman.setEnvironmentVariable(\"partD_stateMulti\",  response[0].premD_mult);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(State,eq,{{retirementState}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/STATE_MULT{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"STATE_MULT{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "magi2_PartA_Pre&OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query=\"?_where=(year,eq,{{Year}})~and(current_age,eq,{{Age}})~and(Health_Grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"//Part A premium\r",
													"var planA_Premium_2DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartA premium of API matched with that of premium A from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planA_Premium_2DB).to.eql(Number(pm.environment.get(\"partA_Premium_2\")));\r",
													"});\r",
													"//Part A OOP\r",
													"var partA_OOP_2DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartA OOP of API matched with that of OOP of part A from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(partA_OOP_2DB*pm.environment.get(\"OOP_stateMulti\"))).to.eql(Number(pm.environment.get(\"partA_OOP_2\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTA{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTA{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "magi2_PARTB_OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query =\"?_where=(year,eq,{{Year}})~and(age,eq,{{Age}})~and(Income,eq,{{magiTier}})~and(healthgrade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Part B OOP\r",
													"var partB_OOP_2DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartB OOP_2 of API matched with that of OOP of part B from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(partB_OOP_2DB*pm.environment.get(\"OOP_stateMulti\"))).to.eql(Number(pm.environment.get(\"partB_OOP_2\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTB{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTB{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi2_PART_BD_Premiums",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													" //PartB premium\r",
													"var planB_Premium_2DB=Math.round(response[0].c2);\r",
													"pm.test(\"PartB premium of API matched with that of premium B from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planB_Premium_2DB).to.eql(Number(pm.environment.get(\"partB_Premium_2\")));\r",
													"});\r",
													"\r",
													"\r",
													"//PartD premium\r",
													"\r",
													"pm.test(\"PartD premium of API matched with that of premium D from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Number(pm.environment.get(\"partD_Premium_2\"))).to.eql(Number(pm.environment.get(\"partD_surcharge_2\"))+Number(pm.environment.get(\"partD_Premium_1\")));\r",
													"});\r",
													"\r",
													"\r",
													" \r",
													"  \r",
													"  \r",
													"  \r",
													" \r",
													"// var planD_Premium_2DB = Math.round(response[2].c2);\r",
													"// pm.test(\"DB_part_D_premium check with API\", () => {\r",
													"  \r",
													"//   pm.expect((Math.round(response[2].c2))).to.eql(postman.getEnvironmentVariable(\"partD_Premium_2\"));\r",
													"//   });\r",
													"//PartB premium\r",
													"// var planB_Premium_2DB = Math.round(response[0].c2);\r",
													"// pm.test(\"DB_part_B_premium check with API\", () => {\r",
													"  \r",
													"//   pm.expect((Math.round(response[0].c2))).to.eql(postman.getEnvironmentVariable(\"partB_Premium_2\"));\r",
													"//   });  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  \r",
													"  // jsonData is not defined\r",
													"  //const isEqual = (Math.round(response[2].c2) == postman.getEnvironmentVariable(\"partD_Premium_2\"));\r",
													"  //pm.expect(isEqual, \"DB_part_D_premium did not match with API\").to.be.true;\r",
													"  //pm.expect(isEqual, \"DB_part_D_premium matched with API\").to.be.false;\r",
													"\r",
													"\r",
													"/*\r",
													"if ((Math.round(response[2].c2))== postman.getEnvironmentVariable(\"partD_Premium_2\")){\r",
													"    pm.test(\"DB_part_D_premium matched with API\")\r",
													"}\r",
													"else pm.test(\"DB_part_D_premium did not match with API\")\r",
													"*/\r",
													"//PartB premium\r",
													"// var planB_Premium_2DB = Math.round(response[0].c2);\r",
													"// console.log(planB_Premium_2DB);\r",
													"// pm.test(\"DB_partB_premium check with API\", () => {\r",
													"//   pm.expect((Math.round(response[0].c2))== postman.getEnvironmentVariable(\"partB_Premium_2\"))\r",
													"// });\r",
													"//   pm.expect(planB_Premium_2DB).to.eql(postman.getEnvironmentVariable(\"partB_Premium_2\")); \r",
													"\r",
													"\r",
													"// var planB_Premium_2DB = Math.round(response[0].c2);\r",
													"// if ((Math.round(response[0].c2))== postman.getEnvironmentVariable(\"partB_Premium_2\")){\r",
													"//     pm.test(\"DB_partB_premium matched with API and is \"+ planB_Premium_2DB)\r",
													"// }\r",
													"// else pm.test(\"DB_partB_premium did not match with ///API\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/api/PART_COSTS",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PART_COSTS"
											]
										}
									},
									"response": []
								},
								{
									"name": "magi2_PARTD_Pre&OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query =\"?_where=(HealthGrade,eq,{{healthGrade}})~and(Age,eq,{{Age}})~and(Year,eq,{{Year}})~and(Income,eq,{{magiTier}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\",query);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													" //PartD premium\r",
													"var planD_Premium_2DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartD premium of API matched with that of premium D from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Number(pm.environment.get(\"partD_Premium_2\"))).to.eql((Number(pm.environment.get(\"partD_surcharge_2\")))+(Number(pm.environment.get(\"partD_Premium_1\"))));\r",
													"});\r",
													"//PartD OOP\r",
													"var planD_OOP_2DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartD OOP of API matched with that of OOP D from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Number(pm.environment.get(\"partD_OOP_2\"))).to.eql(Math.round((planD_OOP_2DB)*(pm.environment.get(\"OOP_stateMulti\"))));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTD{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTD{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HG2_plan_n_Pre&OOP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//Plan N premium\r",
													"var planN_Premium_2DB=Math.round(response[0].premium);\r",
													"\r",
													"pm.test(\"PlanN premium of API matched with that of plan N premium  from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planN_Premium_2DB).to.eql(Number(pm.environment.get(\"planN_Premium_2\")));\r",
													"});\r",
													"//PlanN_OOP\r",
													"var planN_OOP_2DB=Math.round(response[0].oop);\r",
													"pm.test(\"PlanN OOP of API matched with that of PlanN OOP from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planN_OOP_2DB).to.eql(Number(pm.environment.get(\"planN_OOP_2\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(state,eq,{{retirementState}})~and(age_now,eq,{{Age}})~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/plan_n_cost{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"plan_n_cost{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HG2_PlanF_premium",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function(){\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response=JSON.parse(responseBody);\r",
													"\r",
													"//Plan F Premium(spelling in uppercase P)\r",
													"var planF_Premium_2DB = Math.round(response[0].Premium);\r",
													"if(Math.round(response[0].Premium)== postman.getEnvironmentVariable(\"planF_Premium_2\")){\r",
													"    pm.test(\"DB_planF_premium matched with API and is \"+ planF_Premium_2DB)\r",
													"}\r",
													"else pm.test(\"DB_planF_premium did not match with API\")\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query=\"?_where=(state,eq,{{retirementState}})~and(age_now,eq,{{Age}})~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\",query);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/part_f_r3{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"part_f_r3{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HG2_plan_g_cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//Plan G\r",
													"var planG_Premium_2DB = Math.round(response[0].oop);\r",
													"\r",
													"if (Math.round(response[0].premium)== postman.getEnvironmentVariable(\"planG_Premium_2\")){\r",
													"    pm.test(\"DB_planG_premium matched with API and is \")\r",
													"}\r",
													"else pm.test(\"DB_planG_premium did not match with API\")\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"//PlanG OOP\r",
													"postman.setEnvironmentVariable(\"planG_OOP_2DB\", Math.round(response[0].oop));\r",
													"var planG_OOP_2DB= response[0].oop;\r",
													"pm.test(\"PlanG OOP of API matched with that of OOP of planG from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(planG_OOP_2DB)).to.eql(Number(pm.environment.get(\"planG_OOP_2\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(state,eq,{{retirementState}})~and(age_now,eq,{{Age}})~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/plan_g_cost{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"plan_g_cost{{query}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "MagiTier3",
							"item": [
								{
									"name": "Magi3_individualTotalExpensesR3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\",function(){\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"//Calculate Age\r",
													"var BD = response.birthDate;\r",
													"var bit = BD.split('-');\r",
													"var birthmonth = Number(bit[0]);\r",
													"var birthyear = Number(bit[1]);\r",
													"// console.log(birthyear);\r",
													"var current_date = new Date();\r",
													"var age = current_date.getFullYear() - birthyear;\r",
													"if (current_date.getMonth() < birthmonth) { age -= 1; }\r",
													"console.log(\"Age : \"+age);\r",
													"postman.setEnvironmentVariable(\"Age\", age);\r",
													"\r",
													"//PartA\r",
													"postman.setEnvironmentVariable(\"partA_Premium_3\",  Math.round(response.individualTotalExpenses[0].partAPremium));\r",
													"postman.setEnvironmentVariable(\"partA_OOP_3\",  Math.round(response.individualTotalExpenses[0].partAOOP));\r",
													"//PartB\r",
													"postman.setEnvironmentVariable(\"partB_Premium_3\",  Math.round(response.individualTotalExpenses[0].partBPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"postman.setEnvironmentVariable(\"partB_OOP_3\",  Math.round(response.individualTotalExpenses[0].partBOOP));\r",
													"//PartD\r",
													"postman.setEnvironmentVariable(\"partD_surcharge_3\",  Math.round(response.individualTotalExpenses[0].partDPremiumSurcharge));\r",
													"postman.setEnvironmentVariable(\"partD_Premium_3\",  Math.round(response.individualTotalExpenses[0].partDPremium));\r",
													"postman.setEnvironmentVariable(\"partD_OOP_3\",  Math.round(response.individualTotalExpenses[0].partDOOP));\r",
													"//PlanG Premium validation\r",
													"postman.setEnvironmentVariable(\"planG_Premium_3\",  Math.round(response.individualTotalExpenses[0].planGPremium));\r",
													"postman.setEnvironmentVariable(\"planG_OOP_3\",  Math.round(response.individualTotalExpenses[0].planGOOP));\r",
													"//PlanF Premium validation\r",
													"postman.setEnvironmentVariable(\"planF_Premium_3\",  Math.round(response.individualTotalExpenses[0].partFPremium));\r",
													"//PlanN Premium validation\r",
													"postman.setEnvironmentVariable(\"planN_Premium_3\",  Math.round(response.individualTotalExpenses[0].planNPremium));\r",
													"postman.setEnvironmentVariable(\"planN_OOP_3\",  Math.round(response.individualTotalExpenses[0].planNOOP));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"versionId\",1);\r",
													"postman.setEnvironmentVariable(\"planId\",\"2021Arkansas5001BronzePOSHealthSherpa\");\r",
													"postman.setEnvironmentVariable(\"birthDate\",\"01-1956\");\r",
													"postman.setEnvironmentVariable(\"retirementYear\",\"01-2021\");\r",
													"postman.setEnvironmentVariable(\"lifeExpectancy\",70);\r",
													"postman.setEnvironmentVariable(\"planType\",\"silver\");\r",
													"postman.setEnvironmentVariable(\"healthGrade\",\"3\");\r",
													"postman.setEnvironmentVariable(\"singleVsMultipleMagi\",false);\r",
													"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\",false);\r",
													"postman.setEnvironmentVariable(\"magiTier\",3);\r",
													"postman.setEnvironmentVariable(\"taxFilingStatus\",\"MARRIED_FILING_JOINTLY\");\r",
													"postman.setEnvironmentVariable(\"magiDollarAmount\",180000);\r",
													"postman.setEnvironmentVariable(\"stateName\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"zipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"retirementState\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"retirementZipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"boughtPlanA\",true);\r",
													"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\",false);\r",
													"postman.setEnvironmentVariable(\"reserveDaysUsed\",0);\r",
													"postman.setEnvironmentVariable(\"dental\",true);\r",
													"postman.setEnvironmentVariable(\"dentalHealthGrade\",1);\r",
													"postman.setEnvironmentVariable(\"tobacco\",false);\r",
													"//postman.setEnvironmentVariable(\"yearWiseMagiDetailList\",);\r",
													"\r",
													"\r",
													"//postman.setEnvironmentVariable(\"versionId\",1);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"planId\": \"{{planId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": {{lifeExpectancy}},\r\n    \"planType\": \"{{planType}}\",\r\n    \"healthGrade\": \"{{healthGrade}}\",\r\n    \"singleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"magiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"magiTier\": {{magiTier}},\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"magiDollarAmount\": {{magiDollarAmount}},\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": {{zipcode}},\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": {{retirementZipcode}},\r\n    \"boughtPlanA\": {{boughtPlanA}},\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"reserveDaysUsed\": {{reserveDaysUsed}},\r\n    \"dental\": {{dental}},\r\n    \"dentalHealthGrade\": {{dentalHealthGrade}},\r\n    \"tobacco\": {{tobacco}}\r\n    \r\n}"
										},
										"url": {
											"raw": "{{server}}/individualTotalExpensesR3",
											"host": [
												"{{server}}"
											],
											"path": [
												"individualTotalExpensesR3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Part_C/STATE_MULT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//PartC premium\r",
													"postman.setEnvironmentVariable(\"partC_stateMulti\",  response[0].premC_mult);\r",
													"postman.setEnvironmentVariable(\"OOP_stateMulti\",  response[0].OOP_mult);\r",
													"postman.setEnvironmentVariable(\"partD_stateMulti\",  response[0].premD_mult);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query=\"?_where=(State,eq,{{retirementState}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/STATE_MULT{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"STATE_MULT{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "magi3_PARTA_Pre&OOP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"//Plan A\r",
													"var planA_Premium_3DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartA premium of API matched with that of premium A from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planA_Premium_3DB).to.eql(Number(pm.environment.get(\"partA_Premium_3\")));\r",
													"});//Plan A OOP\r",
													"var planA_OOP_3DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartA OOP of API matched with that of partA OOP  from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"     pm.expect(Math.round((planA_OOP_3DB)*(pm.environment.get(\"OOP_stateMulti\")))).to.eql(Number(pm.environment.get(\"partA_OOP_3\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query=\"?_where=(year,eq,{{Year}})~and(current_age,eq,{{Age}})~and(Health_Grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTA{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTA{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "magi3_PARTB_OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query =\"?_where=(year,eq,{{Year}})~and(age,eq,{{Age}})~and(Income,eq,{{magiTier}})~and(healthgrade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Part B OOP\r",
													"var partB_OOP_3DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartB OOP_3 of API matched with that of OOP of part B from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(partB_OOP_3DB*pm.environment.get(\"OOP_stateMulti\"))).to.eql(Number(pm.environment.get(\"partB_OOP_3\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTB{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTB{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi3_PARTD_Pre&OOP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"//PartD premium\r",
													"var planD_Premium_3DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartD premium of API matched with that of premium D from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Number(pm.environment.get(\"partD_Premium_3\"))).to.eql((Number(pm.environment.get(\"partD_surcharge_3\")))+(Number(pm.environment.get(\"partD_Premium_1\"))));\r",
													"});\r",
													"//PartD OOP\r",
													"var planD_OOP_3DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartD OOP of API matched with that of OOP D from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Number(pm.environment.get(\"partD_OOP_3\"))).to.eql(Math.round((planD_OOP_3DB)*(pm.environment.get(\"OOP_stateMulti\"))));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query =\"?_where=(HealthGrade,eq,{{healthGrade}})~and(Age,eq,{{Age}})~and(Year,eq,{{Year}})~and(Income,eq,{{magiTier}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\",query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTD{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTD{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi3_PART_BD_Premium",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													" //PartB premium\r",
													"var planB_Premium_3DB=Math.round(response[0].c3);\r",
													"pm.test(\"PartB premium of API matched with that of premium B from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planB_Premium_3DB).to.eql(Number(pm.environment.get(\"partB_Premium_3\")));\r",
													"});\r",
													"\r",
													"\r",
													"//PartD premium\r",
													"var planB_Premium_3DB=Math.round(response[2].c3);\r",
													"pm.test(\"PartD premium3 of API matched with that of premium D from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Number(pm.environment.get(\"partD_Premium_3\"))).to.eql((Number(pm.environment.get(\"partD_surcharge_3\")))+(Number(pm.environment.get(\"partD_Premium_1\"))));\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/api/PART_COSTS",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PART_COSTS"
											]
										}
									},
									"response": []
								},
								{
									"name": "HG3_plang_g_cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//Plan G\r",
													"var planG_Premium_3DB = Math.round(response[0].oop);\r",
													"\r",
													"if (Math.round(response[0].premium)== postman.getEnvironmentVariable(\"planG_Premium_3\")){\r",
													"    pm.test(\"DB_planG_premium matched with API and is \")\r",
													"}\r",
													"else pm.test(\"DB_planG_premium did not match with API\")\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"//PlanG OOP\r",
													"postman.setEnvironmentVariable(\"planG_OOP_3DB\", Math.round(response[0].oop));\r",
													"var planG_OOP_3DB= response[0].oop;\r",
													"pm.test(\"PlanG OOP of API matched with that of OOP of planG from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(planG_OOP_3DB)).to.eql(Number(pm.environment.get(\"planG_OOP_3\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(state,eq,{{retirementState}})~and(age_now,eq,{{Age}})~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/plan_g_cost{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"plan_g_cost{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HG3_partF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function(){\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response= JSON.parse(responseBody);\r",
													"//Plan F Premium(spelling in uppercase P)\r",
													"var planF_Premium_3DB = Math.round(response[0].Premium);\r",
													"if((Math.round(response[0].Premium))== postman.getEnvironmentVariable(\"planF_Premium_3\")){\r",
													"    pm.test(\"DB_planF_premium for MagiTier3 matched with API and is \"+ planF_Premium_3DB)\r",
													"}\r",
													"else pm.test(\"DB_planF_premium did not match with API\")\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query=\"?_where=(state,eq,{{retirementState}})~and(age_now,eq,{{Age}})~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\",query);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/part_f_r3{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"part_f_r3{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HG3_planN_Pre&OOP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//Plan N premium\r",
													"var planN_Premium_3DB=Math.round(response[0].premium);\r",
													"\r",
													"pm.test(\"PlanN premium of API matched with that of plan N premium  from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planN_Premium_3DB).to.eql(Number(pm.environment.get(\"planN_Premium_3\")));\r",
													"});\r",
													"//PlanN_OOP\r",
													"var planN_OOP_3DB=Math.round(response[0].oop);\r",
													"pm.test(\"PlanN OOP_3 of API matched with that of PlanN OOP from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planN_OOP_3DB).to.eql(Number(pm.environment.get(\"planN_OOP_3\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(state,eq,{{retirementState}})~and(age_now,eq,{{Age}})~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/plan_n_cost{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"plan_n_cost{{query}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "MagiTier4",
							"item": [
								{
									"name": "Magi4_individualTotalExpensesR3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\",function(){\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Calculate Age\r",
													"var BD = response.birthDate;\r",
													"var bit = BD.split('-');\r",
													"var birthmonth = Number(bit[0]);\r",
													"var birthyear = Number(bit[1]);\r",
													"// console.log(birthyear);\r",
													"var current_date = new Date();\r",
													"var age = current_date.getFullYear() - birthyear;\r",
													"if (current_date.getMonth() < birthmonth) { age -= 1; }\r",
													"console.log(\"Age : \"+age);\r",
													"postman.setEnvironmentVariable(\"Age\", age);\r",
													"//PartA\r",
													"postman.setEnvironmentVariable(\"partA_Premium_4\",  Math.round(response.individualTotalExpenses[0].partAPremium));\r",
													"postman.setEnvironmentVariable(\"partA_OOP_4\",  Math.round(response.individualTotalExpenses[0].partAOOP));\r",
													"//PartB\r",
													"postman.setEnvironmentVariable(\"partB_Premium_4\",  Math.round(response.individualTotalExpenses[0].partBPremium));\r",
													"postman.setEnvironmentVariable(\"partB_OOP_4\",  Math.round(response.individualTotalExpenses[0].partBOOP));\r",
													"//PartD\r",
													"postman.setEnvironmentVariable(\"partD_surcharge_4\",  Math.round(response.individualTotalExpenses[0].partDPremiumSurcharge));\r",
													"postman.setEnvironmentVariable(\"partD_Premium_4\",  Math.round(response.individualTotalExpenses[0].partDPremium));\r",
													"postman.setEnvironmentVariable(\"partD_OOP_4\",  Math.round(response.individualTotalExpenses[0].partDOOP));\r",
													"//PlanG Premium validation\r",
													"postman.setEnvironmentVariable(\"planG_Premium_4\",  Math.round(response.individualTotalExpenses[0].planGPremium));\r",
													"postman.setEnvironmentVariable(\"planG_OOP_4\",  Math.round(response.individualTotalExpenses[0].planGOOP));\r",
													"//PlanF Premium validation\r",
													"postman.setEnvironmentVariable(\"planF_Premium_4\",  Math.round(response.individualTotalExpenses[0].partFPremium));\r",
													"//PlanN Premium validation\r",
													"postman.setEnvironmentVariable(\"planN_Premium_4\",  Math.round(response.individualTotalExpenses[0].planNPremium));\r",
													"postman.setEnvironmentVariable(\"planN_OOP_4\",  Math.round(response.individualTotalExpenses[0].planNOOP));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"versionId\",1);\r",
													"postman.setEnvironmentVariable(\"planId\",\"2021Arkansas5001BronzePOSHealthSherpa\");\r",
													"postman.setEnvironmentVariable(\"birthDate\",\"01-1956\");\r",
													"postman.setEnvironmentVariable(\"retirementYear\",\"01-2021\");\r",
													"postman.setEnvironmentVariable(\"lifeExpectancy\",70);\r",
													"postman.setEnvironmentVariable(\"planType\",\"Bronze\");\r",
													"postman.setEnvironmentVariable(\"healthGrade\",\"4\");\r",
													"postman.setEnvironmentVariable(\"singleVsMultipleMagi\",false);\r",
													"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\",false);\r",
													"postman.setEnvironmentVariable(\"magiTier\",4);\r",
													"postman.setEnvironmentVariable(\"taxFilingStatus\",\"MARRIED_FILING_JOINTLY\");\r",
													"postman.setEnvironmentVariable(\"magiDollarAmount\",180000);\r",
													"postman.setEnvironmentVariable(\"stateName\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"zipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"retirementState\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"retirementZipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"boughtPlanA\",true);\r",
													"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\",false);\r",
													"postman.setEnvironmentVariable(\"reserveDaysUsed\",0);\r",
													"postman.setEnvironmentVariable(\"dental\",true);\r",
													"postman.setEnvironmentVariable(\"dentalHealthGrade\",1);\r",
													"postman.setEnvironmentVariable(\"tobacco\",false);\r",
													"//postman.setEnvironmentVariable(\"yearWiseMagiDetailList\",);\r",
													"\r",
													"\r",
													"//postman.setEnvironmentVariable(\"versionId\",1);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"planId\": \"{{planId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": {{lifeExpectancy}},\r\n    \"planType\": \"{{planType}}\",\r\n    \"healthGrade\": \"{{healthGrade}}\",\r\n    \"singleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"magiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"magiTier\": {{magiTier}},\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"magiDollarAmount\": {{magiDollarAmount}},\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": {{zipcode}},\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": {{retirementZipcode}},\r\n    \"boughtPlanA\": {{boughtPlanA}},\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"reserveDaysUsed\": {{reserveDaysUsed}},\r\n    \"dental\": {{dental}},\r\n    \"dentalHealthGrade\": {{dentalHealthGrade}},\r\n    \"tobacco\": {{tobacco}},\r\n    \"yearWiseMagiDetailList\" :\r\n    [\r\n        {\r\n            \"year\": 2021,\r\n            \"taxFilingStatus\": \"FILING_INDIVIDUALLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2022,\r\n            \"taxFilingStatus\": \"FILING_INDIVIDUALLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2023,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"110000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2024,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2025,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2026,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        }\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{server}}/individualTotalExpensesR3",
											"host": [
												"{{server}}"
											],
											"path": [
												"individualTotalExpensesR3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Part_C/STATE_MULT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//PartC premium\r",
													"postman.setEnvironmentVariable(\"partC_stateMulti\",  response[0].premC_mult);\r",
													"postman.setEnvironmentVariable(\"OOP_stateMulti\",  response[0].OOP_mult);\r",
													"postman.setEnvironmentVariable(\"partD_stateMulti\",  response[0].premD_mult);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(State,eq,{{retirementState}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/STATE_MULT{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"STATE_MULT{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "magi4_PARTA_Pre&OOP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"//Plan A\r",
													"var planA_Premium_4DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartA premium 4 of API matched with that of premium A from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planA_Premium_4DB).to.eql(Number(pm.environment.get(\"partA_Premium_4\")));\r",
													"});\r",
													"\r",
													"//Plan A OOP\r",
													"var planA_OOP_4DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartA OOP 4 of API matched with that of partA OOP  from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"   pm.expect(Math.round((planA_OOP_4DB)*(pm.environment.get(\"OOP_stateMulti\")))).to.eql(Number(pm.environment.get(\"partA_OOP_4\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query=\"?_where=(year,eq,{{Year}})~and(current_age,eq,{{Age}})~and(Health_Grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTA{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTA{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "magi4_PARTB_Pre&OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query =\"?_where=(year,eq,{{Year}})~and(age,eq,{{Age}})~and(Income,eq,{{magiTier}})~and(healthgrade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//PartB Premium\r",
													"var partB_Premium_4DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartB OOP_3 of API matched with that of OOP of part B from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(partB_Premium_4DB)).to.eql(Number(pm.environment.get(\"partB_Premium_4\")));\r",
													"});\r",
													"//Part B OOP\r",
													"var partB_OOP_4DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartB OOP_3 of API matched with that of OOP of part B from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(partB_OOP_4DB*pm.environment.get(\"OOP_stateMulti\"))).to.eql(Number(pm.environment.get(\"partB_OOP_4\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTB{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTB{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi4_PART_BD_COSTS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"//  //PartB premium\r",
													"// var planB_Premium_4DB=Math.round(response[0].c5);\r",
													"// pm.test(\"PartB premium 4 of API matched with that of premium B from DB\", function () {\r",
													"//     var response = JSON.parse(responseBody);\r",
													"//     pm.expect(planB_Premium_4DB).to.eql(Number(pm.environment.get(\"partB_Premium_4\")));\r",
													"// });\r",
													"\r",
													"\r",
													"// //PartD premium\r",
													"// var planB_Premium_4DB=Math.round(response[2].c4);\r",
													"// pm.test(\"PartD premium4 of API matched with that of premium D from DB\", function () {\r",
													"//     var response = JSON.parse(responseBody);\r",
													"//     pm.expect(Number(pm.environment.get(\"partD_Premium_4\"))).to.eql((Number(pm.environment.get(\"partD_surcharge_4\")))+(Number(pm.environment.get(\"partD_Premium_1\"))));\r",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/api/PART_COSTS",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PART_COSTS"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi4_PARTD_Pre&OOP Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"//PartD premium\r",
													"var planD_Premium_3DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartD premium of API matched with that of premium D from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Number(pm.environment.get(\"partD_Premium_3\"))).to.eql((Number(pm.environment.get(\"partD_surcharge_3\")))+(Number(pm.environment.get(\"partD_Premium_1\"))));\r",
													"});\r",
													"//PartD OOP\r",
													"var planD_OOP_4DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartD OOP of API matched with that of OOP D from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Number(pm.environment.get(\"partD_OOP_4\"))).to.eql(Math.round((planD_OOP_4DB)*(pm.environment.get(\"OOP_stateMulti\"))));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query =\"?_where=(HealthGrade,eq,{{healthGrade}})~and(Age,eq,{{Age}})~and(Year,eq,{{Year}})~and(Income,eq,{{magiTier}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\",query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTD{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTD{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi4_PlanG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//Plan G\r",
													"var planG_Premium_4DB=Math.round(response[0].premium);\r",
													"\r",
													"if (Math.round(response[0].premium)== postman.getEnvironmentVariable(\"planG_Premium_4\")){\r",
													"    pm.test(\"DB_planG_premium for MagiTier4 matched with API and is \"+ planG_Premium_4DB)\r",
													"}\r",
													"else pm.test(\"DB_planG_premium did not match with API\")\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(state,eq,{{retirementState}})~and(age_now,eq,{{Age}})~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/plan_g_cost{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"plan_g_cost{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HG4_PlanF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function(){\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response= JSON.parse(responseBody);\r",
													"//Plan F Premium(spelling in uppercase P)\r",
													"var planF_Premium_3DB = Math.round(response[0].Premium);\r",
													"if((Math.round(response[0].Premium))== postman.getEnvironmentVariable(\"planF_Premium_3\")){\r",
													"    pm.test(\"DB_planF_premium for MagiTier3 matched with API and is \"+ planF_Premium_3DB)\r",
													"}\r",
													"else pm.test(\"DB_planF_premium did not match with API\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query=\"?_where=(state,eq,{{retirementState}})~and(age_now,eq,{{Age}})~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\",query);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/part_f_r3{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"part_f_r3{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi4_plan_n_cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//Plan N premium\r",
													"var planN_Premium_4DB=Math.round(response[0].premium);\r",
													"\r",
													"pm.test(\"PlanN premium_4 of API matched with that of plan N premium  from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planN_Premium_4DB).to.eql(Number(pm.environment.get(\"planN_Premium_4\")));\r",
													"});\r",
													"//PlanN_OOP\r",
													"var planN_OOP_4DB=Math.round(response[0].oop);\r",
													"pm.test(\"PlanN OOP_4 of API matched with that of PlanN OOP from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planN_OOP_4DB).to.eql(Number(pm.environment.get(\"planN_OOP_4\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(state,eq,{{retirementState}})~and(age_now,eq,{{Age}})~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/plan_n_cost{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"plan_n_cost{{query}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "MagiTier5",
							"item": [
								{
									"name": "Magi5_individualTotalExpensesR3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\",function(){\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Calculate Age\r",
													"var BD = response.birthDate;\r",
													"var bit = BD.split('-');\r",
													"var birthmonth = Number(bit[0]);\r",
													"var birthyear = Number(bit[1]);\r",
													"// console.log(birthyear);\r",
													"var current_date = new Date();\r",
													"var age = current_date.getFullYear() - birthyear;\r",
													"if (current_date.getMonth() < birthmonth) { age -= 1; }\r",
													"console.log(\"Age : \"+age);\r",
													"postman.setEnvironmentVariable(\"Age\", age);\r",
													"//PartA\r",
													"postman.setEnvironmentVariable(\"partA_Premium_5\",  Math.round(response.individualTotalExpenses[0].partAPremium));\r",
													"postman.setEnvironmentVariable(\"partA_OOP_5\",  Math.round(response.individualTotalExpenses[0].partAOOP));\r",
													"//PartB\r",
													"postman.setEnvironmentVariable(\"partB_Premium_5\",  Math.round(response.individualTotalExpenses[0].partBPremium/response.individualTotalExpenses[0].monthsUsedForMedicareExpenseCalc));\r",
													"postman.setEnvironmentVariable(\"partB_OOP_5\",  Math.round(response.individualTotalExpenses[0].partBOOP));\r",
													"//PartD\r",
													"postman.setEnvironmentVariable(\"partD_surcharge_5\",  Math.round(response.individualTotalExpenses[0].partDPremiumSurcharge));\r",
													"postman.setEnvironmentVariable(\"partD_Premium_5\",  Math.round(response.individualTotalExpenses[0].partDPremium));\r",
													"postman.setEnvironmentVariable(\"partD_OOP_5\",  Math.round(response.individualTotalExpenses[0].partDOOP));\r",
													"//PlanG Premium validation\r",
													"postman.setEnvironmentVariable(\"planG_Premium_5\",  Math.round(response.individualTotalExpenses[0].planGPremium));\r",
													"postman.setEnvironmentVariable(\"planG_OOP_5\",  Math.round(response.individualTotalExpenses[0].planGOOP));\r",
													"//PlanF Premium validation\r",
													"postman.setEnvironmentVariable(\"planF_Premium_5\",  Math.round(response.individualTotalExpenses[0].partFPremium));\r",
													"\r",
													"//PlanN Premium validation\r",
													"postman.setEnvironmentVariable(\"planN_Premium_5\",  Math.round(response.individualTotalExpenses[0].planNPremium));\r",
													"postman.setEnvironmentVariable(\"planN_OOP_5\",  Math.round(response.individualTotalExpenses[0].planNOOP));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"versionId\",1);\r",
													"postman.setEnvironmentVariable(\"planId\",\"2021Arkansas5001BronzePOSHealthSherpa\");\r",
													"postman.setEnvironmentVariable(\"birthDate\",\"01-1956\");\r",
													"postman.setEnvironmentVariable(\"retirementYear\",\"01-2021\");\r",
													"postman.setEnvironmentVariable(\"lifeExpectancy\",70);\r",
													"postman.setEnvironmentVariable(\"planType\",\"Bronze\");\r",
													"postman.setEnvironmentVariable(\"healthGrade\",\"5\");\r",
													"postman.setEnvironmentVariable(\"singleVsMultipleMagi\",false);\r",
													"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\",false);\r",
													"postman.setEnvironmentVariable(\"magiTier\",5);\r",
													"postman.setEnvironmentVariable(\"taxFilingStatus\",\"MARRIED_FILING_JOINTLY\");\r",
													"postman.setEnvironmentVariable(\"magiDollarAmount\",180000);\r",
													"postman.setEnvironmentVariable(\"stateName\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"zipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"retirementState\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"retirementZipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"boughtPlanA\",true);\r",
													"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\",false);\r",
													"postman.setEnvironmentVariable(\"reserveDaysUsed\",0);\r",
													"postman.setEnvironmentVariable(\"dental\",true);\r",
													"postman.setEnvironmentVariable(\"dentalHealthGrade\",1);\r",
													"postman.setEnvironmentVariable(\"tobacco\",false);\r",
													"//postman.setEnvironmentVariable(\"yearWiseMagiDetailList\",);\r",
													"\r",
													"\r",
													"//postman.setEnvironmentVariable(\"versionId\",1);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"planId\": \"{{planId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": {{lifeExpectancy}},\r\n    \"planType\": \"{{planType}}\",\r\n    \"healthGrade\": \"{{healthGrade}}\",\r\n    \"singleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"magiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"magiTier\": {{magiTier}},\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"magiDollarAmount\": {{magiDollarAmount}},\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": {{zipcode}},\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": {{retirementZipcode}},\r\n    \"boughtPlanA\": {{boughtPlanA}},\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"reserveDaysUsed\": {{reserveDaysUsed}},\r\n    \"dental\": {{dental}},\r\n    \"dentalHealthGrade\": {{dentalHealthGrade}},\r\n    \"tobacco\": {{tobacco}},\r\n    \"yearWiseMagiDetailList\" :\r\n    [\r\n        {\r\n            \"year\": 2021,\r\n            \"taxFilingStatus\": \"FILING_INDIVIDUALLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2022,\r\n            \"taxFilingStatus\": \"FILING_INDIVIDUALLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2023,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"110000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2024,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2025,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2026,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        }\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{server}}/individualTotalExpensesR3",
											"host": [
												"{{server}}"
											],
											"path": [
												"individualTotalExpensesR3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Part_C/STATE_MULT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//PartC premium\r",
													"postman.setEnvironmentVariable(\"partC_stateMulti\",  response[0].premC_mult);\r",
													"postman.setEnvironmentVariable(\"OOP_stateMulti\",  response[0].OOP_mult);\r",
													"postman.setEnvironmentVariable(\"partD_stateMulti\",  response[0].premD_mult);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(State,eq,{{retirementState}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/STATE_MULT{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"STATE_MULT{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HG5_PARTA_Pre&OOP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"//Plan A\r",
													"var planA_Premium_5DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartA premium 5 of API matched with that of premium A from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planA_Premium_5DB).to.eql(Number(pm.environment.get(\"partA_Premium_5\")));\r",
													"});//Plan A OOP\r",
													"var planA_OOP_5DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartA OOP 5 of API matched with that of partA OOP  from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round((planA_OOP_5DB)*(pm.environment.get(\"OOP_stateMulti\")))).to.eql(Number(pm.environment.get(\"partA_OOP_5\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(year,eq,{{Year}})~and(current_age,eq,{{Age}})~and(Health_Grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTA{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTA{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "magi5_PARTB_OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query =\"?_where=(year,eq,{{Year}})~and(age,eq,{{Age}})~and(Income,eq,{{magiTier}})~and(healthgrade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Part B OOP\r",
													"var partB_OOP_5DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartB OOP_5 of API matched with that of OOP of part B from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(partB_OOP_5DB*pm.environment.get(\"OOP_stateMulti\"))).to.eql(Number(pm.environment.get(\"partB_OOP_5\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTB{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTB{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi5_PART_BD",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													" //PartB premium\r",
													"var planB_Premium_5DB=Math.round(response[0].c5);\r",
													"pm.test(\"PartB premium 5 of API matched with that of premium B from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planB_Premium_5DB).to.eql(Number(pm.environment.get(\"partB_Premium_5\")));\r",
													"});\r",
													"\r",
													"\r",
													"//PartD premium\r",
													"var planB_Premium_5DB=Math.round(response[2].c5);\r",
													"pm.test(\"PartD premium 5 of API matched with that of premium D from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Number(pm.environment.get(\"partD_Premium_5\"))).to.eql((Number(pm.environment.get(\"partD_surcharge_5\")))+(Number(pm.environment.get(\"partD_Premium_1\"))));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/api/PART_COSTS",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PART_COSTS"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi5_PARTD_Pre&OOP Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"//PartD premium\r",
													"var planD_Premium_5DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartD premium of API matched with that of premium D from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Number(pm.environment.get(\"partD_Premium_5\"))).to.eql((Number(pm.environment.get(\"partD_surcharge_5\")))+(Number(pm.environment.get(\"partD_Premium_1\"))));\r",
													"});\r",
													"//PartD OOP\r",
													"var planD_OOP_5DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartD OOP of API matched with that of OOP D from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Number(pm.environment.get(\"partD_OOP_5\"))).to.eql(Math.round((planD_OOP_5DB)*(pm.environment.get(\"OOP_stateMulti\"))));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query =\"?_where=(HealthGrade,eq,{{healthGrade}})~and(Age,eq,{{Age}})~and(Year,eq,{{Year}})~and(Income,eq,{{magiTier}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\",query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTD{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTD{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HG5_plan_g_cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//Plan G\r",
													"var planG_Premium_5DB = Math.round(response[0].oop);\r",
													"\r",
													"if (Math.round(response[0].premium)== postman.getEnvironmentVariable(\"planG_Premium_5\")){\r",
													"    pm.test(\"DB_planG_premium 5 matched with API and is \")\r",
													"}\r",
													"else pm.test(\"DB_planG_premium did not match with API\")\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"//PlanG OOP\r",
													"postman.setEnvironmentVariable(\"planG_OOP_5DB\", Math.round(response[0].oop));\r",
													"var planG_OOP_5DB= response[0].oop;\r",
													"pm.test(\"PlanG OOP 5 of API matched with that of OOP of planG from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(planG_OOP_5DB)).to.eql(Number(pm.environment.get(\"planG_OOP_5\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(state,eq,{{retirementState}})~and(age_now,eq,{{Age}})~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/plan_g_cost{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"plan_g_cost{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HG5_part_f_r3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function(){\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response= JSON.parse(responseBody);\r",
													"//Plan F Premium(spelling in uppercase P)\r",
													"var planF_Premium_5DB = Math.round(response[0].Premium);\r",
													"if((Math.round(response[0].Premium))== postman.getEnvironmentVariable(\"planF_Premium_5\")){\r",
													"    pm.test(\"DB_planF_premium 5 for HG5 matched with API and is \"+ planF_Premium_5DB)\r",
													"}\r",
													"else pm.test(\"DB_planF_premium did not match with API\")\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query=\"?_where=(state,eq,{{retirementState}})~and(age_now,eq,{{Age}})~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\",query);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/part_f_r3{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"part_f_r3{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HG5_plan_n_cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//Plan N premium\r",
													"var planN_Premium_5DB=Math.round(response[0].premium);\r",
													"\r",
													"pm.test(\"PlanN_5 premium of API matched with that of plan N premium  from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planN_Premium_5DB).to.eql(Number(pm.environment.get(\"planN_Premium_5\")));\r",
													"});\r",
													"//PlanN_OOP\r",
													"var planN_OOP_5DB=Math.round(response[0].oop);\r",
													"pm.test(\"PlanN OOP of API matched with that of PlanN OOP from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planN_OOP_5DB).to.eql(Number(pm.environment.get(\"planN_OOP_5\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(state,eq,{{retirementState}})~and(age_now,eq,{{Age}})~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/plan_n_cost{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"plan_n_cost{{query}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "MagiTier6",
							"item": [
								{
									"name": "Magi6_individualTotalExpensesR3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\",function(){\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//Calculate Age\r",
													"var BD = response.birthDate;\r",
													"var bit = BD.split('-');\r",
													"var birthmonth = Number(bit[0]);\r",
													"var birthyear = Number(bit[1]);\r",
													"// console.log(birthyear);\r",
													"var current_date = new Date();\r",
													"var age = current_date.getFullYear() - birthyear;\r",
													"if (current_date.getMonth() < birthmonth) { age -= 1; }\r",
													"console.log(\"Age : \"+age);\r",
													"postman.setEnvironmentVariable(\"Age\", age);\r",
													"//PartA\r",
													"postman.setEnvironmentVariable(\"Year\",  Math.round(response.individualTotalExpenses[0].year));\r",
													"postman.setEnvironmentVariable(\"partA_Premium_6\",  Math.round(response.individualTotalExpenses[0].partAPremium));\r",
													"\r",
													"postman.setEnvironmentVariable(\"partA_OOP_6\",  Math.round(response.individualTotalExpenses[0].partAOOP));\r",
													"//PartB\r",
													"postman.setEnvironmentVariable(\"partB_Premium_6\",  Math.round(response.individualTotalExpenses[0].partBPremium));\r",
													"postman.setEnvironmentVariable(\"partB_OOP_6\",  Math.round(response.individualTotalExpenses[0].partBOOP));\r",
													"//PartD\r",
													"postman.setEnvironmentVariable(\"partD_surcharge_6\",  Math.round(response.individualTotalExpenses[0].partDPremiumSurcharge));\r",
													"postman.setEnvironmentVariable(\"partD_Premium_6\",  Math.round(response.individualTotalExpenses[0].partDPremium));\r",
													"postman.setEnvironmentVariable(\"partD_OOP_6\",  Math.round(response.individualTotalExpenses[0].partDOOP));\r",
													"//PlanG Premium validation\r",
													"postman.setEnvironmentVariable(\"planG_Premium_6\",  Math.round(response.individualTotalExpenses[0].planGPremium));\r",
													"postman.setEnvironmentVariable(\"planG_OOP_6\",  Math.round(response.individualTotalExpenses[0].planGOOP));\r",
													"//PlanF Premium validation\r",
													"postman.setEnvironmentVariable(\"planF_Premium_6\",  Math.round(response.individualTotalExpenses[0].partFPremium));\r",
													"//PlanN Premium validation\r",
													"postman.setEnvironmentVariable(\"planN_Premium_6\",  Math.round(response.individualTotalExpenses[0].planNPremium));\r",
													"postman.setEnvironmentVariable(\"planN_OOP_6\",  Math.round(response.individualTotalExpenses[0].planNOOP));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"versionId\",1);\r",
													"postman.setEnvironmentVariable(\"planId\",\"2021Arkansas5001BronzePOSHealthSherpa\");\r",
													"postman.setEnvironmentVariable(\"birthDate\",\"01-1956\");\r",
													"postman.setEnvironmentVariable(\"retirementYear\",\"01-2021\");\r",
													"postman.setEnvironmentVariable(\"lifeExpectancy\",70);\r",
													"postman.setEnvironmentVariable(\"planType\",\"Bronze\");\r",
													"postman.setEnvironmentVariable(\"healthGrade\",\"5\");\r",
													"postman.setEnvironmentVariable(\"singleVsMultipleMagi\",false);\r",
													"postman.setEnvironmentVariable(\"magiTierVsDollarAmount\",false);\r",
													"postman.setEnvironmentVariable(\"magiTier\",6);\r",
													"postman.setEnvironmentVariable(\"taxFilingStatus\",\"MARRIED_FILING_JOINTLY\");\r",
													"postman.setEnvironmentVariable(\"magiDollarAmount\",180000);\r",
													"postman.setEnvironmentVariable(\"stateName\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"zipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"retirementState\",\"Arkansas\");\r",
													"postman.setEnvironmentVariable(\"retirementZipcode\",72003);\r",
													"postman.setEnvironmentVariable(\"boughtPlanA\",true);\r",
													"postman.setEnvironmentVariable(\"fullYearDataForLifeExpectancyYear\",false);\r",
													"postman.setEnvironmentVariable(\"reserveDaysUsed\",0);\r",
													"postman.setEnvironmentVariable(\"dental\",true);\r",
													"postman.setEnvironmentVariable(\"dentalHealthGrade\",1);\r",
													"postman.setEnvironmentVariable(\"tobacco\",false);\r",
													"//postman.setEnvironmentVariable(\"yearWiseMagiDetailList\",);\r",
													"\r",
													"\r",
													"//postman.setEnvironmentVariable(\"versionId\",1);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"versionId\": {{versionId}},\r\n    \"planId\": \"{{planId}}\",\r\n    \"birthDate\": \"{{birthDate}}\",\r\n    \"retirementYear\": \"{{retirementYear}}\",\r\n    \"lifeExpectancy\": {{lifeExpectancy}},\r\n    \"planType\": \"{{planType}}\",\r\n    \"healthGrade\": \"{{healthGrade}}\",\r\n    \"singleVsMultipleMagi\": {{singleVsMultipleMagi}},\r\n    \"magiTierVsDollarAmount\": {{magiTierVsDollarAmount}},\r\n    \"magiTier\": {{magiTier}},\r\n    \"taxFilingStatus\": \"{{taxFilingStatus}}\",\r\n    \"magiDollarAmount\": {{magiDollarAmount}},\r\n    \"stateName\": \"{{stateName}}\",\r\n    \"zipcode\": {{zipcode}},\r\n    \"retirementState\": \"{{retirementState}}\",\r\n    \"retirementZipcode\": {{retirementZipcode}},\r\n    \"boughtPlanA\": {{boughtPlanA}},\r\n    \"fullYearDataForLifeExpectancyYear\": {{fullYearDataForLifeExpectancyYear}},\r\n    \"reserveDaysUsed\": {{reserveDaysUsed}},\r\n    \"dental\": {{dental}},\r\n    \"dentalHealthGrade\": {{dentalHealthGrade}},\r\n    \"tobacco\": {{tobacco}},\r\n    \"yearWiseMagiDetailList\" :\r\n    [\r\n        {\r\n            \"year\": 2021,\r\n            \"taxFilingStatus\": \"FILING_INDIVIDUALLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2022,\r\n            \"taxFilingStatus\": \"FILING_INDIVIDUALLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2023,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"110000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2024,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2025,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        },\r\n        {\r\n            \"year\": 2026,\r\n            \"taxFilingStatus\": \"MARRIED_FILING_JOINTLY\",\r\n            \"magiDollarAmount\": \"100000\",\r\n            \"magiTier\": 2\r\n        }\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{server}}/individualTotalExpensesR3",
											"host": [
												"{{server}}"
											],
											"path": [
												"individualTotalExpensesR3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Part_C/STATE_MULT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"//PartC premium\r",
													"postman.setEnvironmentVariable(\"partC_stateMulti\",  response[0].premC_mult);\r",
													"postman.setEnvironmentVariable(\"OOP_stateMulti\",  response[0].OOP_mult);\r",
													"postman.setEnvironmentVariable(\"partD_stateMulti\",  response[0].premD_mult);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(State,eq,{{retirementState}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/STATE_MULT{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"STATE_MULT{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "magi6_PARTA_Pre&OOP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"//Plan A\r",
													"var planA_Premium_6DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartA premium 6 of API matched with that of premium A from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planA_Premium_6DB).to.eql(Number(pm.environment.get(\"partA_Premium_6\")));\r",
													"});\r",
													"//Plan A OOP\r",
													"var planA_OOP_6DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartA OOP 6 of API matched with that of partA OOP  from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"   pm.expect(Math.round((planA_OOP_6DB)*(pm.environment.get(\"OOP_stateMulti\")))).to.eql(Number(pm.environment.get(\"partA_OOP_6\")));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query = \"?_where=(Year,eq,{{Year}})~and(current_age,eq,{{Age}})~and(Health_Grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);\r",
													"//Health_Grade=5 and Current_Age=65  and Year=2021\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTA{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTA{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "magi6_PARTB_Pre&OOP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query =\"?_where=(year,eq,{{Year}})~and(age,eq,65)~and(Income,eq,{{magiTier}})~and(healthgrade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response = JSON.parse(responseBody);\r",
													" //PartB premium\r",
													"var planB_Premium_6DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartB premium 6 of API matched with that of premium B from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planB_Premium_6DB).to.eql(Number(pm.environment.get(\"partB_Premium_6\")));\r",
													"});\r",
													"//Part B OOP\r",
													"var partB_OOP_6DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartB OOP_6 of API matched with that of OOP of part B from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(partB_OOP_6DB*pm.environment.get(\"OOP_stateMulti\"))).to.eql(Number(pm.environment.get(\"partB_OOP_6\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTB{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTB{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi6_PARTD_Pre&OOP Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"//PartD premium\r",
													"var planD_Premium_6DB=Math.round(response[0].Premium);\r",
													"pm.test(\"PartD premium of API matched with that of premium D from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Number(pm.environment.get(\"partD_Premium_6\"))).to.eql((Number(pm.environment.get(\"partD_surcharge_6\")))+(Number(pm.environment.get(\"partD_Premium_1\"))));\r",
													"});\r",
													"//PartD OOP\r",
													"var planD_OOP_6DB=Math.round(response[0].OOP);\r",
													"pm.test(\"PartD OOP of API matched with that of OOP D from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Number(pm.environment.get(\"partD_OOP_6\"))).to.eql(Math.round((planD_OOP_6DB)*(pm.environment.get(\"OOP_stateMulti\"))));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query =\"?_where=(HealthGrade,eq,{{healthGrade}})~and(Age,eq,{{Age}})~and(Year,eq,{{Year}})~and(Income,eq,{{magiTier}})\";\r",
													"\r",
													"postman.setEnvironmentVariable(\"query\",query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/PARTD{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PARTD{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi6_PART_BD",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"\r",
													"// //PartD premium\r",
													"// var planB_Premium_6DB=Math.round(response[2].c6);\r",
													"// pm.test(\"PartD premium 6 of API matched with that of premium D from DB\", function () {\r",
													"//     var response = JSON.parse(responseBody);\r",
													"//     pm.expect(Number(pm.environment.get(\"partD_Premium_6\"))).to.eql((Number(pm.environment.get(\"partD_surcharge_6\")))+(Number(pm.environment.get(\"partD_Premium_1\"))));\r",
													"// });\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/api/PART_COSTS",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"PART_COSTS"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi6_plan_g",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//Plan G\r",
													"var planG_Premium_6DB=Math.round(response[0].premium);\r",
													"\r",
													"if (Math.round(response[0].premium)== postman.getEnvironmentVariable(\"planG_Premium_6\")){\r",
													"    pm.test(\"DB_planG_premium for MagiTier6 matched with API and is \"+ planG_Premium_6DB)\r",
													"}\r",
													"else pm.test(\"DB_planG_premium did not match with API\")\r",
													"\r",
													"//PlanG OOP\r",
													"postman.setEnvironmentVariable(\"planG_OOP_6DB\", Math.round(response[0].oop));\r",
													"var planG_OOP_6DB= response[0].oop;\r",
													"pm.test(\"PlanG OOP 6 of API matched with that of OOP of planG from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(Math.round(planG_OOP_6DB)).to.eql(Number(pm.environment.get(\"planG_OOP_6\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(state,eq,{{retirementState}})~and(age_now,eq,65)~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/plan_g_cost{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"plan_g_cost{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi6_plan_n_cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var response = JSON.parse(responseBody);\r",
													"//Plan N premium\r",
													"var planN_Premium_6DB=Math.round(response[0].premium);\r",
													"\r",
													"pm.test(\"PlanN_6 premium of API matched with that of plan N premium  from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planN_Premium_6DB).to.eql(Number(pm.environment.get(\"planN_Premium_6\")));\r",
													"});\r",
													"//PlanN_OOP\r",
													"var planN_OOP_6DB=Math.round(response[0].oop);\r",
													"pm.test(\"PlanN_6 OOP of API matched with that of PlanN OOP from DB\", function () {\r",
													"    var response = JSON.parse(responseBody);\r",
													"    pm.expect(planN_OOP_6DB).to.eql(Number(pm.environment.get(\"planN_OOP_6\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query= \"?_where=(state,eq,{{retirementState}})~and(age_now,eq,65)~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\", query);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/plan_n_cost{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"plan_n_cost{{query}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Magi6_part_f_r3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function(){\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var response= JSON.parse(responseBody);\r",
													"//Plan F Premium(spelling in uppercase P)\r",
													"var planF_Premium_6DB = Math.round(response[0].Premium);\r",
													"if((Math.round(response[0].Premium))== postman.getEnvironmentVariable(\"planF_Premium_6\")){\r",
													"    pm.test(\"DB_planF_premium 6 for HG5 matched with API and is \"+ planF_Premium_6DB)\r",
													"}\r",
													"else pm.test(\"DB_planF_premium did not match with API\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var query=\"?_where=(state,eq,{{retirementState}})~and(age_now,eq,{{Age}})~and(zipcode,eq,{{zipcode}})~and(age_then_year,eq,{{Year}})~and(current_health_grade,eq,{{healthGrade}})\";\r",
													"postman.setEnvironmentVariable(\"query\",query);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA==",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/api/part_f_r3{{query}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"part_f_r3{{query}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "LongTermCareR4",
			"item": [
				{
					"name": "HomeCareExpense_DataValidation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"    pm.environment.set(\"age\",65);",
									"\tpm.environment.set(\"transactionTypeFlag\",false);",
									"\tpm.environment.set(\"zipcode\",72003);",
									"\tpm.environment.set(\"pvAsOfYear\",2021);",
									"\tpm.environment.set(\"healthProfile\",1);",
									"\tpm.environment.set(\"gender\",\"M\");",
									"\tpm.environment.set(\"lifeExpectancy\",66);",
									"\tpm.environment.set(\"currentLifeStyleExpenses\", 1);",
									"\tpm.environment.set(\"numberOfAdultDayHealthCareLTCYears\",0);",
									"\tpm.environment.set(\"numberOfHomeCareLTCYears\",1)",
									"\tpm.environment.set(\"numberOfAssistedCareLTCYears\",0);",
									"\tpm.environment.set(\"numberOfNursingCareLTCYears\",0);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData=JSON.parse(responseBody)",
									"//zipcode as a environment variable for mysql query",
									"postman.setEnvironmentVariable(\"zipcode\",jsonData.zipcode);",
									"",
									"postman.setEnvironmentVariable(\"HomeCareExpenseyear\",jsonData.futureHomeCareExpenseList[0].year);",
									"postman.setEnvironmentVariable(\"HomeCareExpense\",jsonData.futureHomeCareExpenseList[0].expense);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n\t\"age\": {{age}},\n\t\"transactionTypeFlag\":{{transactionTypeFlag}},\n\t\"zipcode\":{{zipcode}},\n\t\"pvAsOfYear\": {{pvAsOfYear}},\n\t\"healthProfile\": {{healthProfile}},\n\t\"gender\": \"{{gender}}\",\n\t\"lifeExpectancy\": {{lifeExpectancy}},\n\t\"currentLifeStyleExpenses\": {{currentLifeStyleExpenses}},\n\t\"numberOfAdultDayHealthCareLTCYears\":{{numberOfAdultDayHealthCareLTCYears}},\n\t\"numberOfHomeCareLTCYears\": {{numberOfHomeCareLTCYears}},\n\t\"numberOfAssistedCareLTCYears\":{{numberOfAssistedCareLTCYears}},\n\t\"numberOfNursingCareLTCYears\":{{numberOfNursingCareLTCYears}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/longTermCareR4",
							"host": [
								"{{server}}"
							],
							"path": [
								"longTermCareR4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verifying  HomeCareExpense with DB Long_Term_Care_Expenses Table",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//From longTermCareR4 Response",
									"//var zipcode=postman.getEnvironmentVariable(\"zipcode\");",
									"",
									"//mySQL Query",
									"var queryvalZipcode = \"_where=(src_zipcode_for_county,eq,{{zipcode}})\"",
									"",
									"pm.environment.set(\"Query\",queryvalZipcode);",
									"setTimeout(function(){}, 500);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Taking Response into varible",
									"var ltcedata = JSON.parse(responseBody)",
									"",
									"//longTermCareR4 API Reponse",
									"var HomeCareExpenseyear=postman.getEnvironmentVariable(\"HomeCareExpenseyear\");",
									"",
									"//Home Care Expenses",
									"console.log(\"/** Home Care Expenses  **/\");",
									"var DByear=ltcedata[0].year;",
									"console.log(\"DB year\",DByear)",
									"var inflation=ltcedata[0].expected_inflation;",
									"console.log(\"need to add expected_inflation from DB \",inflation)",
									"var Homecare=ltcedata[0].home_maker_services;",
									"console.log(\"'home_maker_services' Expenses from DB\",Homecare);",
									"",
									"    ",
									"     ",
									"//inflation from DB long_term_care_expenses  table ",
									"",
									"     var Homecare=Homecare+((Homecare/100)*inflation);",
									"",
									"     console.log(\" After added a inflation to 'home_maker_services' DB Value ' are \",Homecare)",
									"",
									"    //longTermCareR4 API Reponse ",
									"     var HomeCareExpense=postman.getEnvironmentVariable(\"HomeCareExpense\");",
									"     console.log(\"longTermCareR4 API Reponse  HomeCare expenses are \",HomeCareExpense);",
									"",
									"pm.test(\"Verifying HomeCare Expenses'MATCHED'with DB After added a inflation to 'home_maker_services' value of long_term_care_expenses DB Table\",function()",
									"          {",
									"              pm.expect(String(Homecare)).to.equal(HomeCareExpense)",
									"     ",
									"             console.log(HomeCareExpense,\"HomeCare Care Expenses'MATCHED'with DB After added a inflation to 'home_maker_services' value of long_term_care_expenses DB Table\",Homecare);",
									"        });",
									"     ",
									"         ",
									"    ",
									"     ",
									"",
									"",
									"     ",
									"     ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/long_term_care_expenses?{{Query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"long_term_care_expenses"
							],
							"query": [
								{
									"key": "{{Query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AdultDayCareExpense_DataValidation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"    pm.environment.set(\"age\",65);",
									"    pm.environment.set(\"lifeExpectancy\",66);",
									"    pm.environment.set(\"numberOfAdultDayHealthCareLTCYears\",1);",
									"\tpm.environment.set(\"numberOfHomeCareLTCYears\",0)",
									"\tpm.environment.set(\"numberOfAssistedCareLTCYears\",0);",
									"\tpm.environment.set(\"numberOfNursingCareLTCYears\",0);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData=JSON.parse(responseBody)",
									"",
									"",
									"postman.setEnvironmentVariable(\"AdultDayHealthCareExpenseyear\",jsonData.futureAdultDayHealthCareExpenseList[0].year);",
									"postman.setEnvironmentVariable(\"AdultDayHealthCareExpense\",jsonData.futureAdultDayHealthCareExpenseList[0].expense);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n\t\"age\": {{age}},\n\t\"transactionTypeFlag\":{{transactionTypeFlag}},\n\t\"zipcode\":{{zipcode}},\n\t\"pvAsOfYear\": {{pvAsOfYear}},\n\t\"healthProfile\": {{healthProfile}},\n\t\"gender\": \"{{gender}}\",\n\t\"lifeExpectancy\": {{lifeExpectancy}},\n\t\"currentLifeStyleExpenses\": {{currentLifeStyleExpenses}},\n\t\"numberOfAdultDayHealthCareLTCYears\":{{numberOfAdultDayHealthCareLTCYears}},\n\t\"numberOfHomeCareLTCYears\": {{numberOfHomeCareLTCYears}},\n\t\"numberOfAssistedCareLTCYears\":{{numberOfAssistedCareLTCYears}},\n\t\"numberOfNursingCareLTCYears\":{{numberOfNursingCareLTCYears}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/longTermCareR4",
							"host": [
								"{{server}}"
							],
							"path": [
								"longTermCareR4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verifying  AdultDayHealthCareExpense with DB Long_Term_Care_Expenses Table",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//From longTermCareR4 Response",
									"//var zipcode=postman.getEnvironmentVariable(\"zipcode\");",
									"",
									"//mySQL Query",
									"var queryvalZipcode = \"_where=(src_zipcode_for_county,eq,{{zipcode}})\"",
									"",
									"pm.environment.set(\"Query\",queryvalZipcode);",
									"setTimeout(function(){}, 500);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Taking Response into varible",
									"var ltcedata = JSON.parse(responseBody)",
									"",
									"//longTermCareR4 API Reponse",
									"var AdultDayHealthCareExpenseyear=postman.getEnvironmentVariable(\"AdultDayHealthCareExpenseyear\");",
									"",
									"//AdultDayHealthCareExpenses",
									"",
									"console.log(\"/** Adult DayCare Expenses  **/\");",
									"var DByear=ltcedata[0].year;",
									"console.log(\"DB year\",DByear)",
									"",
									"",
									"",
									"     var inflation=ltcedata[0].expected_inflation",
									"     console.log(\"need to add expected_inflation from DB \",inflation)",
									"",
									"     var Adultcare=ltcedata[0].adult_day_health_care;",
									"     console.log(\"'home_maker_services' Expenses from DB\",Adultcare);",
									"",
									"     ",
									"",
									"//inflation from DB long_term_care_expenses  table ",
									"",
									"     var Adultcare=Adultcare+((Adultcare/100)*inflation);",
									"     console.log(\" After added a inflation to 'adult_day_health_care' DB Value ' are \",Adultcare)",
									"",
									"     //longTermCareR4 API Reponse",
									"     var AdultDayHealthCareExpense=postman.getEnvironmentVariable(\"AdultDayHealthCareExpense\");",
									"     console.log(\"longTermCareR4 API Reponse  AdultDayHealthCareExpense are \",AdultDayHealthCareExpense);",
									"",
									"pm.test(\"Verifying AdultDayHealthCare Expenses'MATCHED'with DB After added a inflation to 'adult_day_health_care' value of long_term_care_expenses DB Table\",function()",
									"          {",
									"              pm.expect(String(Adultcare)).to.equal(AdultDayHealthCareExpense)",
									"     ",
									"             console.log(AdultDayHealthCareExpense,\"HomeCare Care Expenses'MATCHED'with DB After added a inflation to 'adult_day_health_care' value of long_term_care_expenses DB Table\",Adultcare);",
									"        });",
									"    ",
									"         ",
									"    ",
									"     ",
									"",
									"",
									"     ",
									"     ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/long_term_care_expenses?{{Query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"long_term_care_expenses"
							],
							"query": [
								{
									"key": "{{Query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NursingCareExpenses_DataValidation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"    pm.environment.set(\"age\",65);",
									"    pm.environment.set(\"lifeExpectancy\",66);",
									"    pm.environment.set(\"numberOfAdultDayHealthCareLTCYears\",0);",
									"\tpm.environment.set(\"numberOfHomeCareLTCYears\",0)",
									"\tpm.environment.set(\"numberOfAssistedCareLTCYears\",0);",
									"\tpm.environment.set(\"numberOfNursingCareLTCYears\",1);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData=JSON.parse(responseBody)",
									"",
									"",
									"postman.setEnvironmentVariable(\"NursingCareExpenseyear\",jsonData.futureNursingCareExpensesList[0].year);",
									"postman.setEnvironmentVariable(\"NursingCareExpense\",jsonData.futureNursingCareExpensesList[0].expense);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n\t\"age\": {{age}},\n\t\"transactionTypeFlag\":{{transactionTypeFlag}},\n\t\"zipcode\":{{zipcode}},\n\t\"pvAsOfYear\": {{pvAsOfYear}},\n\t\"healthProfile\": {{healthProfile}},\n\t\"gender\": \"{{gender}}\",\n\t\"lifeExpectancy\": {{lifeExpectancy}},\n\t\"currentLifeStyleExpenses\": {{currentLifeStyleExpenses}},\n\t\"numberOfAdultDayHealthCareLTCYears\":{{numberOfAdultDayHealthCareLTCYears}},\n\t\"numberOfHomeCareLTCYears\": {{numberOfHomeCareLTCYears}},\n\t\"numberOfAssistedCareLTCYears\":{{numberOfAssistedCareLTCYears}},\n\t\"numberOfNursingCareLTCYears\":{{numberOfNursingCareLTCYears}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/longTermCareR4",
							"host": [
								"{{server}}"
							],
							"path": [
								"longTermCareR4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verifying  NursingCareExpenses with DB Long_Term_Care_Expenses Table",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//From longTermCareR4 Response",
									"//var zipcode=postman.getEnvironmentVariable(\"zipcode\");",
									"",
									"//mySQL Query",
									"var queryvalZipcode = \"_where=(src_zipcode_for_county,eq,{{zipcode}})\"",
									"",
									"pm.environment.set(\"Query\",queryvalZipcode);",
									"setTimeout(function(){}, 500);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Taking Response into varible",
									"var ltcedata = JSON.parse(responseBody)",
									"",
									"",
									"//longTermCareR4 API Reponse",
									"var NursingCareExpenseyear=postman.getEnvironmentVariable(\"NursingCareExpenseyear\");",
									"",
									"//NursingCareExpenseyear",
									"",
									"console.log(\"/** NursingCare Expenses  **/\");",
									"var DByear=ltcedata[0].year;",
									"console.log(\"DB year\",DByear)",
									"",
									"  ",
									"",
									"     var inflation=ltcedata[0].expected_inflation",
									"     console.log(\"need to add expected_inflation from DB \",inflation)",
									"",
									"     var Nursingcare=ltcedata[0].nursing_home_facility;",
									"     console.log(\"'home_maker_services' Expenses from DB\",Nursingcare);",
									"",
									"     ",
									"",
									"//inflation from DB long_term_care_expenses  table ",
									"",
									"     var Nursingcare=Nursingcare+((Nursingcare/100)*inflation);",
									"     console.log(\" After added a inflation to 'nursing_home_facility' DB Value ' are \",Nursingcare)",
									"",
									"     //longTermCareR4 API Reponse",
									"     var NursingCareExpense=postman.getEnvironmentVariable(\"NursingCareExpense\");",
									"     console.log(\"longTermCareR4 API Reponse NursingCareExpense are \",NursingCareExpense);",
									"",
									"pm.test(\"Verifying NursingCare Expenses'MATCHED'with DB After added a inflation to 'nursing_home_facility' value of long_term_care_expenses DB Table\",function()",
									"          {",
									"              pm.expect(String(Nursingcare)).to.equal(NursingCareExpense)",
									"     ",
									"             console.log(NursingCareExpense,\"NursingCareExpense'MATCHED'with DB After added a inflation to 'nursing_home_facility' value of long_term_care_expenses DB Table\",Nursingcare);",
									"        });",
									"     ",
									"         ",
									"    ",
									"     ",
									"",
									"",
									"     ",
									"     ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/long_term_care_expenses?{{Query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"long_term_care_expenses"
							],
							"query": [
								{
									"key": "{{Query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AssistedCareExpense_DataValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData=JSON.parse(responseBody)",
									"",
									"",
									"postman.setEnvironmentVariable(\"AssistedCareExpensesyear\",jsonData.futureAssistedCareExpensesList[0].year);",
									"postman.setEnvironmentVariable(\"AssistedCareExpenses\",jsonData.futureAssistedCareExpensesList[0].expense);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  pm.environment.set(\"age\",65);",
									"    pm.environment.set(\"lifeExpectancy\",66);",
									"    pm.environment.set(\"numberOfAdultDayHealthCareLTCYears\",0);",
									"\tpm.environment.set(\"numberOfHomeCareLTCYears\",0)",
									"\tpm.environment.set(\"numberOfAssistedCareLTCYears\",1);",
									"\tpm.environment.set(\"numberOfNursingCareLTCYears\",0);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n\t\"age\": {{age}},\n\t\"transactionTypeFlag\":{{transactionTypeFlag}},\n\t\"zipcode\":{{zipcode}},\n\t\"pvAsOfYear\": {{pvAsOfYear}},\n\t\"healthProfile\": {{healthProfile}},\n\t\"gender\": \"{{gender}}\",\n\t\"lifeExpectancy\": {{lifeExpectancy}},\n\t\"currentLifeStyleExpenses\": {{currentLifeStyleExpenses}},\n\t\"numberOfAdultDayHealthCareLTCYears\":{{numberOfAdultDayHealthCareLTCYears}},\n\t\"numberOfHomeCareLTCYears\": {{numberOfHomeCareLTCYears}},\n\t\"numberOfAssistedCareLTCYears\":{{numberOfAssistedCareLTCYears}},\n\t\"numberOfNursingCareLTCYears\":{{numberOfNursingCareLTCYears}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}/longTermCareR4",
							"host": [
								"{{server}}"
							],
							"path": [
								"longTermCareR4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verifying  AssistedCareExpense with DB Long_Term_Care_Expenses Table",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//From longTermCareR4 Response",
									"//var zipcode=postman.getEnvironmentVariable(\"zipcode\");",
									"",
									"//mySQL Query",
									"var queryvalZipcode = \"_where=(src_zipcode_for_county,eq,{{zipcode}})\"",
									"",
									"pm.environment.set(\"Query\",queryvalZipcode);",
									"setTimeout(function(){}, 500);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Taking Response into varible",
									"var ltcedata = JSON.parse(responseBody)",
									"",
									"//longTermCareR4 API Reponse",
									"var AssistedCareExpensesyear=postman.getEnvironmentVariable(\"AssistedCareExpensesyear\");",
									"",
									"//AssistedCareExpensesyear",
									"",
									"console.log(\"/** AssistedCareExpenses**/\");",
									"var DByear=ltcedata[0].year;",
									"console.log(\"DB year\",DByear)",
									"",
									"  ",
									"",
									"     var inflation=ltcedata[0].expected_inflation",
									"     console.log(\"need to add expected_inflation from DB \",inflation)",
									"",
									"     var Assistedcare=ltcedata[0].assisted_living_facility;",
									"     console.log(\"assisted_living_facility' Expenses from DB\",Assistedcare);",
									"",
									"     ",
									"",
									"//inflation from DB long_term_care_expenses  table ",
									"",
									"     var Assistedcare=Assistedcare+((Assistedcare/100)*inflation);",
									"     console.log(\" After added a inflation to 'assisted_living_facility' DB Value ' are \",Assistedcare)",
									"",
									"     //longTermCareR4 API Reponse",
									"     var AssistedCareExpenses=postman.getEnvironmentVariable(\"AssistedCareExpenses\");",
									"     console.log(\"longTermCareR4 API Reponse  are \",AssistedCareExpenses);",
									"",
									"     ",
									"        pm.test(\"Verifying AssistedCareExpenses'MATCHED'with DB After added a inflation to 'assisted_living_facility' value of long_term_care_expenses DB Table\",function()",
									"          {",
									"              pm.expect(String(Assistedcare)).to.equal(AssistedCareExpenses)",
									"     ",
									"             console.log(AssistedCareExpenses,\"AssistedCareExpenses'MATCHED'with DB After added a inflation to 'assisted_living_facility' value of long_term_care_expenses DB Table\",Assistedcare);",
									"        });",
									"     ",
									"         ",
									"    pm.environment.clear();",
									"     ",
									"",
									"",
									"     ",
									"     ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/long_term_care_expenses?{{Query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"long_term_care_expenses"
							],
							"query": [
								{
									"key": "{{Query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "From  long_term_care_expenses  DB Table taking year value  and expected_inflation value and CareExpenses \n For calculating Care Expenses in response from DB Table Data , checked difference between the DB year and Care Expenses Starting  year then we added the inflation from DB until  no.of years differenced.\n\nWe used same process for all Care Expenses."
		},
		{
			"name": "Users_FP_SU",
			"item": [
				{
					"name": "userManagement_FP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"loginId\", response.loginId);\r",
									"postman.setEnvironmentVariable(\"userType\", response.userType);\r",
									"postman.setEnvironmentVariable(\"financialPlannerGroupId\", response.financialPlannerGroupId);\r",
									"\r",
									"postman.setEnvironmentVariable(\"name\", response.name);\r",
									"\r",
									"postman.setEnvironmentVariable(\"organizationName\", response.organizationName);\r",
									"\r",
									"postman.setEnvironmentVariable(\"address1\", response.address1);\r",
									"postman.setEnvironmentVariable(\"city\", response.city);\r",
									"\r",
									"postman.setEnvironmentVariable(\"zipcode\", response.zipcode);\r",
									"\r",
									"postman.setEnvironmentVariable(\"country\", response.country);\r",
									"\r",
									"postman.setEnvironmentVariable(\"phone\", response.phone);\r",
									"postman.setEnvironmentVariable(\"title\", response.title);\r",
									"\r",
									"postman.setEnvironmentVariable(\"workNumber\", response.workNumber);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"serviceUsageFlag\":\"U\",\n\t\"loginId\":\"fp@gmail.com\",\n\t\"authenticationString\":\"dzee\",\n\t\"userType\":\"financial_planner\",\n  \n    \"financialPlannerGroupId\" : 941,\n\t\"phone\":\"8888888888\",\n    \"zipcode\": 80001,\n\t\"address1\":\"denver\",\n    \"address2\":\"denver1\",\n\t\"state\":\"Colorado\",\n\t\"city\":\"denver\",\n\t\"title\":\"Mr\",\n\t\"name\":\"Financial\",\n\t\"country\":\"US\",\n\t\"organizationName\":\"aivante\",\n\t\"assignedName\": \"archana\",\n    \"workNumber\": 5555555555,\n    \"fax\":\"2222222222\",\n    \"ror\":6,\n\t\"logo\":\"\",\n\t\"custodialRelationship\": \"NO_RELATION\"\n\n}\n"
						},
						"url": {
							"raw": "{{server}}/userManagement",
							"host": [
								"{{server}}"
							],
							"path": [
								"userManagement"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Join_Users&UserDatailsTable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"//var u1_login_id = response[0].u1_login_id;\r",
									"\r",
									"pm.test(\"DB_login_id matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('loginId'))).to.equal (String((response[0].u1_login_id), \"DB_login_id did not match with Users_API_login_id\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_email matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('loginId'))).to.equal (String((response[0].u2_email), \"DB_login_id did not match with Users_API_email\"));\r",
									"})\r",
									"// if ((response[0].u1_login_id)== postman.getEnvironmentVariable(\"loginId\") & (response[0].u2_email)== postman.getEnvironmentVariable(\"loginId\") ){\r",
									"//     pm.test(\"DB_login_id matched with UsersAPI\")\r",
									"// }\r",
									"// else pm.test(\"DB_login_id did not match with Users_API_login_id\")\r",
									"// console.log(response[0].login_id);\r",
									"\r",
									"pm.test(\"DB_userType matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('userType'))).to.equal (String((response[0].u1_user_type), \"DB_userType did not match with Users_API_login_id\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_financialPlannerGroupId matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('financialPlannerGroupId'))).to.equal (String((response[0].u1_financial_planner_group_id), \"DB_financialPlannerGroupId did not match with Users_API_financialPlannerGroupId\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_name matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('name'))).to.equal (String((response[0].u2_name), \"DB_name did not match with Users_API_name\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_organizationName matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('organizationName'))).to.equal (String((response[0].u2_org_name), \"DB_organizationName did not match with Users_API_organizationName\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_address1 matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('address1'))).to.equal (String((response[0].u2_address_1), \"DB_address1 did not match with Users_API_address1\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_city matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('city'))).to.equal (String((response[0].u2_city), \"DB_city did not match with Users_API_city\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_zipcode matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('zipcode'))).to.equal (String((response[0].u2_zipcode), \"DB_zipcode did not match with Users_API_zipcode\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_country matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('country'))).to.equal (String((response[0].u2_country), \"DB_country did not match with Users_API_country\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_phone matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('phone'))).to.equal (String((response[0].u2_phone), \"DB_phone did not match with Users_API_phone\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_title matched with UsersAPII\", () => {\r",
									"pm.expect(pm.environment.get(String('title'))).to.equal (String((response[0].u2_title), \"DB_title did not match with Users_API_title\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_workNumber matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('workNumber'))).to.equal (String((response[0].u2_work_number), \"DB_workNumber did not match with Users_API_workNumber\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_join=u1.users,_j,u2.user_details&_on1=(u1.login_id,eq,u2.email)&_fields=u1.login_id,u1.user_type,u1.financial_planner_id,u1.financial_planner_group_id,u1.created_on,u2.email,u2.name,u2.org_name,u2.address_1,u2.city,u2.zipcode,u2.country,u2.phone,u2.title,u2.work_number&_where=(u1.login_id,eq,{{loginId}})\"\r",
									"\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/xjoin?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"xjoin"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Join_Users&UserDatailsTable Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"//var u1_login_id = response[0].u1_login_id;\r",
									"\r",
									"pm.test(\"DB_login_id matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('loginId'))).to.equal (String((response[0].u1_login_id), \"DB_login_id did not match with Users_API_login_id\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_email matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('loginId'))).to.equal (String((response[0].u2_email), \"DB_login_id did not match with Users_API_email\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"DB_userType matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('userType'))).to.equal (String((response[0].u1_user_type), \"DB_userType did not match with Users_API_login_id\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_financialPlannerGroupId matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('financialPlannerGroupId'))).to.equal (String((response[0].u1_financial_planner_group_id), \"DB_financialPlannerGroupId did not match with Users_API_financialPlannerGroupId\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_name matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('name'))).to.equal (String((response[0].u2_name), \"DB_name did not match with Users_API_name\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_organizationName matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('organizationName'))).to.equal (String((response[0].u2_org_name), \"DB_organizationName did not match with Users_API_organizationName\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_address1 matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('address1'))).to.equal (String((response[0].u2_address_1), \"DB_address1 did not match with Users_API_address1\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_city matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('city'))).to.equal (String((response[0].u2_city), \"DB_city did not match with Users_API_city\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_zipcode matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('zipcode'))).to.equal (String((response[0].u2_zipcode), \"DB_zipcode did not match with Users_API_zipcode\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_country matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('country'))).to.equal (String((response[0].u2_country), \"DB_country did not match with Users_API_country\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_phone matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('phone'))).to.equal (String((response[0].u2_phone), \"DB_phone did not match with Users_API_phone\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_title matched with UsersAPII\", () => {\r",
									"pm.expect(pm.environment.get(String('title'))).to.equal (String((response[0].u2_title), \"DB_title did not match with Users_API_title\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_workNumber matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('workNumber'))).to.equal (String((response[0].u2_work_number), \"DB_workNumber did not match with Users_API_workNumber\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_join=u1.users,_j,u2.user_details&_on1=(u1.login_id,eq,u2.email)&_fields=u1.login_id,u1.user_type,u1.financial_planner_id,u1.financial_planner_group_id,u1.created_on,u2.email,u2.name,u2.org_name,u2.address_1,u2.city,u2.zipcode,u2.country,u2.phone,u2.title,u2.work_number&_where=(u1.login_id,eq,{{loginId}})\"\r",
									"\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/xjoin?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"xjoin"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "userManagement_SU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"loginId\", response.loginId);\r",
									"postman.setEnvironmentVariable(\"userType\", response.userType);\r",
									"postman.setEnvironmentVariable(\"financialPlannerGroupId\", response.financialPlannerGroupId);\r",
									"\r",
									"postman.setEnvironmentVariable(\"name\", response.name);\r",
									"\r",
									"postman.setEnvironmentVariable(\"organizationName\", response.organizationName);\r",
									"\r",
									"postman.setEnvironmentVariable(\"address1\", response.address1);\r",
									"postman.setEnvironmentVariable(\"city\", response.city);\r",
									"\r",
									"postman.setEnvironmentVariable(\"zipcode\", response.zipcode);\r",
									"\r",
									"postman.setEnvironmentVariable(\"country\", response.country);\r",
									"\r",
									"postman.setEnvironmentVariable(\"phone\", response.phone);\r",
									"postman.setEnvironmentVariable(\"title\", response.title);\r",
									"\r",
									"postman.setEnvironmentVariable(\"workNumber\", response.workNumber);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic RmluYW5jaWFsUGxhbm5lclNlcnZpY2VVc2VyOkZpbmFuY2lhbFBsYW5uZXJQQHNzdzByZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"serviceUsageFlag\":\"U\",\n\t\"loginId\":\"su@gmail.com\",\n\t\"authenticationString\":\"dzee\",\n\t\"userType\":\"support_user\",\n  \n    \"financialPlannerGroupId\" : 941,\n\t\"phone\":\"8888888888\",\n    \"zipcode\": 80001,\n\t\"address1\":\"denver\",\n    \"address2\":\"denver1\",\n\t\"state\":\"Colorado\",\n\t\"city\":\"denver\",\n\t\"title\":\"Mr\",\n\t\"name\":\"Financial\",\n\t\"country\":\"US\",\n\t\"organizationName\":\"aivante\",\n\t\"assignedName\": \"archana\",\n    \"workNumber\": 5555555555,\n    \"fax\":\"2222222222\",\n    \"ror\":6,\n\t\"logo\":\"\",\n\t\"custodialRelationship\": \"NO_RELATION\"\n\n}\n"
						},
						"url": {
							"raw": "{{server}}/userManagement",
							"host": [
								"{{server}}"
							],
							"path": [
								"userManagement"
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Join_Users&UserDatailsTable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"//var u1_login_id = response[0].u1_login_id;\r",
									"\r",
									"pm.test(\"DB_login_id matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('loginId'))).to.equal (String((response[0].u1_login_id), \"DB_login_id did not match with Users_API_login_id\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_email matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('loginId'))).to.equal (String((response[0].u2_email), \"DB_login_id did not match with Users_API_email\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"DB_userType matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('userType'))).to.equal (String((response[0].u1_user_type), \"DB_userType did not match with Users_API_login_id\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_financialPlannerGroupId matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('financialPlannerGroupId'))).to.equal (String((response[0].u1_financial_planner_group_id), \"DB_financialPlannerGroupId did not match with Users_API_financialPlannerGroupId\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_name matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('name'))).to.equal (String((response[0].u2_name), \"DB_name did not match with Users_API_name\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_organizationName matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('organizationName'))).to.equal (String((response[0].u2_org_name), \"DB_organizationName did not match with Users_API_organizationName\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_address1 matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('address1'))).to.equal (String((response[0].u2_address_1), \"DB_address1 did not match with Users_API_address1\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_city matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('city'))).to.equal (String((response[0].u2_city), \"DB_city did not match with Users_API_city\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_zipcode matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('zipcode'))).to.equal (String((response[0].u2_zipcode), \"DB_zipcode did not match with Users_API_zipcode\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_country matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('country'))).to.equal (String((response[0].u2_country), \"DB_country did not match with Users_API_country\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_phone matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('phone'))).to.equal (String((response[0].u2_phone), \"DB_phone did not match with Users_API_phone\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_title matched with UsersAPII\", () => {\r",
									"pm.expect(pm.environment.get(String('title'))).to.equal (String((response[0].u2_title), \"DB_title did not match with Users_API_title\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_workNumber matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('workNumber'))).to.equal (String((response[0].u2_work_number), \"DB_workNumber did not match with Users_API_workNumber\"));\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_join=u1.users,_j,u2.user_details&_on1=(u1.login_id,eq,u2.email)&_fields=u1.login_id,u1.user_type,u1.financial_planner_id,u1.financial_planner_group_id,u1.created_on,u2.email,u2.name,u2.org_name,u2.address_1,u2.city,u2.zipcode,u2.country,u2.phone,u2.title,u2.work_number&_where=(u1.login_id,eq,{{loginId}})\"\r",
									"\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/xjoin?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"xjoin"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DB_Join_Users&UserDatailsTable Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"//var u1_login_id = response[0].u1_login_id;\r",
									"\r",
									"pm.test(\"DB_login_id matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('loginId'))).to.equal (String((response[0].u1_login_id), \"DB_login_id did not match with Users_API_login_id\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_email matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('loginId'))).to.equal (String((response[0].u2_email), \"DB_login_id did not match with Users_API_email\"));\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"DB_userType matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('userType'))).to.equal (String((response[0].u1_user_type), \"DB_userType did not match with Users_API_login_id\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_financialPlannerGroupId matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('financialPlannerGroupId'))).to.equal (String((response[0].u1_financial_planner_group_id), \"DB_financialPlannerGroupId did not match with Users_API_financialPlannerGroupId\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_name matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('name'))).to.equal (String((response[0].u2_name), \"DB_name did not match with Users_API_name\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_organizationName matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('organizationName'))).to.equal (String((response[0].u2_org_name), \"DB_organizationName did not match with Users_API_organizationName\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_address1 matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('address1'))).to.equal (String((response[0].u2_address_1), \"DB_address1 did not match with Users_API_address1\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_city matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('city'))).to.equal (String((response[0].u2_city), \"DB_city did not match with Users_API_city\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_zipcode matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('zipcode'))).to.equal (String((response[0].u2_zipcode), \"DB_zipcode did not match with Users_API_zipcode\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_country matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('country'))).to.equal (String((response[0].u2_country), \"DB_country did not match with Users_API_country\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_phone matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('phone'))).to.equal (String((response[0].u2_phone), \"DB_phone did not match with Users_API_phone\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_title matched with UsersAPII\", () => {\r",
									"pm.expect(pm.environment.get(String('title'))).to.equal (String((response[0].u2_title), \"DB_title did not match with Users_API_title\"));\r",
									"})\r",
									"\r",
									"pm.test(\"DB_workNumber matched with UsersAPI\", () => {\r",
									"pm.expect(pm.environment.get(String('workNumber'))).to.equal (String((response[0].u2_work_number), \"DB_workNumber did not match with Users_API_workNumber\"));\r",
									"})\r",
									"\r",
									"pm.environment.clear();\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var query = \"_join=u1.users,_j,u2.user_details&_on1=(u1.login_id,eq,u2.email)&_fields=u1.login_id,u1.user_type,u1.financial_planner_id,u1.financial_planner_group_id,u1.created_on,u2.email,u2.name,u2.org_name,u2.address_1,u2.city,u2.zipcode,u2.country,u2.phone,u2.title,u2.work_number&_where=(u1.login_id,eq,{{loginId}})\"\r",
									"\r",
									"postman.setEnvironmentVariable(\"query\", query);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/xjoin?{{query}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"xjoin"
							],
							"query": [
								{
									"key": "{{query}}",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}